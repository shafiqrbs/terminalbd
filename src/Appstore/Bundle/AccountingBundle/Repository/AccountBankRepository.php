<?php

namespace Appstore\Bundle\AccountingBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\AccountBank;
use Appstore\Bundle\InventoryBundle\Entity\Sales;
use Appstore\Bundle\InventoryBundle\Entity\SalesReturn;
use Doctrine\ORM\EntityRepository;
use Proxies\__CG__\Appstore\Bundle\DomainUserBundle\Entity\PaymentSalary;

/**
 * AccountBankRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccountBankRepository extends EntityRepository
{



    public function findWithSearch($globalOption,$data = '')
    {
        $qb = $this->createQueryBuilder('e');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption);
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.updated','DESC');
        $result = $qb->getQuery();
        return $result;

    }

    public function entityOverview($globalOption,$data)
    {
        $received = $this->getBankOverview($globalOption,'Debit',$data);
        $payment = $this->getBankOverview($globalOption,'Credit',$data);
        $data =  array('received' => $received , 'payment'=> $payment);
        return $data;
    }

    public function getBankOverview($globalOption,$process,$data)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.amount) AS amount ');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption);
        $qb->andWhere("e.process = :process");
        $qb->setParameter('process', 'approved');
        $qb->andWhere("e.toIncrease = :toIncrease");
        $qb->setParameter('toIncrease', $process);
        $this->handleSearchBetween($qb,$data);
        $data = $qb->getQuery()->getSingleResult();
        return $data['amount'];

    }

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {
        if(empty($data))
        {
           /* $datetime = new \DateTime("now");
            $startDate = $datetime->format('Y-m-d 00:00:00');
            $endDate = $datetime->format('Y-m-d 23:59:59');

            $qb->andWhere("e.updated >= :startDate");
            $qb->setParameter('startDate', $startDate);
            $qb->andWhere("e.updated <= :endDate");
            $qb->setParameter('endDate', $endDate);*/

        }else{

            $startDate = isset($data['startDate'])  ? $data['startDate'] : '';
            $endDate =   isset($data['endDate'])  ? $data['endDate'] : '';
            $toUser =    isset($data['toUser'])? $data['toUser'] :'';
            $account =    isset($data['accountHead'])? $data['accountHead'] :'';

            if (!empty($data['startDate']) and !empty($data['endDate']) ) {

                $qb->andWhere("e.updated >= :startDate");
                $qb->setParameter('startDate', $startDate.' 00:00:00');
            }
            if (!empty($data['endDate']) and !empty($data['startDate'])) {

                $qb->andWhere("e.updated <= :endDate");
                $qb->setParameter('endDate', $endDate.' 23:59:59');
            }
            if (!empty($toUser)) {
                $qb->join('e.toUser','u');
                $qb->andWhere("u.username = :user");
                $qb->setParameter('user', $toUser);
            }
            if (!empty($account)) {
                $qb->join('e.accountHead','a');
                $qb->andWhere("a.id = :account");
                $qb->setParameter('account', $account);
            }
        }

    }




    public function insertAccountBank(Sales $entity)
    {


        $em = $this->_em;
        $AccountBank = new AccountBank();

        $AccountBank->setInventoryConfig($entity->getInventoryConfig());
        $AccountBank->setSales($entity);
        $AccountBank->setCustomer($entity->getCustomer());
        /* Sales Revenue - Accounts Receivables */
        $AccountBank->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->find(21));
        $AccountBank->setToIncrease('Debit');
        $AccountBank->setAmount($entity->getSubTotal());
        $AccountBank->setApprovedBy($entity->getCreatedBy());
        $AccountBank->setProcess('approved');
        $em->persist($AccountBank);

        $AccountBank = new AccountBank();

        $AccountBank->setInventoryConfig($entity->getInventoryConfig());
        $AccountBank->setSales($entity);
        $AccountBank->setCustomer($entity->getCustomer());
        /* Current assets - Sales Accounts Payable */
        $AccountBank->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->find(22));
        $AccountBank->setToIncrease('Credit');
        $AccountBank->setAmount($entity->getPayment());
        $AccountBank->setApprovedBy($entity->getCreatedBy());
        $AccountBank->setProcess('approved');
        $em->persist($AccountBank);

        $em->flush();

    }

    public function insertAccountBankReturn(SalesReturn $entity)
    {
        $em = $this->_em;
        $AccountBank = new AccountBank();
        $AccountBank->setInventoryConfig($entity->getInventoryConfig());
        $AccountBank->setSalesReturn($entity);
        $AccountBank->setCustomer($entity->getSales()->getCustomer());
        /* Cash - Sales Accounts Payable */
        $AccountBank->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->find(22));
        $AccountBank->setToIncrease('Credit');
        $AccountBank->setAmount($entity->getPayment());
        $AccountBank->setApprovedBy($entity->getCreatedBy());
        $AccountBank->setProcess('approved');
        $em->persist($AccountBank);
        $em->flush();

    }


    public function insertSalaryBank(\Appstore\Bundle\AccountingBundle\Entity\PaymentSalary $paymentSalary)
    {
        $entity = new AccountBank();

        $em = $this->_em;
        $globalOption = $paymentSalary->getUser()->getGlobalOption();
        $accountHead = $em->getRepository('AccountingBundle:AccountHead')->find(43);
        $entity->setGlobalOption($globalOption);
        $entity->setAccountHead($accountHead);
        $entity->setToUser($paymentSalary->getUser());
        $entity->setCreatedBy($paymentSalary->getCreatedBy());
        $entity->setApprovedBy($paymentSalary->getApprovedBy());
        $entity->setBank($paymentSalary->getBank());
        $entity->setAccountNo($paymentSalary->getAccountNo());
        $entity->setAmount($paymentSalary->getTotalAmount());
        $entity->setRemark($paymentSalary->getRemark());
        $entity->setPaymentMethod('Cheque');
        $entity->setProcess('approved');
        $entity->setToIncrease('Credit');
        $em->persist($entity);
        $em->flush();

    }


}
