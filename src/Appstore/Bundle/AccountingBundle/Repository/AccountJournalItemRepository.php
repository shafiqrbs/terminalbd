<?php

namespace Appstore\Bundle\AccountingBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\AccountJournal;
use Appstore\Bundle\AccountingBundle\Entity\AccountJournalItem;
use Appstore\Bundle\AssetsBundle\Entity\PurchaseItem;
use Appstore\Bundle\BusinessBundle\Entity\BusinessPurchase;
use Appstore\Bundle\HospitalBundle\Entity\HmsInvoiceReturn;
use Appstore\Bundle\HotelBundle\Entity\HotelPurchase;
use Appstore\Bundle\InventoryBundle\Entity\Purchase;
use Appstore\Bundle\InventoryBundle\Entity\SalesReturn;
use Appstore\Bundle\MedicineBundle\Entity\MedicinePurchase;
use Appstore\Bundle\MedicineBundle\Entity\MedicineSalesReturn;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * AccountJournalRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccountJournalItemRepository extends EntityRepository
{
    public function insertDoubleEntry(AccountJournal $journal, $data)
    {
        $em = $this->_em;



        foreach ($data['accountHead'] as $key => $value):

           if(($value and $data['debit'][$key]) or ($value and $data['credit'][$key]) ) {

               $metaId = isset($data['journalItem'][$key]) ? $data['journalItem'][$key] : 0 ;
               $journalItem = $this->find($metaId);
               if($journalItem){
                   $item = $journalItem;
               }else{
                   $item = new AccountJournalItem();
               }
               $item->setAccountJournal($journal);
               $accountHead = $em->getRepository('AccountingBundle:AccountHead')->find($value);
               $item->setAccountHead($accountHead);
               $item->setDebit($data['debit'][$key]);
               $item->setCredit($data['credit'][$key]);
               if ($data['subAccountHead'][$key] > 0) {
                   $accountSubHead = $em->getRepository('AccountingBundle:AccountHead')->find($data['subAccountHead'][$key]);
                   $item->setAccountSubHead($accountSubHead);
               }
               $item->setNarration($data['narration'][$key]);
               $em->persist($item);
               $em->flush();;
           }

        endforeach;
    }
}
