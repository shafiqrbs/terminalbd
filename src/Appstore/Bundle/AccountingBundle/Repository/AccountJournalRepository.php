<?php

namespace Appstore\Bundle\AccountingBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\AccountJournal;
use Appstore\Bundle\InventoryBundle\Entity\Purchase;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * AccountJournalRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccountJournalRepository extends EntityRepository
{


    public function findWithSearch(User $user,$data = '')
    {
        $globalOption = $user->getGlobalOption();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->createQueryBuilder('e');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption);
        if (!empty($branch)){
            $qb->andWhere("e.branches = :branch");
            $qb->setParameter('branch', $branch);
        }
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.updated','DESC');
        $result = $qb->getQuery();
        return $result;
    }

    public function accountCashOverview(User $user,$transactionMethods,$data)
    {
        $globalOption = $user->getGlobalOption();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.transactionMethod','t');
        $qb->select('SUM(e.debit) AS debit, SUM(e.credit) AS credit');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption);
        if (!empty($branch)){
            $qb->andWhere("e.branches = :branch");
            $qb->setParameter('branch', $branch);
        }
        $qb->andWhere("t.id IN(:transactionMethod)");
        $qb->setParameter('transactionMethod',array_values($transactionMethods));
        $this->handleSearchBetween($qb,$data);
        $result = $qb->getQuery()->getOneOrNullResult();
        $data =  array('debit'=> $result['debit'],'credit'=> $result['credit']);
        return $data;

    }

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {
        if(!empty($data))
        {
            $datetime = new \DateTime("now");
            $accountRefNo = isset($data['accountRefNo'])  ? $data['accountRefNo'] : '';
            $today_startdatetime = $datetime->format('Y-m-d 00:00:00');
            $today_enddatetime = $datetime->format('Y-m-d 23:59:59');

            $startDate = isset($data['startDate']) and $data['startDate'] != '' ? $data['startDate'].' 00:00:00' : $today_startdatetime;
            $endDate =   isset($data['endDate']) and $data['endDate'] != '' ? $data['endDate'].' 23:59:59' : $today_enddatetime;


            if (!empty($accountRefNo)) {

                $qb->andWhere("e.accountRefNo = :accountRefNo");
                $qb->setParameter('accountRefNo', $accountRefNo);
            }

            if (!empty($toUser)) {


                $qb->andWhere("e.toUser = :toUser");
                $qb->setParameter('toUser', $toUser);
            }
            if (!empty($accountHead)) {

                $qb->andWhere("e.accountHead = :accountHead");
                $qb->setParameter('accountHead', $accountHead);
            }

            if (!empty($data['startDate']) ) {

                $qb->andWhere("e.updated >= :startDate");
                $qb->setParameter('startDate', $startDate.' 00:00:00');
            }
            if (!empty($data['endDate'])) {

                $qb->andWhere("e.updated <= :endDate");
                $qb->setParameter('endDate', $endDate.' 23:59:59');
            }

        }

    }

    public function accountJournalOverview($globalOption,$data)
    {
        $qb = $this->_em->createQueryBuilder();
        $datetime = new \DateTime("now");
        $today_startdatetime = $datetime->format('Y-m-d 00:00:00');
        $today_enddatetime = $datetime->format('Y-m-d 23:59:59');

        $startDate = isset($data['startDate']) and $data['startDate'] != '' ? $data['startDate'].' 00:00:00' : $today_startdatetime;
        $endDate =   isset($data['endDate']) and $data['endDate'] != '' ? $data['endDate'].' 23:59:59' : $today_enddatetime;
        $toUser =    isset($data['toUser'])? $data['toUser'] :'';
        $accountHead = isset($data['accountHead'])? $data['accountHead'] :'';


        $qb->from('AccountingBundle:AccountJournal','s');
        $qb->select('sum(s.amount) as amount');
        $qb->where('s.globalOption = :globalOption');
        $qb->setParameter('globalOption', $globalOption);

        if (!empty($startDate) and $startDate !="") {
            $qb->andWhere("s.updated >= :startDate");
            $qb->setParameter('startDate', $startDate);
        }
        if (!empty($endDate)) {
            $qb->andWhere("s.updated <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        if (!empty($toUser)) {
            $qb->andWhere("s.toUser = :toUser");
            $qb->setParameter('toUser', $toUser);
        }
        if (!empty($accountHead)) {
            $qb->andWhere("s.accountHead = :accountHead");
            $qb->setParameter('accountHead', $accountHead);
        }

        $amount = $qb->getQuery()->getSingleScalarResult();
        return  $amount ;

    }

    public function reportOperatingRevenue($globalOption,$data){

        $parent = array(23,37);
        $qb = $this->createQueryBuilder('ex');
        $qb->join('ex.accountHeadCredit','accountHead');
        $qb->select('sum(ex.amount) as amount, accountHead.name as name');
        $qb->where("ex.parent IN (:parent)");
        $qb->setParameter('parent', $parent);
        $qb->andWhere('ex.globalOption = :globalOption');
        $qb->setParameter('globalOption', $globalOption);
        $this->handleSearchBetween($qb,$data);
        $qb->groupBy('accountHead.id');
        return  $qb->getQuery()->getArrayResult();
    }


    public function    insertAccountPurchaseJournal(Purchase $purchase)
    {

        $entity = new AccountJournal();
        $accountHeadCredit = $this->_em->getRepository('AccountingBundle:AccountHead')->find(49);
        $accountCashHead = $this->_em->getRepository('AccountingBundle:AccountHead')->find(30);
        $accountBankHead = $this->_em->getRepository('AccountingBundle:AccountHead')->find(38);
        $accountMobileHead = $this->_em->getRepository('AccountingBundle:AccountHead')->find(45);

        $entity->setGlobalOption($purchase->getInventoryConfig()->getGlobalOption());
        $entity->setTransactionType('Debit');
        $entity->setAmount($purchase->getPaymentAmount());
        $entity->setTransactionMethod($purchase->getTransactionMethod());
        $entity->setAccountBank($purchase->getAccountBank());
        $entity->setAccountMobileBank($purchase->getAccountMobileBank());
        $entity->setApprovedBy($purchase->getApprovedBy());
        $entity->setCreatedBy($purchase->getApprovedBy());
        $entity->setAccountHeadDebit($accountHeadCredit);
        if ($purchase->getTransactionMethod()->getId() == 2){
            $entity->setAccountHeadCredit($accountBankHead);
        }elseif ($purchase->getTransactionMethod()->getId() == 3){
            $entity->setAccountHeadCredit($accountMobileHead);
        }else{
            $entity->setAccountHeadCredit($accountCashHead);
        }
        $entity->setToUser($purchase->getApprovedBy());
        $entity->setJournalSource('purchase');
        $entity->setProcess('approved');
        $this->_em->persist($entity);
        $this->_em->flush();
        return $entity;
    }


    public function removeApprovedPurchaseJournal(Purchase $purchase)
    {
        $journal = $this->_em->getRepository('AccountingBundle:AccountJournal')->findOneBy(array('approvedBy' => $purchase->getApprovedBy(),'globalOption'=> $purchase->getInventoryConfig()->getGlobalOption(),'amount'=> $purchase->getPaymentAmount(),'journalSource'=>'purchase' ));

        $accountCash = $this->_em->getRepository('AccountingBundle:AccountCash')->findOneBy(array('processHead'=>'Journal','globalOption' => $journal->getGlobalOption() ,'accountRefNo' => $journal->getAccountRefNo()));
        if($accountCash){
            $this->_em->remove($accountCash);
            $this->_em->flush();
        }

        $transactions = $this->_em->getRepository('AccountingBundle:Transaction')->findBy(array('processHead'=>'Journal','globalOption' => $journal->getGlobalOption() ,'accountRefNo' => $journal->getAccountRefNo()));
        foreach ($transactions as $transaction){
            if($transaction){
                $this->_em->remove($transaction);
                $this->_em->flush();
            }
        }
        $this->_em->remove($journal);
        $this->_em->flush();


    }


}
