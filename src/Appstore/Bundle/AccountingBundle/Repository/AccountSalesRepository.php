<?php

namespace Appstore\Bundle\AccountingBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\AccountSales;
use Appstore\Bundle\InventoryBundle\Entity\Sales;
use Appstore\Bundle\InventoryBundle\Entity\SalesReturn;
use Doctrine\ORM\EntityRepository;

/**
 * AccountSalesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccountSalesRepository extends EntityRepository
{


    public function salesOverview($globalOption,$data)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.totalAmount) AS totalAmount, SUM(e.amount) AS receiveAmount, SUM(e.amount) AS dueAmount,SUM(e.amount) AS returnAmount ');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption);
        $this->handleSearchBetween($qb,$data);
        $result = $qb->getQuery()->getSingleResult();
        $data =  array('totalAmount'=>$result['totalAmount'],'receiveAmount'=>$result['receiveAmount'],'dueAmount'=>$result['dueAmount'],'returnAmount'=>$result['returnAmount']);
        return $data;

    }

    public function findWithSearch($globalOption,$data = '')
    {
        $qb = $this->createQueryBuilder('e');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption);
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.updated','DESC');
        $result = $qb->getQuery();
        return $result;

    }

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {
        if(empty($data))
        {
             $datetime = new \DateTime("now");
             $startDate = $datetime->format('Y-m-d 00:00:00');
             $endDate = $datetime->format('Y-m-d 23:59:59');

            /*
             $qb->andWhere("e.updated >= :startDate");
             $qb->setParameter('startDate', $startDate);
             $qb->andWhere("e.updated <= :endDate");
             $qb->setParameter('endDate', $endDate);*/

        }else{

            $startDate = isset($data['startDate'])  ? $data['startDate'] : '';
            $endDate =   isset($data['endDate'])  ? $data['endDate'] : '';
            $toUser =    isset($data['toUser'])? $data['toUser'] :'';
            $account =    isset($data['accountHead'])? $data['accountHead'] :'';

            if (!empty($data['startDate']) ) {

                $qb->andWhere("e.updated >= :startDate");
                $qb->setParameter('startDate', $startDate.' 00:00:00');
            }
            if (!empty($data['endDate'])) {

                $qb->andWhere("e.updated <= :endDate");
                $qb->setParameter('endDate', $endDate.' 23:59:59');
            }
            if (!empty($toUser)) {
                $qb->join('e.customer','c');
                $qb->andWhere("c.name = :user");
                $qb->setParameter('user', $toUser);
            }
            if (!empty($account)) {
                $qb->join('e.accountHead','a');
                $qb->andWhere("a.id = :account");
                $qb->setParameter('account', $account);
            }
        }

    }

    public function lastInsertSales($globalOption,$entity)
    {
        $em = $this->_em;
        $entity = $em->getRepository('AccountingBundle:AccountSales')->findOneBy(
            array('globalOption'=>$globalOption,'customer'=> $entity->getCustomer(),'process'=>'approved'),
            array('id' => 'DESC')
        );

        if (empty($entity)) {
            return 0;
        }
        return $entity->getBalance();
    }

    public function insertAccountSales(Sales $entity)
    {

        $em = $this->_em;
        $accountSales = new AccountSales();

        $accountSales->setAccountBank($entity->getAccountBank());
        $accountSales->setAccountMobileBank($entity->getAccountMobileBank());
        $accountSales->setGlobalOption($entity->getInventoryConfig()->getGlobalOption());
        $accountSales->setSales($entity);
        $accountSales->setCustomer($entity->getCustomer());
        $accountSales->setTransactionMethod($entity->getTransactionMethod());
        $accountSales->setTotalAmount($entity->getTotal());
        $accountSales->setAmount($entity->getPayment());

        $balance = $this->lastInsertSales($entity->getInventoryConfig()->getGlobalOption(),$entity);
        $lastBalance = ($balance + $entity->getDue());
        $accountSales->setBalance($lastBalance);

        $accountSales->setApprovedBy($entity->getCreatedBy());
        $accountSales->setProcessHead('Sales');
        $accountSales->setProcess('approved');
        $em->persist($accountSales);
        $em->flush();
        $this->_em->getRepository('AccountingBundle:AccountCash')->insertSalesCash($accountSales);
        return $accountSales;

    }

    public function insertAccountSalesReturn(SalesReturn $entity)
    {
        $em = $this->_em;
        $accountSales = new AccountSales();
        $accountSales->setInventoryConfig($entity->getInventoryConfig());
        $accountSales->setGlobalOption($entity->getInventoryConfig()->getGlobalOption());
        $accountSales->setSalesReturn($entity);
        $accountSales->setCustomer($entity->getSales()->getCustomer());
        /* Cash - Sales Return Payment Account */
       /* $accountSales->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(35));*/
        $accountSales->setToIncrease('Sales Return');
        $accountSales->setReturnAmount($entity->getTotal());
        $accountSales->setApprovedBy($entity->getCreatedBy());
        $accountSales->setProcess('approved');
        $em->persist($accountSales);
        $em->flush();

    }

    public function reportIncome($globalOption,$data)
    {
        if(empty($data)){
            $datetime = new \DateTime("now");
            $data['startDate'] = $datetime->format('Y-m-d 00:00:00');
            $data['endDate'] = $datetime->format('Y-m-d 23:59:59');
        }else{
            $data['startDate'] = date('Y-m-d',strtotime($data['startDate']));
            $data['endDate'] = date('Y-m-d',strtotime($data['endDate']));
        }


        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.totalAmount) AS salesAmount');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption);
        $this->handleSearchBetween($qb,$data);
        $result = $qb->getQuery()->getSingleResult();
        $purchasePrice = $this->_em->getRepository('InventoryBundle:SalesItem')->reportPurchasePrice($globalOption,$data);
        $Expenditures = $this->_em->getRepository('AccountingBundle:Expenditure')->reportExpenditure($globalOption,$data);
        $revenues = $this->_em->getRepository('AccountingBundle:AccountJournal')->reportOperatingRevenue($globalOption,$data);

        $data =  array('salesAmount' => $result['salesAmount'],'purchasePrice' => $purchasePrice,'revenues' => $revenues ,'expenditures' => $Expenditures);
        return $data;

    }



}
