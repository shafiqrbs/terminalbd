<?php

namespace Appstore\Bundle\AccountingBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\CashReconciliation;
use Appstore\Bundle\AccountingBundle\Entity\CashReconciliationMeta;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * CashReconciliationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CashReconciliationRepository extends EntityRepository
{

    public function findWithSearch($globalOption,$data = '')
    {
        $qb = $this->createQueryBuilder('e');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption);
      //  $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.created','DESC');
        $result = $qb->getQuery();
        return $result;

    }

    public function checkExist(GlobalOption $option)
    {
        $date = new \DateTime('now');
        $created = $date->format('Y-m-d');
        $qb = $this->createQueryBuilder('e');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $option->getId());
        $qb->andWhere($qb->expr()->like("e.created", "'%$created%'"  ));
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    public function initialUpdate(User $user , CashReconciliation $entity)
    {

        $transactionCashOverview = $this->_em->getRepository('AccountingBundle:AccountCash')->transactionWiseOverview($user);
        foreach ($transactionCashOverview['result'] as $mod):

            if($mod['transactionName'] == 'Cash'){
                $open   =  $transactionCashOverview['openingBalance'][$mod['transactionId']];
                $debit  =  !empty($transactionCashOverview['transactionBalances'][$mod['transactionId'][0]['debit']]) ? $transactionCashOverview['transactionBalances'][$mod['transactionId'][0]['debit']] : 0;
                $credit =  !empty($transactionCashOverview['transactionBalances'][$mod['transactionId'][0]['credit']]) ? $transactionCashOverview['transactionBalances'][$mod['transactionId'][0]['credit']] : 0;
                $cash   =  (($open + $debit)-$credit);
                $entity->setCash($cash);
            }elseif($mod['transactionName'] == 'Bank'){
                $open   =  $transactionCashOverview['openingBalance'][$mod['transactionId']];
                $debit  =  !empty($transactionCashOverview['transactionBalances'][$mod['transactionId'][0]['debit']]) ? $transactionCashOverview['transactionBalances'][$mod['transactionId'][0]['debit']] : 0;
                $credit =  !empty($transactionCashOverview['transactionBalances'][$mod['transactionId'][0]['credit']]) ? $transactionCashOverview['transactionBalances'][$mod['transactionId'][0]['credit']] : 0;
                $cash   =  (($open + $debit)-$credit);
                $entity->setBank($cash);
            }elseif($mod['transactionName'] == 'Mobile'){
                $open   =  $transactionCashOverview['openingBalance'][$mod['transactionId']];
                $debit  =  !empty($transactionCashOverview['transactionBalances'][$mod['transactionId'][0]['debit']]) ? $transactionCashOverview['transactionBalances'][$mod['transactionId'][0]['debit']] : 0;
                $credit =  !empty($transactionCashOverview['transactionBalances'][$mod['transactionId'][0]['credit']]) ? $transactionCashOverview['transactionBalances'][$mod['transactionId'][0]['credit']] : 0;
                $cash   =  (($open + $debit)-$credit);
                $entity->setMobile($cash);
            }
            endforeach;
            $this->_em->flush($entity);
    }

    public function notesReconciliationInsert(CashReconciliation $reconciliation,$bankCash,$mobileCash)
    {
       $arrs = ['1000 Taka','500 Taka','100 Taka','100 Taka','50 Taka','20 Taka','10 Taka','5 Taka','2 Taka','1 Taka'];
        foreach ($arrs as $arr){
            $entity = new CashReconciliationMeta();
            $entity->setCashReconciliation($reconciliation);
            $entity->setTransactionMethod('Cash');
            $entity->setMetaKey($arr);
            $entity->setAmount(0);
            $this->_em->persist($entity);
            $this->_em->flush();
        }
        $closing = 0;
        var_dump($bankCash);
        exit;
        foreach ($bankCash as $bank ){
           // echo $bankId = $bank['accountId'];

            exit;
            $closing = ($bank['openingBalance'][$bankId] + $bank['debit'] - $bank['credit']);
            $entity = new CashReconciliationMeta();
            $entity->setCashReconciliation($reconciliation);
            $entity->setTransactionMethod('Bank');
            $entity->setMetaKey($bank['bankName']);
            $entity->setAmount($closing);
            $this->_em->persist($entity);
            $this->_em->flush();
        }

        foreach ($mobileCash as $mobile ){

            $closing = ($mobile['openingBalance'][$mobile['accountId']] + $mobile['debit'] - $mobile['credit']);
            $entity = new CashReconciliationMeta();
            $entity->setCashReconciliation($reconciliation);
            $entity->setTransactionMethod('Mobile');
            $entity->setMetaKey($bank['mobileBankName']);
            $entity->setAmount($closing);
            $this->_em->persist($entity);
            $this->_em->flush();
        }
        exit;

    }

    public function update(CashReconciliation $cash)
    {
        $qb = $this->createQueryBuilder();
        $qb->from('AccountingBundle:CashReconciliationMeta','e');
        $qb->join('e.cashReconciliation','t');
        $qb->select('e.transactionMethod, SUM(e.amount) AS amount');
        $qb->where("t.id = :reconciliation");
        $qb->setParameter('reconciliation', $cash->getId());
        $qb->groupBy('e.transactionMethod');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

}
