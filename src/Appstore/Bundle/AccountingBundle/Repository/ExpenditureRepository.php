<?php

namespace Appstore\Bundle\AccountingBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\Expenditure;
use Appstore\Bundle\AccountingBundle\Entity\PaymentSalary;
use Doctrine\ORM\EntityRepository;

/**
 * ExpenditureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExpenditureRepository extends EntityRepository
{

    public function expenditureOverview($globalOption,$data)
    {
        $qb = $this->_em->createQueryBuilder();
        $datetime = new \DateTime("now");
        $startDate = isset($data['startDate']) and $data['startDate'] != '' ? $data['startDate'].' 00:00:00' :'';
        $endDate =   isset($data['endDate']) and $data['endDate'] != '' ? $data['endDate'].' 23:59:59' :'';
        $toUser =    isset($data['toUser'])? $data['toUser'] :'';
        $accountHead = isset($data['accountHead'])? $data['accountHead'] :'';


        $qb->from('AccountingBundle:Expenditure','s');
        $qb->select('sum(s.amount) as amount');
        $qb->where('s.globalOption = :globalOption');
        $qb->setParameter('globalOption', $globalOption);
        if (!empty($startDate) and $startDate !="") {

            $qb->andWhere("s.updated >= :startDate");
            $qb->setParameter('startDate', $startDate);
        }
        if (!empty($endDate)) {
            $qb->andWhere("s.updated <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        if (!empty($toUser)) {
            $qb->andWhere("s.toUser = :toUser");
            $qb->setParameter('toUser', $toUser);
        }
        if (!empty($accountHead)) {
            $qb->andWhere("s.accountHead = :accountHead");
            $qb->setParameter('accountHead', $accountHead);
        }

        $amount = $qb->getQuery()->getSingleScalarResult();
        return  $amount ;

    }

    public function lastInsertExpenditure(Expenditure $entity)
    {

        $em = $this->_em;
        $entity = $em->getRepository('AccountingBundle:Expenditure')->findOneBy(
            array('globalOption' => $entity->getGlobalOption(),'expenseCategory'=>$entity->getExpenseCategory(),'process'=>'approved'),
            array('id' => 'DESC')
        );

        if (empty($entity)) {
            return 0;
        }
        return $entity->getBalance();
    }



    public function insertSalaryExpenditure(PaymentSalary $paymentSalary)
    {
        $entity = new Expenditure();

        $em = $this->_em;
        $globalOption = $paymentSalary->getUser()->getGlobalOption();
        $accountHead = $em->getRepository('AccountingBundle:AccountHead')->find(25);
        $entity->setGlobalOption($globalOption);
        $entity->setAccountHead($accountHead);
        $entity->setToUser($paymentSalary->getUser());
        $entity->setCreatedBy($paymentSalary->getCreatedBy());
        $entity->setApprovedBy($paymentSalary->getApprovedBy());
        $entity->setAmount($paymentSalary->getTotalAmount());
        $entity->setRemark($paymentSalary->getRemark());
        $entity->setPaymentMethod('Cash');
        $entity->setProcess('approved');
        $em->persist($entity);
        $em->flush();

    }

}
