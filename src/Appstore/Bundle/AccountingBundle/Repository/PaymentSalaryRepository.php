<?php

namespace Appstore\Bundle\AccountingBundle\Repository;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 *  PaymentSalaryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentSalaryRepository extends EntityRepository
{

    public function totalAmount(User $user)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.totalAmount) as total');
        // $qb->select('SUM(e.totalAmount) AS totalAmount, SUM(e.advanceAmount) AS advanceAmount, SUM(e.dueAmount) AS dueAmount');
        $qb->where("e.user = :user");
        $qb->setParameter('user', $user->getId());
        $data = $qb->getQuery()->getSingleScalarResult();
        // $data =  array('totalAmount'=>$result['totalAmount'],'advanceAmount'=>$result['advanceAmount'],'dueAmount'=>$result['dueAmount']);
        return $data;

    }




    public function findWithSearch($globalOption,$data = '')
    {
        $qb = $this->createQueryBuilder('e');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption);
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.updated','DESC');
        $result = $qb->getQuery();
        return $result;

    }
    public function entityOverview($globalOption,$data)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.paidAmount) AS paidAmount,SUM(e.totalAmount) AS totalAmount, SUM(e.advanceAmount) AS advanceAmount, SUM(e.dueAmount) AS dueAmount, SUM(e.otherAmount) AS otherAmount');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption);
        $this->handleSearchBetween($qb,$data);
        $result = $qb->getQuery()->getSingleResult();
        $data =  array('totalAmount'=>$result['totalAmount'],'paidAmount'=>$result['paidAmount'],'advanceAmount'=>$result['advanceAmount'],'dueAmount'=>$result['dueAmount'],'otherAmount'=>$result['otherAmount']);
        return $data;


    }

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {
        if(empty($data))
        {
/*            $datetime = new \DateTime("now");
            $startDate = $datetime->format('Y-m-d 00:00:00');
            $endDate = $datetime->format('Y-m-d 23:59:59');

            $qb->andWhere("e.updated >= :startDate");
            $qb->setParameter('startDate', $startDate);
            $qb->andWhere("e.updated <= :endDate");
            $qb->setParameter('endDate', $endDate);*/

        }else{

            $startDate = isset($data['startDate'])  ? $data['startDate'] : '';
            $endDate =   isset($data['endDate'])  ? $data['endDate'] : '';
            $toUser =    isset($data['toUser'])? $data['toUser'] :'';
            $paymentMethod =    isset($data['paymentMethod'])? $data['paymentMethod'] :'';

            if (!empty($data['startDate']) and !empty($data['endDate']) ) {

                $qb->andWhere("e.updated >= :startDate");
                $qb->setParameter('startDate', $startDate.' 00:00:00');
            }
            if (!empty($data['endDate']) and !empty($data['startDate'])) {

                $qb->andWhere("e.updated <= :endDate");
                $qb->setParameter('endDate', $endDate.' 23:59:59');
            }
            if (!empty($toUser)) {
                $qb->join('e.user','u');
                $qb->andWhere("u.username = :user");
                $qb->setParameter('user', $toUser);
            }
            if (!empty($paymentMethod)) {
                $qb->andWhere("e.paymentMethod = :paymentMethod");
                $qb->setParameter('paymentMethod', $paymentMethod);
            }
        }

    }


}
