<?php

namespace Appstore\Bundle\AccountingBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\AccountBank;
use Appstore\Bundle\AccountingBundle\Entity\AccountJournal;
use Appstore\Bundle\AccountingBundle\Entity\AccountOnlineOrder;
use Appstore\Bundle\AccountingBundle\Entity\AccountPurchaseReturn;
use Appstore\Bundle\AccountingBundle\Entity\AccountSales;
use Appstore\Bundle\AccountingBundle\Entity\AccountSalesReturn;
use Appstore\Bundle\AccountingBundle\Entity\Expenditure;
use Appstore\Bundle\AccountingBundle\Entity\PaymentSalary;
use Appstore\Bundle\AccountingBundle\Entity\PettyCash;
use Appstore\Bundle\AccountingBundle\Entity\Transaction;
use Appstore\Bundle\HospitalBundle\Entity\Invoice;
use Appstore\Bundle\HospitalBundle\Entity\InvoiceTransaction;
use Appstore\Bundle\InventoryBundle\Entity\Damage;
use Appstore\Bundle\InventoryBundle\Entity\Purchase;
use Appstore\Bundle\InventoryBundle\Entity\PurchaseReturn;
use Appstore\Bundle\InventoryBundle\Entity\Sales;
use Appstore\Bundle\InventoryBundle\Entity\SalesReturn;
use Doctrine\ORM\EntityRepository;
use Appstore\Bundle\AccountingBundle\Entity\AccountPurchase;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;
use Symfony\Component\Debug\Debug;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * TransactionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionRepository extends EntityRepository
{

    public function accountingReset(GlobalOption $option){

        $em = $this->_em;
        $option = $option->getId();

        $transaction = $em->createQuery('DELETE AccountingBundle:Transaction e WHERE e.globalOption = '.$option);
        $transaction->execute();

        $accountCash = $em->createQuery('DELETE AccountingBundle:AccountCash e WHERE e.globalOption = '.$option);
        $accountCash->execute();

        $AccountJournal = $em->createQuery('DELETE AccountingBundle:AccountJournal e WHERE e.globalOption = '.$option);
        $AccountJournal->execute();

        $AccountPurchase = $em->createQuery('DELETE AccountingBundle:AccountPurchase e WHERE e.globalOption = '.$option);
        $AccountPurchase->execute();

        $AccountPurchaseReturn = $em->createQuery('DELETE AccountingBundle:AccountPurchaseReturn e WHERE e.globalOption = '.$option);
        $AccountPurchaseReturn->execute();

        $AccountSales = $em->createQuery('DELETE AccountingBundle:AccountSales e WHERE e.globalOption = '.$option);
        $AccountSales->execute();

        $AccountSalesReturn = $em->createQuery('DELETE AccountingBundle:AccountSalesReturn e WHERE e.globalOption = '.$option);
        $AccountSalesReturn->execute();

        $PaymentSalary = $em->createQuery('DELETE AccountingBundle:PaymentSalary e WHERE e.globalOption = '.$option);
        $PaymentSalary->execute();

        $SalarySetting = $em->createQuery('DELETE AccountingBundle:SalarySetting e WHERE e.globalOption = '.$option);
        $SalarySetting->execute();

        $Expenditure = $em->createQuery('DELETE AccountingBundle:Expenditure e WHERE e.globalOption = '.$option);
        $Expenditure->execute();

    }

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {

        $startDate = isset($data['startDate'])  ? $data['startDate'] : '';
        $endDate =   isset($data['endDate'])  ? $data['endDate'] : '';

        if (!empty($data['startDate']) ) {

            $qb->andWhere("ex.updated >= :startDate");
            $qb->setParameter('startDate', $startDate.' 00:00:00');
        }
        if (!empty($data['endDate'])) {

            $qb->andWhere("ex.updated <= :endDate");
            $qb->setParameter('endDate', $endDate.' 23:59:59');
        }
    }

    public function transactionOverview($globalOption,$accountHead = 0)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('sum(e.debit) as debit,sum(e.credit) as credit');
        $qb->from('AccountingBundle:Transaction','e');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption->getId());
        if($accountHead > 0)
        {
            $qb->andWhere("e.accountHead = :accountHead");
            $qb->setParameter('accountHead', $accountHead);
        }
        $result = $qb->getQuery()->getSingleResult();
        return $result;

    }
    public function getGroupByAccountHead($globalOption){

        $qb = $this->_em->createQueryBuilder();
        $qb->select('sum(e.amount) as amount,accountHead.name as name , parent.name as parentName, accountHead.id, accountHead.toIncrease, accountHead.code');
        $qb->from('AccountingBundle:Transaction','e');
        $qb->innerJoin('e.accountHead','accountHead');
        $qb->leftJoin('accountHead.parent','parent');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption->getId());
        $qb->groupBy('e.accountHead');
        $qb->orderBy('e.accountHead','ASC');
        $result = $qb->getQuery()->getResult();

        return $result;
    }

    public function specificParentAccountHead($globalOption,$parent){

        $datetime = new \DateTime("now");
        $today_startdatetime = $datetime->format('Y-m-d 00:00:00');
        $today_enddatetime = $datetime->format('Y-m-d 23:59:59');

        $qb = $this->_em->createQueryBuilder();
        $qb->select('sum(e.amount) as amount, accountHead.name as name , accountHead.id, accountHead.toIncrease, accountHead.code');
        $qb->from('AccountingBundle:Transaction','e');
        $qb->innerJoin('e.accountHead','accountHead');
        $qb->where('e.globalOption = :globalOption')
            ->andWhere("accountHead.parent = :parent")
            ->andWhere('e.updated >= :today_startdatetime')
            ->andWhere('e.updated <= :today_enddatetime');
        $qb->setParameter('globalOption', $globalOption->getId())
            ->setParameter('parent', $parent)
            ->setParameter('today_startdatetime', $today_startdatetime)
            ->setParameter('today_enddatetime', $today_enddatetime);
        $qb->groupBy('e.accountHead');
        $qb->orderBy('e.accountHead','ASC');
        $result = $qb->getQuery()->getResult();

        return $result;


    }

    public function specificAccountHead($globalOption,$accountHead){

        $datetime = new \DateTime("now");
        $today_startdatetime = $datetime->format('Y-m-d 00:00:00');
        $today_enddatetime = $datetime->format('Y-m-d 23:59:59');

        $qb = $this->_em->createQueryBuilder();
        $qb->select('e.amount as amount,e.debit as debit, e.credit as credit , e.updated,e.accountRefNo, e.processHead, e.toIncrease, e.content');
        $qb->from('AccountingBundle:Transaction','e');
        $qb->where('e.globalOption = :globalOption')
            ->andWhere("e.accountHead = :accountHead");
        $qb->setParameter('globalOption', $globalOption->getId())
            ->setParameter('accountHead', $accountHead);
        $qb->orderBy('e.updated','DESC');
        $result = $qb->getQuery()->getResult();

        return $result;

    }

    public function reportTransactionIncome($globalOption,$accountHeads,$data){

        $qb = $this->createQueryBuilder('ex');
        $qb->join('ex.accountHead','accountHead');
        $qb->select('sum(ex.amount) as amount, sum(ex.debit) as debit , sum(ex.credit) as credit, accountHead.name as name, accountHead.toIncrease as toIncrease');
        $qb->where("accountHead.parent IN (:parent)");
        $qb->setParameter('parent', $accountHeads);
        $qb->andWhere('ex.globalOption = :globalOption');
        $qb->setParameter('globalOption', $globalOption);
        $this->handleSearchBetween($qb,$data);
        $qb->groupBy('ex.accountHead');
        return  $qb->getQuery()->getOneOrNullResult();

    }

    public function insertAccountJournalTransaction(AccountJournal $journal)
    {

        $this->insertAccountJournalDebitTransaction($journal);
        $this->insertAccountJournalCreditTransaction($journal);

    }

    public function insertAccountJournalDebitTransaction(AccountJournal $entity)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        if(!empty($entity->getCreatedBy()->getProfile()->getBranches())){
            $transaction->setBranches($entity->getCreatedBy()->getProfile()->getBranches());
        }
        $transaction->setProcessHead('Journal');
        $transaction->setProcess($entity->getAccountHeadDebit()->getParent()->getName());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setUpdated($entity->getUpdated());
        $transaction->setAccountHead($entity->getAccountHeadDebit());
        $transaction->setAmount($entity->getAmount());
        $transaction->setDebit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

        return $transaction;

    }

    public function insertAccountJournalCreditTransaction(AccountJournal $entity)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        if(!empty($entity->getCreatedBy()->getProfile()->getBranches())){
            $transaction->setBranches($entity->getCreatedBy()->getProfile()->getBranches());
        }
        $transaction->setProcessHead('Journal');
        $transaction->setProcess($entity->getAccountHeadCredit()->getParent()->getName());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setUpdated($entity->getUpdated());
        $transaction->setAccountHead($entity->getAccountHeadCredit());
        $transaction->setAmount('-'.$entity->getAmount());
        $transaction->setCredit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

        return $transaction;

    }

    public function purchaseTransaction(Purchase $purchase,$accountPurchase,$source='')
    {
        $this->insertInventoryAsset($purchase,$accountPurchase);
        $this->insertPurchaseCash($purchase,$accountPurchase);
        $this->insertPurchaseAccountPayable($purchase,$accountPurchase);
    }

    private function insertInventoryAsset($purchase,$accountPurchase)
    {

        $amount = $purchase->getTotalAmount();
        $transaction = new Transaction();
        $transaction->setGlobalOption($purchase->getInventoryConfig()->getGlobalOption());
        $transaction->setProcessHead('Purchase');
        $transaction->setProcess('Inventory Assets');
        $transaction->setAccountRefNo($accountPurchase->getAccountRefNo());
        $transaction->setUpdated($accountPurchase->getUpdated());
        /* Inventory Assets - Purchase Goods Received account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(6));
        $transaction->setAmount($amount);
        $transaction->setDebit($amount);
        $this->_em->persist($transaction);
        $this->_em->flush();


    }

    private function insertPurchaseCash(Purchase $purchase,AccountPurchase $accountPurchase)
    {

        $amount = $purchase->getPaymentAmount();
        if($amount > 0) {

            $transaction = new Transaction();
            $transaction->setGlobalOption($purchase->getInventoryConfig()->getGlobalOption());
            $transaction->setProcessHead('Purchase');
            $transaction->setProcess('Cash');
            $transaction->setAccountRefNo($accountPurchase->getAccountRefNo());
            $transaction->setUpdated($accountPurchase->getUpdated());

            /* Cash - Cash various */

            if($purchase->getTransactionMethod()->getId() == 2 ){
                /* Current Asset Bank Cash Credit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(38));
                $transaction->setProcess('Current Assets');
            }elseif($purchase->getTransactionMethod()->getId() == 3 ){
                /* Current Asset Mobile Account Credit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(45));
                $transaction->setProcess('Current Assets');
            }else{
                /* Cash - Purchase Goods Payment Account */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(31));
                $transaction->setProcess('Cash');
            }

            $transaction->setAmount('-' . $amount);
            $transaction->setCredit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();

        }
    }

    private function insertPurchaseAccountPayable(Purchase $purchase, AccountPurchase $accountPurchase)
    {

        $amount = $purchase->getDueAmount();
        if($amount > 0){
            $transaction = new Transaction();
            $transaction->setGlobalOption($accountPurchase->getGlobalOption());
            $transaction->setProcessHead('Purchase');
            $transaction->setProcess('Current Liabilities');
            $transaction->setAccountRefNo($accountPurchase->getAccountRefNo());
            $transaction->setUpdated($accountPurchase->getUpdated());
            /* Current Liabilities-Purchase Account payable */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(13));
            $transaction->setAmount('-'.$amount);
            $transaction->setCredit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }
    }

    public function insertPurchaseVendorTransaction(AccountPurchase $entity)
    {
        $this->insertPurchaseCashCreditTransaction($entity);
        $this->insertPurchaseLiabilityDebitTransaction($entity);
    }

    public function insertPurchaseCashCreditTransaction(AccountPurchase $entity)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Purchase');
        $transaction->setUpdated($entity->getUpdated());

        /* Cash - Cash various */
        if($entity->getTransactionMethod()->getId() == 2 ){
            /* Current Asset Bank Cash Credit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(38));
            $transaction->setProcess('Current Assets');
        }elseif($entity->getTransactionMethod()->getId() == 3 ){
            /* Current Asset Mobile Account Credit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(45));
            $transaction->setProcess('Current Assets');
        }else{
            /* Cash - Purchase Goods Payment Account */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(31));
            $transaction->setProcess('Cash');
        }

        $transaction->setAmount('-'.$entity->getPayment());
        $transaction->setCredit($entity->getPayment());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function insertPurchaseLiabilityDebitTransaction(AccountPurchase $entity)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Purchase');
        $transaction->setUpdated($entity->getUpdated());
        $transaction->setProcess('Current Liabilities');
        /* Current Liabilities - Account Payable Payment */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(46));
        $transaction->setAmount($entity->getPayment());
        $transaction->setDebit($entity->getPayment());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function purchaseReturnTransaction($entity,$accountPurchaseReturn)
    {

        $this->insertPurchaseReturn($entity,$accountPurchaseReturn);
        $this->insertPurchaseReturnAccountReceivable($entity,$accountPurchaseReturn);

    }

    private function insertPurchaseReturn(PurchaseReturn $entity,AccountPurchaseReturn $accountPurchaseReturn)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($accountPurchaseReturn->getGlobalOption());
        $transaction->setAccountRefNo($accountPurchaseReturn->getAccountRefNo());
        $transaction->setProcessHead('PurchaseReturn');
        $transaction->setUpdated($entity->getUpdated());
        $transaction->setProcess('Goods');
        /* Inventory Assets-Purchase Return account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(34));
        $transaction->setAmount('-'.$entity->getTotal());
        $transaction->setCredit($entity->getTotal());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    private function insertPurchaseReturnAccountReceivable(PurchaseReturn $entity,AccountPurchaseReturn $accountPurchaseReturn)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($accountPurchaseReturn->getGlobalOption());
        $transaction->setAccountRefNo($accountPurchaseReturn->getAccountRefNo());
        $transaction->setProcessHead('PurchaseReturn');
        $transaction->setUpdated($entity->getUpdated());
        $transaction->setProcess('Cash');
        /* Assets Account - Account Cash */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
        $transaction->setAmount($entity->getTotal());
        $transaction->setDebit($entity->getTotal());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function salesTransaction($entity,$accountSales)
    {
        $this->insertSalesItem($entity,$accountSales);
        $this->insertSalesCash($entity,$accountSales);
        $this->insertSalesAccountReceivable($entity,$accountSales);
        $this->insertSalesVatAccountPayable($entity,$accountSales);
    }

    private function insertSalesItem(Sales $entity , AccountSales $accountSales)
    {


        $amount =  $entity->getTotal();
        $transaction = new Transaction();
        $transaction->setGlobalOption($accountSales->getGlobalOption());
        if(!empty($accountSales->getBranches())){
            $transaction->setBranches($accountSales->getBranches());
        }
        $transaction->setAccountRefNo($accountSales->getAccountRefNo());
        $transaction->setProcessHead('Sales');
        $transaction->setProcess('Goods');
        /* Sales Revenue - Sales goods account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(33));
        $transaction->setAmount('-'.$amount);
        $transaction->setCredit($amount);
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    private function insertSalesCash(Sales $entity , AccountSales $accountSales)
    {
        $amount = $entity->getPayment();
        if($amount > 0) {
            $transaction = new Transaction();
            $transaction->setGlobalOption($accountSales->getGlobalOption());
            if(!empty($accountSales->getBranches())){
                $transaction->setBranches($accountSales->getBranches());
            }
            $transaction->setAccountRefNo($accountSales->getAccountRefNo());
            $transaction->setProcessHead('Sales');
            $transaction->setUpdated($entity->getUpdated());

            /* Cash - Cash various */
            if($accountSales->getTransactionMethod()->getId() == 2 ){
                /* Current Asset Bank Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
                $transaction->setProcess('Current Assets');
            }elseif($accountSales->getTransactionMethod()->getId() == 3 ){
                /* Current Asset Mobile Account Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
                $transaction->setProcess('Current Assets');
            }else{
                /* Cash - Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
                $transaction->setProcess('Cash');
            }

            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }
    }

    private function insertSalesAccountReceivable(Sales $entity, AccountSales $accountSales)
    {

       $amount = $entity->getDue();
        if($amount > 0){

            $transaction = new Transaction();
            $transaction->setGlobalOption($accountSales->getGlobalOption());
            if(!empty($accountSales->getApprovedBy()->getProfile()->getBranches())){
                $transaction->setBranches($accountSales->getApprovedBy()->getProfile()->getBranches());
            }
            $transaction->setAccountRefNo($accountSales->getAccountRefNo());
            $transaction->setProcessHead('Sales');
            $transaction->setProcess('AccountReceivable');
            /* Assets Account - Account Receivable */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(4));
            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();

        }

    }

    private function insertSalesVatAccountPayable(Sales $entity, AccountSales $accountSales)
    {

         $amount = $entity->getVat();
         if($amount > 0){

             $transaction = new Transaction();
             $transaction->setGlobalOption($accountSales->getGlobalOption());
             if(!empty($accountSales->getBranches())){
                 $transaction->setBranches($accountSales->getBranches());
             }
             $transaction->setAccountRefNo($accountSales->getAccountRefNo());
             $transaction->setProcessHead('Sales');
             $transaction->setProcess('AccountPayable');
             /* Current Liabilities - Sales Vat & Tax */
             $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(16));
             $transaction->setAmount('-'.$amount);
             $transaction->setCredit($amount);
             $this->_em->persist($transaction);
             $this->_em->flush();

        }

    }

    public function salesReturnTransaction(SalesReturn $entity, AccountSalesReturn $accountSalesReturn)
    {
        $this->insertSalesReturnDebit($entity,$accountSalesReturn);
        $this->insertSalesReturnCredit($entity,$accountSalesReturn);
    }

    private function insertSalesReturnDebit(SalesReturn $entity, AccountSalesReturn $accountSalesReturn)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($accountSalesReturn->getGlobalOption());
        $transaction->setAccountRefNo($accountSalesReturn->getAccountRefNo());
        if(!empty($accountSalesReturn->getBranches())){
            $transaction->setBranches($accountSalesReturn->getBranches());
        }
        $transaction->setProcessHead('SalesReturn');
        $transaction->setProcess('Goods');
        /* Sales Revenue - Sales Return Account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(34));
        $transaction->setAmount($entity->getTotal());
        $transaction->setDebit($entity->getTotal());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    private function insertSalesReturnCredit(SalesReturn $entity, AccountSalesReturn $accountSalesReturn)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($accountSalesReturn->getGlobalOption());
        if(!empty($accountSalesReturn->getBranches())){
            $transaction->setBranches($accountSalesReturn->getBranches());
        }
        $transaction->setAccountRefNo($accountSalesReturn->getAccountRefNo());
        $transaction->setProcessHead('SalesReturn');
        $transaction->setProcess('Cash');
        /* Cash - Sales Return Payment Account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(35));
        $transaction->setAmount('-'.$entity->getTotal());
        $transaction->setCredit($entity->getTotal());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function onlineOrderTransaction($entity,$onlineOrder)
    {
        $this->insertOnlineOrderItem($entity,$onlineOrder);
        $this->insertOnlineOrderCash($entity,$onlineOrder);
        $this->insertOnlineOrderAccountReceivable($entity,$onlineOrder);
        $this->insertOnlineOrderAccountPayable($entity,$onlineOrder);
        $this->insertOnlineOrderVatAccountPayable($entity,$onlineOrder);

    }


    private function insertOnlineOrderItem($entity , AccountOnlineOrder $onlineOrder)
    {

        $amount =  $entity->getGrandTotal();
        $transaction = new Transaction();
        $transaction->setGlobalOption($onlineOrder->getGlobalOption());
        $transaction->setAccountRefNo($onlineOrder->getAccountRefNo());
        $transaction->setProcessHead('Online');
        $transaction->setProcess('Goods');
        /* Sales Revenue - Sales goods account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(33));
        $transaction->setAmount('-'.$amount);
        $transaction->setCredit($amount);
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    private function insertOnlineOrderCash($entity,$onlineOrder)
    {
        $amount = $entity->getPaidAmount();
        if($amount > 0) {
            $transaction = new Transaction();
            $transaction->setGlobalOption($onlineOrder->getGlobalOption());
            $transaction->setAccountRefNo($onlineOrder->getAccountRefNo());
            $transaction->setProcessHead('Online');

            $transaction->setUpdated($entity->getUpdated());
            /* Cash - Cash various */
            if($entity->getTransactionMethod()->getId() == 1 ){
                /* Cash - Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
                $transaction->setProcess('Cash');
            }elseif($entity->getTransactionMethod()->getId() == 2 ){
                /* Current Asset Bank Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
                $transaction->setProcess('Current Assets');
            }if($entity->getTransactionMethod()->getId() == 3 ){
                /* Current Asset Mobile Account Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(43));
                $transaction->setProcess('Current Assets');
            }

            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }
    }

    private function insertOnlineOrderAccountReceivable($entity,$accountSales)
    {

        $amount = $entity->getDueAmount();
        if($amount > 0){

            $transaction = new Transaction();
            $transaction->setGlobalOption($accountSales->getGlobalOption());
            $transaction->setAccountRefNo($accountSales->getAccountRefNo());
            $transaction->setProcessHead('Sales');
            $transaction->setProcess('AccountReceivable');
            /* Assets Account - Account Receivable */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(4));
            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();

        }

    }

    private function insertOnlineOrderAccountPayable($entity,$onlineOrder)
    {

        $amount = $entity->getReturnAmount();
        if($amount > 0){

            $transaction = new Transaction();
            $transaction->setGlobalOption($onlineOrder->getGlobalOption());
            $transaction->setAccountRefNo($onlineOrder->getAccountRefNo());
            $transaction->setProcessHead('Online');
            $transaction->setProcess('AccountPayable');
            /* Assets Account - Account Payable */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(22));
            $transaction->setAmount('-'.$amount);
            $transaction->setCredit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();

        }

    }

    private function insertOnlineOrderVatAccountPayable($entity,$onlineOrder)
    {

        $amount = $entity->getVat();
        if($amount > 0){

            $transaction = new Transaction();
            $transaction->setGlobalOption($onlineOrder->getGlobalOption());
            $transaction->setAccountRefNo($onlineOrder->getAccountRefNo());
            $transaction->setProcessHead('Online');
            $transaction->setProcess('AccountPayable');
            /* Current Liabilities - Sales Vat & Tax */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(16));
            $transaction->setAmount('-'.$amount);
            $transaction->setCredit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();

        }

    }


    public function insertAccountSalesTransaction(AccountSales $entity){

        $this->insertAccountSalesDebitTransaction($entity);
        $this->insertAccountSalesCreditTransaction($entity);
        $this->_em->getRepository('AccountingBundle:AccountCash')->insertSalesCash($entity);
    }

    public function  insertAccountSalesDebitTransaction(AccountSales $entity)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        if(!empty($entity->getBranches())){
            $transaction->setBranches($entity->getBranches());
        }
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Sales');
        $transaction->setUpdated($entity->getUpdated());

        /* Cash - Cash various */
        if($entity->getTransactionMethod()->getId() == 1 ){
            /* Cash - Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
            $transaction->setProcess('Cash');
        }elseif($entity->getTransactionMethod()->getId() == 2 ){
            /* Current Asset Bank Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
            $transaction->setProcess('Current Assets');
        }elseif($entity->getTransactionMethod()->getId() == 3 ){
            /* Current Asset Mobile Account Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(43));
            $transaction->setProcess('Current Assets');
        }

        $transaction->setAmount($entity->getAmount());
        $transaction->setDebit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function  insertAccountSalesCreditTransaction(AccountSales $entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        if(!empty($entity->getBranches())){
            $transaction->setBranches($entity->getBranches());
        }
        $transaction->setProcess('Current Asset');
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setUpdated($entity->getUpdated());
        $transaction->setProcessHead('Sales');
        /* Sales Revenue - Sales Due Payment credit */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(21));
        $transaction->setAmount('-'.$entity->getAmount());
        $transaction->setCredit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }


    public function insertPettyCashTransaction($entity){

        $this->insertPettyCashDebitTransaction($entity);
        $this->insertPettyCashCreditTransaction($entity);

    }

    public function  insertPettyCashDebitTransaction($entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Petty Cash');
        $transaction->setProcess('Account Receivable');
        /* Cash - Petty Cash */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(4));
        $transaction->setAmount($entity->getAmount());
        $transaction->setDebit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function  insertPettyCashCreditTransaction($entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Petty Cash');
        $transaction->setProcess('Cash Credit');
        /* Cash - Cash credit */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(31));
        $transaction->setAmount('-'.$entity->getAmount());
        $transaction->setCredit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function returnPettyCashTransaction($entity)
    {
        $this->returnPettyCashDebitTransaction($entity);
        $this->returnPettyCashCreditTransaction($entity);
        $this->_em->getRepository('AccountingBundle:AccountCash')->insertPettyCashReturn($entity);

    }

    public function returnPettyCashDebitTransaction($entity)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Petty Cash Return');
        $transaction->setProcess('Cash');
        /* Cash - Cash various */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
        $transaction->setAmount($entity->getAmount());
        $transaction->setDebit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function returnPettyCashCreditTransaction($entity)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Petty Cash Return');
        $transaction->setProcess('Account Receivable');
        /* Cash - Petty Cash */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(41));
        $transaction->setAmount('-'.$entity->getAmount());
        $transaction->setCredit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function insertExpenditureTransaction($entity)
    {
        $this->insertExpenditureDebitTransaction($entity);
        $this->insertExpenditureCreditTransaction($entity);
    }

    public function insertExpenditureDebitTransaction(Expenditure $entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        if(!empty($entity->getBranches())){
            $transaction->setBranches($entity->getBranches());
        }
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Expenditure');
        $transaction->setProcess('Operating Expense');
        /* Cash - Cash credit */
        $transaction->setAccountHead($entity->getAccountHead());
        $transaction->setAmount($entity->getAmount());
        $transaction->setDebit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertExpenditureCreditTransaction(Expenditure $entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        if(!empty($entity->getBranches())){
            $transaction->setBranches($entity->getBranches());
        }
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Expenditure');

        /* Cash - Cash various */
        if($entity->getTransactionMethod()->getId() == 1 ){
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(31));
            $transaction->setProcess('Cash');
        }elseif($entity->getTransactionMethod()->getId() == 2 ){
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(38));
            $transaction->setProcess('Current Assets');
        }elseif($entity->getTransactionMethod()->getId() == 3 ){
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(45));
            $transaction->setProcess('Current Assets');
        }

        $transaction->setAmount('-'.$entity->getAmount());
        $transaction->setCredit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertSalaryTransaction(PaymentSalary $paymentSalary)
    {
            $this->insertSalaryDebitCashTransaction($paymentSalary);
            $this->insertSalaryCreditCashTransaction($paymentSalary);
    }

    public function insertSalaryDebitCashTransaction($paymentSalary)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($paymentSalary->getGlobalOption());
        $transaction->setAccountRefNo($paymentSalary->getAccountRefNo());
        $transaction->setProcessHead('PaymentSalary');
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(25));
        $transaction->setProcess('General & Administrative expenses');
        /* Cash - Cash credit */
        $transaction->setAmount($paymentSalary->getTotalAmount());
        $transaction->setDebit($paymentSalary->getTotalAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertSalaryCreditCashTransaction($paymentSalary)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($paymentSalary->getGlobalOption());
        $transaction->setAccountRefNo($paymentSalary->getAccountRefNo());
        $transaction->setProcessHead('PaymentSalary');

        /* Cash - Cash various */
        if($paymentSalary->getTransactionMethod() == 1 ){
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(31));
            $transaction->setProcess('Cash');
        }elseif($paymentSalary->getTransactionMethod() == 2 ){
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(38));
            $transaction->setProcess('Bank Cash');
        }elseif($paymentSalary->getTransactionMethod() == 3 ) {
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(45));
            $transaction->setProcess('Mobile Cash');
        }

        /* Cash - Cash various */
        $transaction->setAmount('-'.$paymentSalary->getTotalAmount());
        $transaction->setCredit($paymentSalary->getTotalAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertDamageTransaction(Damage $damage)
    {
        $this->insertDamageDebitTransaction($damage);
        $this->insertDamageCreditTransaction($damage);

    }

    public function insertDamageDebitTransaction($damage)
    {
        $transaction = new Transaction();
        $globalOption = $damage->getInventoryConfig()->getGlobalOption();
        $accountHead = $this->_em->getRepository('AccountingBundle:AccountHead')->find(48);
        $transaction->setGlobalOption($globalOption);
        $transaction->setAccountHead($accountHead);
        $transaction->setProcess('Long Term Liabilities');
        /* Cash - Cash various */
        $transaction->setAmount($damage->getTotal());
        $transaction->setDebit($damage->getTotal());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function insertDamageCreditTransaction($damage)
    {
        $transaction = new Transaction();
        $globalOption = $damage->getInventoryConfig()->getGlobalOption();
        $accountHead = $this->_em->getRepository('AccountingBundle:AccountHead')->find(47);
        $transaction->setGlobalOption($globalOption);
        $transaction->setAccountHead($accountHead);
        $transaction->setProcess('Inventory Assets');
        /* Cash - Long Term Liabilities	 */
        $transaction->setAmount('-'.$damage->getTotal());
        $transaction->setCredit($damage->getTotal());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    private  function getNetBalance($inventory)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->select('e');
        $qb->addSelect('e.balance AS balance');
        $qb->from('AccountingBundle:Transaction','e');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory->getId());
        $qb->orderBy('e.id','desc');
        $qb->setMaxResults(1);
        $netTotal = $qb->getQuery()->getSingleResult();
        if(empty($netTotal) > 0 ){
            return 0;
        }else{
            return $netTotal;
        }

    }

    /** =========================== HOSPITAL MANAGEMENT SYSTEM    =========================== */

    public function hmsSalesTransaction(InvoiceTransaction $entity,$accountSales)
    {
        $this->insertHmsCashDebit($entity,$accountSales);
        $this->insertHmsCashCredit($entity,$accountSales);
        if($entity->getVat() > 0){
            $this->insertHmsSalesVatAccountPayable($entity,$accountSales);
        }
    }

    private function insertHmsCashDebit(InvoiceTransaction $entity , AccountSales $accountSales)
    {
        $amount = $entity->getPayment();
        if($amount > 0) {
            $transaction = new Transaction();
            $transaction->setGlobalOption($accountSales->getGlobalOption());
            if(!empty($accountSales->getBranches())){
                $transaction->setBranches($accountSales->getBranches());
            }
            $transaction->setAccountRefNo($accountSales->getAccountRefNo());
            $transaction->setProcessHead('Sales');
            $transaction->setUpdated($entity->getUpdated());

            /* Cash - Cash various */
            if($accountSales->getTransactionMethod()->getId() == 2 ){
                /* Current Asset Bank Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
                $transaction->setProcess('Current Assets');
            }elseif($accountSales->getTransactionMethod()->getId() == 3 ){
                /* Current Asset Mobile Account Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
                $transaction->setProcess('Current Assets');
            }else{
                /* Cash - Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
                $transaction->setProcess('Cash');
            }

            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }
    }

    public function insertHmsCashCredit(InvoiceTransaction $entity , AccountSales $accountSales)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($accountSales->getGlobalOption());
        if(!empty($entity->getCreatedBy()->getProfile()->getBranches())){
            $transaction->setBranches($entity->getCreatedBy()->getProfile()->getBranches());
        }
        $transaction->setProcessHead('Sales');
        $transaction->setProcess('Operating Revenue');
        $transaction->setAccountRefNo($accountSales->getAccountRefNo());
        $transaction->setUpdated($entity->getUpdated());
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(8));
        $transaction->setAmount('-'.$entity->getPayment());
        $transaction->setCredit($entity->getPayment());
        $this->_em->persist($transaction);
        $this->_em->flush();
        return $transaction;

    }

    private function insertHmsSalesVatAccountPayable(Invoice $entity, AccountSales $accountSales)
    {

        $amount = $entity->getVat();
        if($amount > 0){

            $transaction = new Transaction();
            $transaction->setGlobalOption($accountSales->getGlobalOption());
            if(!empty($accountSales->getBranches())){
                $transaction->setBranches($accountSales->getBranches());
            }
            $transaction->setAccountRefNo($accountSales->getAccountRefNo());
            $transaction->setProcessHead('Sales');
            $transaction->setProcess('AccountPayable');
            /* Current Liabilities - Sales Vat & Tax */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(16));
            $transaction->setAmount('-'.$amount);
            $transaction->setCredit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();

        }

    }


    /** =========================== HOSPITAL MANAGEMENT SYSTEM  =========================== */

    public function approvedDeleteRecord($entity,$process){

        $qb = $this->_em->createQueryBuilder();
        $qb->from('AccountingBundle:Transaction','e');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $entity->getGlobalOption()->getId());
        $qb->andWhere("e.process = :process");
        $qb->setParameter('process', $process);
        $qb->andWhere("e.accountRefNo = :accountRefNo");
        $qb->setParameter('accountRefNo', $entity->getAccountRefNo());
        $result = $qb->getQuery()->getResult();
        foreach ($result as $row){
            $this->_em->remove($row);
            $this->_em->flush();
        }

    }

}
