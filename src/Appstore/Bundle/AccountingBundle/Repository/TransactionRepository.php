<?php

namespace Appstore\Bundle\AccountingBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\AccountBank;
use Appstore\Bundle\AccountingBundle\Entity\AccountJournal;
use Appstore\Bundle\AccountingBundle\Entity\AccountSales;
use Appstore\Bundle\AccountingBundle\Entity\Expenditure;
use Appstore\Bundle\AccountingBundle\Entity\PaymentSalary;
use Appstore\Bundle\AccountingBundle\Entity\PettyCash;
use Appstore\Bundle\AccountingBundle\Entity\Transaction;
use Appstore\Bundle\InventoryBundle\Entity\Damage;
use Appstore\Bundle\InventoryBundle\Entity\Sales;
use Doctrine\ORM\EntityRepository;
use Proxies\__CG__\Appstore\Bundle\AccountingBundle\Entity\AccountPurchase;
use Symfony\Component\Debug\Debug;

/**
 * TransactionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionRepository extends EntityRepository
{

    public function transactionOverview($globalOption,$data)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('sum(e.debit) as debit,sum(e.credit) as credit');
        $qb->from('AccountingBundle:Transaction','e');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption->getId());
        $result = $qb->getQuery()->getSingleResult();
        return $result;

    }
    public function getGroupByAccountHead($globalOption){

        $qb = $this->_em->createQueryBuilder();
        $qb->select('sum(e.amount) as amount,accountHead.name as name , parent.name as parentName, accountHead.id, accountHead.toIncrease, accountHead.code');
        $qb->from('AccountingBundle:Transaction','e');
        $qb->innerJoin('e.accountHead','accountHead');
        $qb->leftJoin('accountHead.parent','parent');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption->getId());
        $qb->groupBy('e.accountHead');
        $qb->orderBy('e.accountHead','ASC');
        $result = $qb->getQuery()->getResult();

        return $result;
    }

    public function specificParentAccountHead($globalOption,$parent){

        $datetime = new \DateTime("now");
        $today_startdatetime = $datetime->format('Y-m-d 00:00:00');
        $today_enddatetime = $datetime->format('Y-m-d 23:59:59');

        $qb = $this->_em->createQueryBuilder();
        $qb->select('sum(e.amount) as amount, accountHead.name as name , accountHead.id, accountHead.toIncrease, accountHead.code');
        $qb->from('AccountingBundle:Transaction','e');
        $qb->innerJoin('e.accountHead','accountHead');
        $qb->where('e.globalOption = :globalOption')
            ->andWhere("accountHead.parent = :parent")
            ->andWhere('e.updated >= :today_startdatetime')
            ->andWhere('e.updated <= :today_enddatetime');
        $qb->setParameter('globalOption', $globalOption->getId())
            ->setParameter('parent', $parent)
            ->setParameter('today_startdatetime', $today_startdatetime)
            ->setParameter('today_enddatetime', $today_enddatetime);
        $qb->groupBy('e.accountHead');
        $qb->orderBy('e.accountHead','ASC');
        $result = $qb->getQuery()->getResult();

        return $result;


    }

    public function specificAccountHead($globalOption,$accountHead){

        $datetime = new \DateTime("now");
        $today_startdatetime = $datetime->format('Y-m-d 00:00:00');
        $today_enddatetime = $datetime->format('Y-m-d 23:59:59');

        $qb = $this->_em->createQueryBuilder();
        $qb->select('e.amount as amount,e.debit as debit, e.credit as credit ,  e.updated, e.process, e.toIncrease');
        $qb->from('AccountingBundle:Transaction','e');
        $qb->where('e.globalOption = :globalOption')
            ->andWhere("e.accountHead = :accountHead");
        $qb->setParameter('globalOption', $globalOption->getId())
            ->setParameter('accountHead', $accountHead);
        $qb->orderBy('e.updated','DESC');
        $result = $qb->getQuery()->getResult();

        return $result;


    }



    public function purchaseTransaction($entity,$inventory,$source='')
    {

        $this->insertItem($inventory,$entity);
        $this->insertCash($inventory,$entity);
        $this->insertAccountPayable($inventory,$entity);
    }

    private function insertItem($inventory,$entity)
    {

        $amount = ( $entity->getPaymentAmount() + $entity->getDueAmount());
        $transaction = new Transaction();
        $transaction->setInventoryConfig($inventory);
        $transaction->setGlobalOption($inventory->getGlobalOption());
        $transaction->setProcess('Goods');
        /* Inventory Assets-Purchase Goods Received account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(6));
        $transaction->setAmount($amount);
        $transaction->setDebit($amount);
        $this->_em->persist($transaction);
        $this->_em->flush();

    }


    private function insertCash($inventory, $entity)
    {

        $amount = $entity->getPaymentAmount();
        if($amount > 0) {
            $transaction = new Transaction();
            $transaction->setInventoryConfig($inventory);
            $transaction->setGlobalOption($inventory->getGlobalOption());
            $transaction->setProcess('Cash');
            /* Cash-Purchase Goods Payment Cash */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(31));
            $transaction->setAmount('-' . $amount);
            $transaction->setCredit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }
    }

    private function insertAccountPayable($inventory,$entity)
    {

        $amount = $entity->getDueAmount();
        if($amount > 0){
            $transaction = new Transaction();
            $transaction->setInventoryConfig($inventory);
            $transaction->setGlobalOption($inventory->getGlobalOption());
            $transaction->setProcess('AccountPayable');
            /* Purchase Current Liabilities-Account payable */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(13));
            $transaction->setAmount('-'.$amount);
            $transaction->setCredit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }

    }


    public function purchaseReturnTransaction($entity,$inventory,$source='')
    {

        $this->insertPurchaseReturn($inventory,$entity);
        $this->insertPurchaseReturnAccountReceivable($inventory,$entity);

    }


    private function insertPurchaseReturn($inventory,$entity)
    {
        $transaction = new Transaction();
        $transaction->setInventoryConfig($inventory);
        $transaction->setGlobalOption($inventory->getGlobalOption());
        $transaction->setProcess('Goods');
        /* Inventory Assets-Purchase Goods Return account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(7));
        $transaction->setAmount('-'.$entity->getTotal());
        $transaction->setCredit($entity->getTotal());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    private function insertPurchaseReturnAccountReceivable($inventory,$entity)
    {

        $transaction = new Transaction();
        $transaction->setInventoryConfig($inventory);
        $transaction->setGlobalOption($inventory->getGlobalOption());
        $transaction->setProcess('AccountReceivable');
        /* Assets Account - Account Receivable */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(4));
        $transaction->setAmount($entity->getTotal());
        $transaction->setDebit($entity->getTotal());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertPurchaseReturnReplaceTransaction($entity,$replaceAmount,$source='')
    {

        $this->insertPurchaseReturnReplace($entity->getInventoryConfig(),$replaceAmount);
        $this->insertPurchaseReturnAccountPayable($entity->getInventoryConfig(),$replaceAmount);

    }


    private function insertPurchaseReturnReplace($inventory,$replaceAmount)
    {

        $transaction = new Transaction();
        $transaction->setInventoryConfig($inventory);
        $transaction->setGlobalOption($inventory->getGlobalOption());
        $transaction->setProcess('Goods');
        $transaction->setAccountHead('Assets');
        /* Inventory Assets - Purchase Goods Replaced account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(4));
        $transaction->setAmount($replaceAmount);
        $transaction->setDebit($replaceAmount);
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    private function insertPurchaseReturnAccountPayable($inventory,$replaceAmount)
    {

        $transaction = new Transaction();
        $transaction->setInventoryConfig($inventory);
        $transaction->setGlobalOption($inventory->getGlobalOption());
        $transaction->setProcess('AccountPayable');
        $transaction->setAccountHead('Liability');
        /* Current Liabilities - Accounts Payable */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(7));
        $transaction->setAmount('-'.$replaceAmount);
        $transaction->setCredit($replaceAmount);
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function salesTransaction($entity,$inventory,$source='')
    {

        $this->insertSalesItem($inventory,$entity);
        $this->insertSalesCash($inventory,$entity);
        $this->insertSalesAccountReceivable($inventory,$entity);
        $this->insertSalesVatAccountPayable($inventory,$entity);

    }

    private function insertSalesItem($inventory,$entity)
    {

        $amount =  $entity->getTotal();
        $transaction = new Transaction();
        $transaction->setInventoryConfig($inventory);
        $transaction->setGlobalOption($inventory->getGlobalOption());
        $transaction->setProcess('Goods');
        $transaction->setAccountHead('Assets');
        /* Sales Revenue - Sales goods account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(33));
        $transaction->setAmount('-'.$amount);
        $transaction->setCredit($amount);
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    private function insertSalesCash($inventory,$entity)
    {
        $amount = $entity->getPayment();
        if($amount > 0) {
            $transaction = new Transaction();
            $transaction->setInventoryConfig($inventory);
            $transaction->setGlobalOption($inventory->getGlobalOption());
            $transaction->setProcess('Cash');
            $transaction->setAccountHead('Assets');
            /* Cash - Sales Receive Cash Account */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(36));
            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }
    }

    private function insertSalesAccountReceivable($inventory,$entity)
    {

        $amount = $entity->getDue();
        if($amount > 0){

            $transaction = new Transaction();
            $transaction->setInventoryConfig($inventory);
            $transaction->setGlobalOption($inventory->getGlobalOption());
            $transaction->setProcess('AccountReceivable');
            /* Assets Account - Account Receivable */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(4));
            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();

        }

    }

    private function insertSalesVatAccountPayable($inventory,$entity)
    {

        $amount = $entity->getVat();
        if($amount > 0){

            $transaction = new Transaction();
            $transaction->setInventoryConfig($inventory);
            $transaction->setGlobalOption($inventory->getGlobalOption());
            $transaction->setProcess('AccountPayable');
            /* Current Liabilities - Sales Tax */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(16));
            $transaction->setAmount('-'.$amount);
            $transaction->setCredit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();

        }

    }

    public function salesReturnTransaction($entity,$inventory,$source='')
    {

        $this->insertSalesReturnDebit($inventory,$entity);
        $this->insertSalesReturnCredit($inventory,$entity);

    }


    private function insertSalesReturnDebit($inventory,$entity)
    {

        $transaction = new Transaction();
        $transaction->setInventoryConfig($inventory);
        $transaction->setGlobalOption($inventory->getGlobalOption());
        $transaction->setProcess('Goods');
        /* Sales Revenue - Sales Return Account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(34));
        $transaction->setAmount($entity->getTotal());
        $transaction->setDebit($entity->getTotal());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    private function insertSalesReturnCredit($inventory,$entity)
    {


        $transaction = new Transaction();
        $transaction->setInventoryConfig($inventory);
        $transaction->setGlobalOption($inventory->getGlobalOption());
        $transaction->setProcess('Cash');
        /* Cash - Sales Return Payment Account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(35));
        $transaction->setAmount('-'.$entity->getTotal());
        $transaction->setCredit($entity->getTotal());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertVendorTransaction($entity)
    {

        $this->insertLiabilityDebitTransaction($entity->getInventoryConfig(),$entity);
        $this->insertCashCreditTransaction($entity->getInventoryConfig(),$entity);

    }

    public function insertCashCreditTransaction($inventory, $entity)
    {

        $transaction = new Transaction();
        $transaction->setInventoryConfig($inventory);
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setProcess('Cash');

        if(!empty($entity->getBank())) {

            /* Asset Accounts - Bank Cash Payment */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));

        }else{

            /* Cash - Purchase Goods Payment Account */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(32));
        }

        $transaction->setAmount('-'.$entity->getAmount());
        $transaction->setCredit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function insertLiabilityDebitTransaction($inventory, $entity)
    {

        $transaction = new Transaction();
        $transaction->setInventoryConfig($inventory);
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setProcess('Current Liabilities');
        /* Current Liabilities - Account Due Payment */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(37));
        $transaction->setAmount($entity->getAmount());
        $transaction->setDebit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertVendorReturnTransaction($entity)
    {

        $this->insertCashDebitTransaction($entity);
        $this->insertLiabilityCreditTransaction($entity);

    }

    public function insertCashDebitTransaction($entity)
    {

        $transaction = new Transaction();
        $transaction->setInventoryConfig($entity->getInventoryConfig());
        $transaction->setGlobalOption($entity->getInventoryConfig()->getGlobalOption());
        $transaction->setProcess('Cash');

        if(!empty($entity->getBank())) {

            /* Asset Accounts - Bank Cash Payment */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(39));

        }else{

            /* Cash - Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
        }

        $transaction->setAmount($entity->getTotalAmount());
        $transaction->setDebit($entity->getTotalAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function insertLiabilityCreditTransaction($entity)
    {

        $transaction = new Transaction();
        $transaction->setInventoryConfig($entity->getInventoryConfig());
        $transaction->setGlobalOption($entity->getInventoryConfig()->getGlobalOption());
        $transaction->setProcess('Current Liabilities');
        /* Current Liabilities - Accounts Payable */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(13));
        $transaction->setAmount('-'.$entity->getTotalAmount());
        $transaction->setCredit($entity->getTotalAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertAccountSalesTransaction($entity){

        $this->insertAccountDebitTransaction($entity);
        $this->insertAccountCreditTransaction($entity);

    }

    public function  insertAccountDebitTransaction($entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setProcess('Cash');
        /* Cash - Cash debit */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
        $transaction->setAmount($entity->getAmount());
        $transaction->setDebit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function  insertAccountCreditTransaction($entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setProcess('Sales Revenue');
        /* Sales Revenue - Sales Due Payment credit */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(42));
        $transaction->setAmount('-'.$entity->getAmount());
        $transaction->setCredit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }


    public function insertPettyCashTransaction($entity){

        $this->insertPettyCashDebitTransaction($entity);
        $this->insertPettyCashCreditTransaction($entity);

    }

    public function  insertPettyCashDebitTransaction($entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setProcess('Cash');
        /* Cash - Petty Cash */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(40));
        $transaction->setAmount($entity->getAmount());
        $transaction->setDebit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function  insertPettyCashCreditTransaction($entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setProcess('Cash');
        /* Cash - Cash credit */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(31));
        $transaction->setAmount('-'.$entity->getAmount());
        $transaction->setCredit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function returnPettyCashTransaction($entity)
    {
        $this->returnPettyCashDebitTransaction($entity);
        $this->returnPettyCashCreditTransaction($entity);

    }

    public function returnPettyCashDebitTransaction($entity)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setProcess('Cash');
        /* Cash - Cash various */
        $transaction->setAccountHead($entity->getAccountHead());
        $transaction->setAmount($entity->getAmount());
        $transaction->setDebit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function returnPettyCashCreditTransaction($entity)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setProcess('Cash');
        /* Cash - Cash credit */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(41));
        $transaction->setAmount('-'.$entity->getAmount());
        $transaction->setCredit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }


    public function insertExpenditureTransaction($entity)
    {
        $this->insertExpenditureDebitTransaction($entity);
        $this->insertExpenditureCreditTransaction($entity);
    }

    public function insertExpenditureDebitTransaction($entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setProcess('Cash');
        /* Cash - Cash credit */
        $transaction->setAccountHead($entity->getAccountHead());
        $transaction->setAmount($entity->getAmount());
        $transaction->setDebit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertExpenditureCreditTransaction($entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setProcess('Cash');
        /* Cash - Cash various */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(31));
        $transaction->setAmount('-'.$entity->getAmount());
        $transaction->setCredit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertAccountBankTransaction($entity)
    {
        if($entity->getToIncrease() == 'Debit'){

            $this->insertAccountBankDebitTransaction($entity);
            $this->insertExpenditureCreditTransaction($entity);

        }else{

            $this->insertAccountDebitTransaction($entity);
            $this->insertAccountBankCreditTransaction($entity);
        }

    }

    public function insertAccountBankDebitTransaction($entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setProcess('Current Assets');
        /* Current Asset - Cash debit */
        $transaction->setAccountHead($entity->getAccountHead());
        $transaction->setAmount($entity->getAmount());
        $transaction->setDebit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertAccountBankCreditTransaction($entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setProcess('Current Assets');
        /* Current Assets - Cash credit */
        $transaction->setAccountHead($entity->getAccountHead());
        $transaction->setAmount('-'.$entity->getAmount());
        $transaction->setCredit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertAccountJournalTransaction($entity)
    {
        $this->insertAccountJournalDebitTransaction($entity);
        $this->insertAccountJournalCreditTransaction($entity);
    }

    public function insertAccountJournalDebitTransaction($entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setProcess('Cash');
        /* Cash - Cash credit */
        $transaction->setAccountHead($entity->getAccountHeadDebit());
        $transaction->setAmount($entity->getAmount());
        $transaction->setDebit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertAccountJournalCreditTransaction($entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setProcess('Cash');
        /* Cash - Cash various */
        $transaction->setAccountHead($entity->getAccountHeadCredit());
        $transaction->setAmount('-'.$entity->getAmount());
        $transaction->setCredit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertSalaryTransaction(PaymentSalary $paymentSalary)
    {
        if($paymentSalary->getPaymentMethod() == 'Cash'){
            $this->insertSalaryDebitCashTransaction($paymentSalary);
            $this->insertSalaryCreditCashTransaction($paymentSalary);

        }else{

            $this->insertSalaryDebitBankTransaction($paymentSalary);
            $this->insertSalaryCreditBankTransaction($paymentSalary);
        }
    }

    public function insertSalaryDebitCashTransaction($paymentSalary)
    {
        $transaction = new Transaction();
        $globalOption = $paymentSalary->getUser()->getGlobalOption();
        $accountHead = $this->_em->getRepository('AccountingBundle:AccountHead')->find(43);
        $transaction->setGlobalOption($globalOption);
        $transaction->setAccountHead($accountHead);
        $transaction->setProcess('Cash');
        /* Cash - Cash credit */
        $transaction->setAmount($paymentSalary->getTotalAmount());
        $transaction->setDebit($paymentSalary->getTotalAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertSalaryCreditCashTransaction($paymentSalary)
    {
        $transaction = new Transaction();
        $globalOption = $paymentSalary->getUser()->getGlobalOption();
        $transaction->setGlobalOption($globalOption);
        $accountHead = $this->_em->getRepository('AccountingBundle:AccountHead')->find(31);
        $transaction->setGlobalOption($globalOption);
        $transaction->setAccountHead($accountHead);
        $transaction->setProcess('Cash');
        /* Cash - Cash various */
        $transaction->setAmount('-'.$paymentSalary->getTotalAmount());
        $transaction->setCredit($paymentSalary->getTotalAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertSalaryDebitBankTransaction($paymentSalary)
    {


        $transaction = new Transaction();
        $globalOption = $paymentSalary->getUser()->getGlobalOption();
        $accountHead = $this->_em->getRepository('AccountingBundle:AccountHead')->find(43);
        $transaction->setGlobalOption($globalOption);
        $transaction->setAccountHead($accountHead);
        $transaction->setProcess('Current Assets');
        /* Cash - Cash various */
        $transaction->setAmount($paymentSalary->getTotalAmount());
        $transaction->setDebit($paymentSalary->getTotalAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }


    public function insertSalaryCreditBankTransaction($paymentSalary)
    {
        $transaction = new Transaction();
        $globalOption = $paymentSalary->getUser()->getGlobalOption();
        $accountHead = $this->_em->getRepository('AccountingBundle:AccountHead')->find(38);
        $transaction->setGlobalOption($globalOption);
        $transaction->setAccountHead($accountHead);
        $transaction->setProcess('Current Assets');
        /* Cash - Cash various */
        $transaction->setAmount('-'.$paymentSalary->getTotalAmount());
        $transaction->setCredit($paymentSalary->getTotalAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertDamageTransaction(Damage $damage)
    {
        $this->insertDamageDebitTransaction($damage);
        $this->insertDamageCreditTransaction($damage);

    }

    public function insertDamageDebitTransaction($damage)
    {
        $transaction = new Transaction();
        $globalOption = $damage->getInventoryConfig()->getGlobalOption();
        $accountHead = $this->_em->getRepository('AccountingBundle:AccountHead')->find(45);
        $transaction->setGlobalOption($globalOption);
        $transaction->setAccountHead($accountHead);
        $transaction->setProcess('Inventory Assets');
        /* Cash - Cash various */
        $transaction->setAmount($damage->getTotal());
        $transaction->setDebit($damage->getTotal());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function insertDamageCreditTransaction($damage)
    {
        $transaction = new Transaction();
        $globalOption = $damage->getInventoryConfig()->getGlobalOption();
        $accountHead = $this->_em->getRepository('AccountingBundle:AccountHead')->find(44);
        $transaction->setGlobalOption($globalOption);
        $transaction->setAccountHead($accountHead);
        $transaction->setProcess('Long Term Liabilities');
        /* Cash - Long Term Liabilities	 */
        $transaction->setAmount('-'.$damage->getTotal());
        $transaction->setCredit($damage->getTotal());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }



    private  function getNetBalance($inventory)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->select('e');
        $qb->addSelect('e.balance AS balance');
        $qb->from('AccountingBundle:Transaction','e');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory->getId());
        $qb->orderBy('e.id','desc');
        $qb->setMaxResults(1);
        $netTotal = $qb->getQuery()->getSingleResult();
        if(empty($netTotal) > 0 ){
            return 0;
        }else{
            return $netTotal;
        }

    }

}
