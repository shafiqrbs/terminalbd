<?php

namespace Appstore\Bundle\BusinessBundle\Repository;
use Appstore\Bundle\BusinessBundle\Entity\BusinessConfig;
use Appstore\Bundle\BusinessBundle\Entity\BusinessInvoice;
use Appstore\Bundle\BusinessBundle\Entity\BusinessInvoiceAccessories;
use Appstore\Bundle\BusinessBundle\Entity\BusinessParticular;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;


/**
 * BusinessInvoiceParticularRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessInvoiceAccessoriesRepository extends EntityRepository
{

    public function handleDateRangeFind($qb,$data)
    {
        if(empty($data)){
            $datetime = new \DateTime("now");
            $startDate = $datetime->format('Y-m-d 00:00:00');
            $endDate = $datetime->format('Y-m-d 23:59:59');
        }elseif(!empty($data['startDate']) and !empty($data['endDate'])){
            $start = new \DateTime($data['startDate']);
            $startDate = $start->format('Y-m-d 00:00:00');
            $end = new \DateTime($data['endDate']);
            $endDate = $end->format('Y-m-d 23:59:59');
        }
        if (!empty($startDate) ) {
            $qb->andWhere("e.updated >= :startDate");
            $qb->setParameter('startDate', $startDate);
        }
        if (!empty($endDate)) {
            $qb->andWhere("e.updated <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }
    }

    public function findInvoiceAccessories($config)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.dmsConfig = :config')->setParameter('config', $config);
        $qb->orderBy('e.updated','DESC');
        $result = $qb->getQuery();
        return $result;
    }

    public function insertAccessories($dmsConfig,$data)
    {

        $em = $this->_em;
        $entity = new BusinessInvoiceAccessories();
        $quantity = !empty($data['quantity']) ? $data['quantity'] :1;
        $entity->setQuantity($quantity);
        $accessoriesId = $data['accessories'];
        $accessories = $em->getRepository('BusinessBundle:BusinessParticular')->find($accessoriesId);
        $entity->setBusinessParticular($accessories);
        $entity->setSubTotal($quantity * $accessories->getPrice());
        $entity->setPrice($accessories->getPrice());
        $entity->setBusinessConfig($dmsConfig);
        $em->persist($entity);
        $em->flush();

    }

    public function insertInvoiceAccessories(BusinessInvoice $invoice, $data)
    {

        $em = $this->_em;
        $entity = new BusinessInvoiceAccessories();
        $quantity = !empty($data['quantity']) ? $data['quantity'] :1;
        $entity->setQuantity($quantity);
        $accessoriesId = $data['accessories'];
        $accessories = $em->getRepository('BusinessBundle:BusinessParticular')->find($accessoriesId);
        $entity->setBusinessParticular($accessories);
        $entity->setPrice($accessories->getPurchasePrice());
        $entity->setSubTotal($quantity * $accessories->getPrice());
        $entity->setBusinessInvoice($invoice);
        $entity->setBusinessConfig($invoice->getBusinessConfig());
        $em->persist($entity);
        $em->flush();
    }




    public function getInvoiceAccessories(BusinessInvoice $sales)
    {
        $entities = $sales->getBusinessInvoiceAccessories();
        $data = '';
        $date = '';
        $i = 1;
        /** @var $entity BusinessInvoiceAccessories */
        foreach ($entities as $entity) {

            $data .= '<tr id="accessories-'.$entity->getId().'">';
            $data .= '<td class="numeric" >' . $i . '</td>';
            $data .= '<td class="numeric" >' . $entity->getUpdated()->format('d-m-Y') . '</td>';
            $data .= '<td class="numeric" >' . $entity->getBusinessParticular()->getParticularCode().' - '.$entity->getBusinessParticular()->getName(). '</td>';
            $data .= '<td class="numeric" >' . $entity->getQuantity(). '</td>';
            $data .= '<td class="numeric" >' . $entity->getPrice(). '</td>';
            $data .= '<td class="numeric" >' . $entity->getPrice() * $entity->getQuantity(). '</td>';
            $data .= '<td class="numeric" id="approved-'.$entity->getId().'" >
            <a id="'.$entity->getId().'" data-id="'.$entity->getId().'"  data-url="/dms/invoice/'. $entity->getId(). '/accessories-approved" href="javascript:" class="btn blue mini approveAccessories" >Approve</a>
            <a id="'.$entity->getId().'" data-id="'.$entity->getId().'"  data-url="/dms/invoice/'. $entity->getId(). '/accessories-delete" href="javascript:" class="btn red mini deleteAccessories" ><i class="icon-trash"></i></a>
            </td>';
            $data .= '</tr>';
            $i++;
        }
        return $data;
    }

    public function reportAccessoriesOut(BusinessConfig $config , $data)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.subTotal) as subTotal');
        $qb->where('e.dmsConfig = :config')->setParameter('config', $config);
        $this->handleDateRangeFind($qb,$data);
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result['subTotal'];
    }

    public function getAccessoriesItemOut(BusinessConfig $config , $data)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.dmsParticular','particular');
        $qb->select('SUM(e.subTotal) as subTotal');
        $qb->addSelect('SUM(e.quantity) as quantity');
        $qb->addSelect('particular.name as particularName');
        $qb->addSelect('particular.id');
        $qb->where('particular.dmsConfig = :config')->setParameter('config', $config);
        $this->handleDateRangeFind($qb,$data);
        $qb->groupBy('particular.id');
        $results = $qb->getQuery()->getArrayResult();
        return $results;

    }




}
