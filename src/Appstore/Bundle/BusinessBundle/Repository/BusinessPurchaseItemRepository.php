<?php

namespace Appstore\Bundle\BusinessBundle\Repository;
use Appstore\Bundle\BusinessBundle\Entity\BusinessPurchase;
use Appstore\Bundle\BusinessBundle\Entity\BusinessPurchaseItem;
use Appstore\Bundle\BusinessBundle\Entity\BusinessParticular;
use Doctrine\ORM\EntityRepository;


/**
 * BusinessPurchaseItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessPurchaseItemRepository extends EntityRepository
{

    public function getPurchaseAveragePrice(BusinessParticular $particular)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->from('BusinessBundle:BusinessPurchaseItem','e');
        $qb->select('AVG(e.purchasePrice) AS avgPurchasePrice');
        $qb->where('e.businessParticular = :particular')->setParameter('particular', $particular) ;
        $res = $qb->getQuery()->getOneOrNullResult();
        if(!empty($res)){
            $particular->setPurchaseAverage($res['avgPurchasePrice']);
            $this->_em->persist($particular);
            $this->_em->flush($particular);
        }
    }

    public function insertPurchaseItems($invoice, $data)
    {

    	$particular = $this->_em->getRepository('BusinessBundle:BusinessParticular')->find($data['particularId']);
        $em = $this->_em;
	    $purchasePrice = (isset($data['price']) and !empty($data['price']))? $data['price']:0;
        $entity = new BusinessPurchaseItem();
        $entity->setBusinessPurchase($invoice);
        $entity->setBusinessParticular($particular);
        if(!empty($particular->getPrice())){
	        $entity->setSalesPrice($particular->getPrice());
        }
        $entity->setPurchasePrice($purchasePrice);
        $entity->setActualPurchasePrice($purchasePrice);
        $entity->setQuantity($data['quantity']);
        $entity->setPurchaseSubTotal($data['quantity'] * $entity->getPurchasePrice());
        $em->persist($entity);
        $em->flush();
        $this->getPurchaseAveragePrice($particular);

    }

    public function insertSawmillPurchaseItems($invoice, $data)
    {
	    $particular = $this->_em->getRepository('BusinessBundle:BusinessParticular')->find($data['particularId']);
	    $em = $this->_em;
	    $entity = new BusinessPurchaseItem();
	    $quantity = 0;
	    $purchasePrice = 0;
	    if($data['particularType'] == 'round'){
		    $quantity = round((($data['height'] * $data['width'] * $data['length'])/2304),2);
		    $purchasePrice = round(($data['price']/$quantity),2);
	    }elseif ($data['particularType'] == 'square'){
		    $quantity = round((($data['height'] * $data['width'] * $data['length'])/144),2);
		    $purchasePrice = round(($data['price']/$quantity),2);
	    }
	    $entity->setBusinessPurchase($invoice);
	    $entity->setBusinessParticular($particular);
	    if(!empty($particular->getPrice())){
		    $entity->setSalesPrice($particular->getPrice());
	    }
	    $entity->setPurchasePrice($purchasePrice);
	    $entity->setActualPurchasePrice($purchasePrice);
	    $entity->setQuantity($quantity);
	    $entity->setPurchaseSubTotal($data['price']);
	    $em->persist($entity);
	    $em->flush();
    }

    public function getPurchaseItems(BusinessPurchase $sales)
    {
        $entities = $sales->getPurchaseItems();
        $data = '';
        $i = 1;

        /* @var $entity BusinessPurchaseItem */

        foreach ($entities as $entity) {

	        $unit = !empty($entity->getBusinessParticular()->getUnit()) ? $entity->getBusinessParticular()->getUnit()->getName():'';
            $data .= "<tr id='remove-{$entity->getId()}'>";
            $data .= "<td>{$i}</td>";
            $data .= "<td>{$entity->getBusinessParticular()->getParticularCode()}</td>";
            $data .= "<td>{$entity->getBusinessParticular()->getName()}</td>";
            $data .= "<td>{$entity->getSalesPrice()}</td>";
            $data .= "<td>{$entity->getPurchasePrice()}</td>";
            $data .= "<td>{$entity->getQuantity()}</td>";
            $data .= "<td>{$unit}</td>";
            $data .= "<td>{$entity->getPurchaseSubTotal()}</td>";
            $data .= "<td><a id='{$entity->getId()}'  data-url='/business/purchase/{$sales->getId()}/{$entity->getId()}/particular-delete' href='javascript:' class='btn red mini delete' ><i class='icon-trash'></i></a></td>";
            $data .= '</tr>';
            $i++;
        }
        return $data;
    }

    public function purchaseStockItemUpdate(BusinessParticular $stockItem)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.businessPurchase', 'mp');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.businessParticular = :particular')->setParameter('particular', $stockItem->getId());
        $qb->andWhere('mp.process = :process')->setParameter('process', 'Approved');
        $qnt = $qb->getQuery()->getOneOrNullResult();
        return $qnt['quantity'];
    }

    public function updatePurchaseItemPrice(BusinessPurchase $purchase)
    {
        /* @var BusinessPurchaseItem $item */

        foreach ($purchase->getBusinessPurchaseItems() as $item){

            $em = $this->_em;
            $percentage = $purchase->getDiscountCalculation();
            $purchasePrice = $this->stockPurchaseItemPrice($percentage,$item->getActualPurchasePrice());
            $item->setPurchasePrice($purchasePrice);
            $em->persist($item);
            $em->flush();
        }
    }

    public function stockPurchaseItemPrice($percentage,$price)
    {
        $discount = (($price * $percentage )/100);
        $purchasePrice = ($price - $discount);
        return $purchasePrice;

    }
}
