<?php

namespace Appstore\Bundle\BusinessBundle\Repository;
use Appstore\Bundle\BusinessBundle\Entity\BusinessPurchase;
use Doctrine\ORM\EntityRepository;


/**
 * BusinessPurchaseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessPurchaseRepository extends EntityRepository
{

    public function updatePurchaseTotalPrice(BusinessPurchase $entity)
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('BusinessBundle:BusinessPurchaseItem','si')
            ->select('sum(si.purchaseSubTotal) as total')
            ->where('si.businessPurchase = :entity')
            ->setParameter('entity', $entity ->getId())
            ->getQuery()->getSingleResult();

        if($total['total'] > 0){
            $subTotal = $total['total'];
            $entity->setSubTotal($subTotal);
            $entity->setDiscount($this->getUpdateDiscount($entity,$subTotal));
            $entity->setNetTotal($entity->getSubTotal() - $entity->getDiscount());
            $entity->setDue($entity->getNetTotal() - $entity->getPayment() );

        }else{

            $entity->setSubTotal(0);
            $entity->setNetTotal(0);
            $entity->setDue(0);
            $entity->setDiscount(0);
        }

        $em->persist($entity);
        $em->flush();

        return $entity;

    }

    public function getUpdateDiscount(BusinessPurchase $invoice,$subTotal)
    {
        if($invoice->getDiscountType() == 'flat'){
            $discount = $invoice->getDiscountCalculation();
        }else{
            $discount = ($subTotal * $invoice->getDiscountCalculation())/100;
        }
        return $discount;
    }


}
