<?php

namespace Appstore\Bundle\EcommerceBundle\Repository;
use Appstore\Bundle\EcommerceBundle\Entity\Item;
use Appstore\Bundle\EcommerceBundle\Entity\ItemKeyValue;
use Doctrine\ORM\EntityRepository;

/**
 * ItemKeyValueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemKeyValueRepository extends EntityRepository
{
    public function insertItemKeyValue(Item $reEntity,$data)
    {

        $em = $this->_em;
        $i=0;

        if(isset($data['metaKey']) OR isset($data['metaValue']) ){
            foreach ($data['metaKey'] as $value) {
                $metaId = isset($data['metaId'][$i]) ? $data['metaId'][$i] : 0 ;
                $itemKeyValue = $this->_em->getRepository('EcommerceBundle:ItemKeyValue')->findOneBy(array('item'=>$reEntity,'id' => $metaId));
                if(!empty($metaId) and !empty($itemKeyValue)){
                    $this->updateMetaAttribute($itemKeyValue,$data['metaKey'][$i],$data['metaValue'][$i]);
                }else{
                    if(!empty($data['metaKey'][$i]) OR !empty($data['metaValue'][$i]))
                    {
                        $entity = new ItemKeyValue();
                        $entity->setMetaKey($data['metaKey'][$i]);
                        $entity->setMetaValue($data['metaValue'][$i]);
                        $entity->setItem($reEntity);
                        $em->persist($entity);
                        $em->flush($entity);
                    }

                }
                $i++;
            }

        }


    }

    public function updateMetaAttribute(ItemKeyValue $itemKeyValue,$key,$value ='')
    {
            $em = $this->_em;
            $itemKeyValue->setMetaKey($key);
            $itemKeyValue->setMetaValue($value);
            $em->flush();
    }

    public function insertCopyItemKeyValue(Item $itemNew , Item $item)
    {
        $em = $this->_em;
        $i=0;

        if(!empty($item->getItemKeyValues())){

            /* @var ItemKeyValue $attribute */
            foreach ($item->getItemKeyValues() as $attribute) {
                $entity = new ItemKeyValue();
                $entity->setMetaKey($attribute->getMetaKey());
                $entity->setMetaValue($attribute->getMetaValue());
                $entity->setSorting($attribute->getSorting());
                $entity->setItem($itemNew);
                $em->persist($entity);
                $em->flush($entity);

            }

        }
    }

    public function setDivOrdering($data)
    {
        $i = 1;
        $em = $this->_em;
        $qb = $em->createQueryBuilder();
        foreach ($data as $key => $value){
            $qb->update('InventoryBundle:ItemKeyValue', 'mg')
                ->set('mg.sorting', $i)
                ->where('mg.id = :id')
                ->setParameter('id', $key)
                ->getQuery()
                ->execute();
            $i++;

        }

    }

}
