<?php

namespace Appstore\Bundle\EcommerceBundle\Repository;
use Appstore\Bundle\EcommerceBundle\Entity\Discount;
use Appstore\Bundle\EcommerceBundle\Entity\EcommerceConfig;
use Appstore\Bundle\EcommerceBundle\Entity\Item;
use Appstore\Bundle\HotelBundle\Entity\Category;
use Appstore\Bundle\MedicineBundle\Entity\MedicineStock;
use Doctrine\ORM\EntityRepository;
use Gregwar\Image\Image;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * PurchaseVendorItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */


class ItemRepository extends EntityRepository
{


    public function findFrontendProductWithSearch($config, $data , $limit = 0)
    {
        if (!empty($data['sortBy'])) {

            $sortBy = explode('=?=', $data['sortBy']);
            $sort = $sortBy[0];
            $order = $sortBy[1];
        }
        $qb = $this->createQueryBuilder('product');
        $qb->leftJoin('product.brand','brand');
        $qb->leftJoin('product.category','category');
        $qb->where("product.status = 1");
        $qb->andWhere("product.ecommerceConfig = :config");
        $qb->setParameter('config', $config);

        if (!empty($data['brand'])) {
            $qb->andWhere("product.brand = :brand");
            $qb->setParameter('brand', $data['brand']);
        }

        if (!empty($data['promotion'])) {
            $qb->andWhere("product.promotion = :promotion");
            $qb->setParameter('promotion', $data['promotion']);
        }

        if (!empty($data['tag'])) {
            $qb->leftJoin('product.tag','tag');
            $qb->andWhere("tag.id = :tagId");
            $qb->setParameter('tagId', $data['tag']);
        }

        if (!empty($data['discount'])) {
            $qb->andWhere("product.discount >= :discount");
            $qb->setParameter('discount', $data['discount']);
        }

        if (!empty($data['categoryId'])) {
            $qb->andWhere("category.id >= :catId");
            $qb->setParameter('catId', $data['categoryId']);
        }

        if (!empty($data['category'])) {
            $qb->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->like('category.path', "'". intval($data['category']) . "/%'"),
                    $qb->expr()->like('category.path', "'%/" . intval($data['category']) . "/%'")
                )
            );
        }
        if (!empty($data['product'])) {
             $search = strtolower($data['product']);
             $qb->andWhere($qb->expr()->like("product.slug", "'%$search%'"  ));
        }

        if (empty($data['sortBy'])){
            $qb->orderBy('product.updated', 'DESC');
        }else{
            $qb->orderBy($sort ,$order);
        }
        if($limit > 0 ) {
            $qb->setMaxResults($limit);
        }
        $res = $qb->getQuery();
        return  $res;

    }

    public function filterFrontendProductWithSearch($config, $data , $limit = 0)
    {
        if (!empty($data['sortBy'])) {

            $sortBy = explode('=?=', $data['sortBy']);
            $sort = $sortBy[0];
            $order = $sortBy[1];
        }

        $qb = $this->createQueryBuilder('product');
        $qb->leftJoin("product.masterItem",'masterItem');
        $qb->leftJoin('product.goodsItems','goodsitems');
        $qb->where("product.isWeb = 1");
        $qb->andWhere("product.status = 1");
        $qb->andWhere("product.ecommerceConfig = :config");
        $qb->setParameter('config', $config);

        if (!empty($data['brand'])) {
            $qb->andWhere("product.brand IN(:brand)");
            $qb->setParameter('brand',$data['brand']);
        }

        if (!empty($data['size'])) {
            $qb->andWhere("goodsitems.size IN(:size)");
            $qb->setParameter('size',$data['size']);
        }

        if (!empty($data['color'])) {
            $qb->leftJoin('goodsitems.colors','colors');
            $qb->andWhere("colors.id IN(:color)");
            $qb->setParameter('color',$data['color']);
        }

        if (!empty($data['promotion'])) {
            $qb->andWhere("product.promotion IN(:promotion)");
            $qb->setParameter('promotion',$data['promotion']);
        }

        if (!empty($data['tag'])) {
            $qb->andWhere("product.tag IN(:tag)");
            $qb->setParameter('tag',$data['tag']);
        }

        if (!empty($data['discount'])) {
            $qb->andWhere("product.discount IN(:discount)");
            $qb->setParameter('discount',$data['discount']);
        }

        if (!empty($data['priceStart'])) {
            $qb->andWhere(' product.salesPrice >= :priceStart');
            $qb->setParameter('priceStart',$data['priceStart']);
        }

        if (!empty($data['priceEnd'])) {
            $qb->andWhere(' product.salesPrice <= :priceEnd');
            $qb->setParameter('priceEnd',$data['priceEnd']);
        }
        
        if (empty($data['sortBy'])){
            $qb->orderBy('product.updated', 'DESC');
        }else{
            $qb->orderBy($sort ,$order);
        }
        if($limit > 0 ) {
            $qb->setMaxResults($limit);
        }
        $res = $qb->getQuery();
        return  $res;

    }

    public function insertCopyPurchaseItem(Item $entity, Item $copyEntity)
    {
        $em = $this->_em;
        $entity->setName($copyEntity->getName());
        $entity->setWebName($copyEntity->getWebName());
        $entity->setSubProduct(true);
        $entity->setQuantity($copyEntity->getQuantity());
        $entity->setMasterQuantity($copyEntity->getMasterQuantity());
        $entity->setPurchasePrice($copyEntity->getPurchase());
        $entity->setSalesPrice($copyEntity->getSalesPrice());
        $entity->setOverHeadCost($copyEntity->getOverHeadCost());
        $entity->setSize($copyEntity->getSize());
        $entity->setItemColors($copyEntity->getItemColors());
        $entity->setBrand($copyEntity->getBrand());
        $entity->setDiscount($copyEntity->getDiscount());
        $entity->setDiscountPrice($copyEntity->getDiscountPrice());
        $entity->setContent($copyEntity->getContent());
        $entity->setTag($copyEntity->getTag());
        $entity->setPromotion($copyEntity->getPromotion());
        $entity->setCountry($copyEntity->getCountry());
        $entity->setSource($copyEntity->getSource());
        $em->persist($entity);
        $em->flush();
    }


    public function insertCopyMedicineItem(MedicineStock $copyEntity)
    {
        $em = $this->_em;
        $config = $copyEntity->getMedicineConfig()->getGlobalOption()->getEcommerceConfig();

        $entity = new Item();
        $entity->setEcommerceConfig($config);
        $entity->setWebName($copyEntity->getName());
        $entity->setQuantity($copyEntity->getRemainingQuantity());
        $entity->setPurchasePrice($copyEntity->getPurchasePrice());
        $entity->setSalesPrice($copyEntity->getSalesPrice());
        if($copyEntity->getBrandName()){
            $brand  = $em->getRepository('EcommerceBundle:ItemBrand')->insertBrand($copyEntity);
            $entity->setBrand($brand);
        }
        $entity->setSource('medicine');
        if($copyEntity->getMedicineBrand() and in_array($copyEntity->getMedicineBrand()->getMedicineForm(),array('Tablet','Capsule','Syrup','Injection'))){
            $entity->setImageDefaultSource($copyEntity->getMedicineBrand()->getMedicineForm());
        }
        $em->persist($entity);
        $em->flush();
        if($copyEntity->getMedicineBrand()) {
            $this->_em->getRepository('EcommerceBundle:ItemKeyValue')->insertMedicineAttribute($entity, $copyEntity);
        }
    }

    public function getSliderFeatureProduct($config, $limit = 3)
    {

        $qb = $this->createQueryBuilder('product');
        $qb->where("product.isWeb = 1");
        $qb->expr()->isNotNull('product.promotion');
        $qb->andWhere("product.ecommerceConfig = :config");
        $qb->setParameter('config', $config->getId());
        if($limit > 0 ) {
            $qb->setMaxResults($limit);
        }
        $qb->orderBy('product.updated', 'DESC');
        $qb = $qb->getQuery();
        $result = $qb->getResult();
        return  $result;

    }

    public function frontendProductNext($entity){

        $db = $this->getNextPrevious($entity);
        return $db->andWhere($db->expr()->gt('e.id',$entity->getId()))->getQuery()->getOneOrNullResult();
    }
    public function frontendProductPrev($entity){
        $db = $this->getNextPrevious($entity);
        return $db->andWhere($db->expr()->lt('e.id',$entity->getId()))->getQuery()->getOneOrNullResult();
    }

    private function getNextPrevious(Item $entity)
    {

        /**
         * @var Item $entity
         */
        $em = $this->_em;
        $db = $em->createQueryBuilder();
        $db->select('e');
        $db->from('EcommerceBundle:Item','e');
        $db->where($db->expr()->andX(
            $db->expr()->eq('e.isWeb',1),
            $db->expr()->eq('e.status',1),
            $db->expr()->eq('e.ecommerceConfig',$entity->getecommerceConfig()->getId())
        ));
        $db->setMaxResults(1);
        return $db;

    }

    public function handleSearchBetween($qb,$data){

        $name           = isset($data['name'])? $data['name'] :'';
        $cat            = isset($data['category'])? $data['category'] :'';
        $brand          = isset($data['brand'])? $data['brand'] :'';
        $promotion      = isset($data['promotion'])? $data['promotion'] :'';
        $discount       = isset($data['discount'])? $data['discount'] :'';
        $tag            = isset($data['tag'])? $data['tag'] :'';


        if (!empty($cat)) {
            $qb->andWhere("item.category = :category");
            $qb->setParameter('category', $cat);
        }
        if (!empty($brand)) {
            $qb->andWhere("item.brand = :brand");
            $qb->setParameter('brand', $brand);
        }
        if (!empty($promotion)) {
            $qb->andWhere("item.promotion = :promotion");
            $qb->setParameter('promotion', $promotion);
        }
        if (!empty($discount)) {
            $qb->andWhere("item.discount = :discount");
            $qb->setParameter('discount', $discount);
        }
        if (!empty($name)) {
            $qb->andWhere($qb->expr()->like("item.name", "'% $name %'"  ));
        }
    }

    public function findWithSearch($config,$data,$limit=0)
    {

        $qb = $this->createQueryBuilder('item');
        $qb->join('item.purchase', 'purchase');
        $qb->where("item.source ='config' ");
        $qb->setParameter('config', $config);
       // $this->handleSearchBetween($qb,$data);
        $qb->orderBy('item.updated','DESC');
        $qb->getQuery();
        return  $qb;

    }

    public function findFoodWithSearch($config,$data,$limit=0)
    {


        $qb = $this->createQueryBuilder('item');
        $qb->where("item.source = 'food'");
        $qb->andWhere("item.ecommerceConfig = :config");
        $qb->setParameter('config', $config);
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('item.updated','DESC');
        $qb->getQuery();
        return  $qb;

    }

    public function findAllProductWithSearch(EcommerceConfig $config , $data,$limit=0)
    {


        $order = isset($data['order'])? $data['order'] :'ASC';
        $qb = $this->createQueryBuilder('item');
        $qb->where("item.ecommerceConfig = {$config->getId()}");
        $this->handleSearchBetween($qb,$data);
        if(!empty($order)){
            if($order == "ASC"){
                $qb->orderBy('item.salesPrice','ASC');
            }else{
                $qb->orderBy('item.salesPrice','DESC');
            }

        }else{
            $qb->orderBy('item.updated','DESC');
        }
        $qb->getQuery();
        return  $qb;

    }

    public function findGoodsWithSearch($config,$data,$limit = 0)
    {

        $qb = $this->createQueryBuilder('product');
        $qb->where("product.ecommerceConfig = :config");
        $qb->setParameter('config', $config);
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('product.updated', 'DESC');
        $qb = $qb->getQuery();
        $result = $qb->getResult();
        return  $result;

    }


    public function findItemWithSearch($config,$data,$limit = 0)
    {

        $qb = $this->createQueryBuilder('item');
        $qb->where("item.source = 'service'");
        $qb->andWhere("item.isWeb = 1");
        $qb->andWhere("item.ecommerceConfig = :config");
        $qb->setParameter('config', $config);
        $this->handleSearchBetween($qb,$data);
        if(!empty($order)){

            if($order == "ASC"){
                $qb->orderBy('item.salesPrice','ASC');
            }else{
                $qb->orderBy('item.salesPrice','DESC');
            }

        }else{

            $qb->orderBy('item.updated','DESC');
        }
        if($limit > 0 ){
            $qb->getMaxResults($limit);
        }
        $qb->getQuery();
        return  $qb;

    }

    public function salesItemWithSearch($config)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join("e.masterItem",'masterItem' );
        $qb->where("e.source = 'service'");
        $qb->andWhere("e.ecommerceConfig = :config");
        $qb->setParameter('config', $config);
        $qb->orderBy('e.name','ASC');
        $qb->getQuery()->getResult();
        return  $qb;

    }

	public function updateMasterProductQuantity(Item $entity)
	{
		$qb = $this->createQueryBuilder('e');
		$qb->join('e.itemSubs','gi');
		$qb->select('sum(gi.quantity) AS quantity');
		$qb->where("e.id = :id");
		$qb->setParameter('id', $entity->getId());
		$sum = $qb->getQuery()->getSingleScalarResult();
		$entity->setMasterQuantity($sum);
		$this->_em->persist($entity);
		$this->_em->flush($entity);

	}


    public function getCulculationDiscountPrice(Item $purchase , Discount $discount)
    {
        $discountPrice = "";
        if($discount->getType() == 'percentage' and $purchase->getSalesPrice() > $discount->getDiscountAmount() ){
            $price = ( ($purchase->getSalesPrice() * (int)$discount->getDiscountAmount())/100 );
            $discountPrice = $purchase->getSalesPrice() - $price;
        }elseif($purchase->getSalesPrice() > $discount->getDiscountAmount()){
            $discountPrice = ( $purchase->getSalesPrice() - (int)$discount->getDiscountAmount());
        }
        return $discountPrice;
    }


    public function getApiProduct(GlobalOption $option,$data = array())
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('item');
        $qb->leftJoin('item.productUnit','productUnit');
        $qb->leftJoin('item.category','category');
        $qb->leftJoin('item.brand','brand');
        $qb->leftJoin('item.discount','discount');
        $qb->select('item.id as id','item.webName as name','item.salesPrice as price','item.discountPrice as discountPrice','item.path as path','item.masterQuantity as quantity','item.quantityApplicable as quantityApplicable');
        $qb->addSelect('category.name as categoryName');
        $qb->addSelect('brand.name as brandName');
        $qb->addSelect('productUnit.name as unitName');
        $qb->addSelect('discount.name as discountName');
        $qb->where("item.ecommerceConfig = :config")->setParameter('config', $config);
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('item.webName','DESC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['product_id']               = (int) $row['id'];
                $data[$key]['name']                     = $row['name'];
                $data[$key]['quantity']                 = $row['quantity'];
                $data[$key]['price']                    = $row['price'];
                $data[$key]['discountPrice']            = $row['discountPrice'];
                $data[$key]['category']                 = $row['categoryName'];
                $data[$key]['brand']                    = $row['brandName'];
                $data[$key]['discountName']             = $row['discountName'];
                $data[$key]['unitName']                 = $row['unitName'];
                $data[$key]['quantityApplicable']       = $row['quantityApplicable'];
                if($row['path']){
                    $path = $this->resizeFilter("uploads/domain/{$option->getId()}/ecommerce/item/{$row['path']}");
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }
        return $data;
    }

    public function getApiProductDetails(GlobalOption $option,$id)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('item');
        $qb->leftJoin('item.productUnit','productUnit');
        $qb->leftJoin('item.category','category');
        $qb->leftJoin('item.brand','brand');
        $qb->leftJoin('item.discount','discount');
        $qb->select('item.id as itemId','item.webName as name','item.salesPrice as price','item.discountPrice as discountPrice','item.path as path','item.masterQuantity as quantity','item.quantityApplicable as quantityApplicable');
        $qb->addSelect('category.name as categoryName');
        $qb->addSelect('brand.name as brandName');
        $qb->addSelect('productUnit.name as unitName');
        $qb->addSelect('discount.name as discountName');
        $qb->where("item.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->andWhere("item.id = :pid")->setParameter('pid', $id);
        $row = $qb->getQuery()->getOneOrNullResult();
        $data = array();
        $data['product_id']               = (int) $row['itemId'];
        $data['name']                     = $row['name'];
        $data['quantity']                 = $row['quantity'];
        $data['price']                    = $row['price'];
        $data['discountPrice']            = $row['discountPrice'];
        $data['category']                 = $row['categoryName'];
        $data['brand']                    = $row['brandName'];
        $data['discountName']             = $row['discountName'];
        $data['unitName']                 = $row['unitName'];
        $data['quantityApplicable']       = $row['quantityApplicable'];
        if($row['path']){
            $path = $this->resizeFilter("uploads/domain/{$option->getId()}/ecommerce/item/{$row['path']}");
            $data['imagePath']            =  $path;
        }else{
            $data['imagePath']            = "";
        }
        return $data;
    }

    public function getSliderFeatureCategory(GlobalOption $globalOption , $limit = 10){

        $qb = $this->createQueryBuilder('e');
        $qb->where("e.globalOption = :option");
        $qb->setParameter('option', $globalOption->getId());
        $qb->orderBy('e.id','DESC');
        $qb->setMaxResults($limit);
        $sql = $qb->getQuery();
        $result = $sql->getResult();
        return  $result;

    }

    public function getApiAllCategory(GlobalOption $option)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.category','category');
        $qb->select('category.id as id','category.name as name');
        $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->groupBy('category.id');
        $qb->orderBy('category.id','DESC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['category_id']    = (int) $row['id'];
                $data[$key]['name']           = $row['name'];
            }
        }
        return $data;
    }

    public function getApiAllBrand(GlobalOption $option)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.brand','brand');
        $qb->select('brand.id as id','brand.name as name');
        $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->groupBy('brand.id');
        $qb->orderBy('brand.id','DESC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['brand_id']    = (int) $row['id'];
                $data[$key]['name']           = $row['name'];
            }
        }
        return $data;
    }


    public function resizeFilter($pathToImage, $width = 256, $height = 256)
    {
        $path = '/' . Image::open(__DIR__.'/../../../../../web/' . $pathToImage)->cropResize($width, $height, 'transparent', 'top', 'left')->guess();
        return $_SERVER['HTTP_HOST'].$path;
    }


    public function getApiPromotion(GlobalOption $option)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.promotion','promotion');
        $qb->select('promotion.id as id','promotion.name as name','promotion.path as path');
        $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->andWhere("promotion.type LIKE :type")->setParameter('type', '%"Promotion"%');
        $qb->groupBy('promotion.id');
        $qb->orderBy('promotion.id','DESC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['promotion_id']    = (int) $row['id'];
                $data[$key]['name']           = $row['name'];
                if($row['path']){
                    $path = $this->resizeFilter("uploads/domain/{$option->getId()}/promotion/{$row['path']}");
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }
        return $data;
    }

    public function getApiTag(GlobalOption $option)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.tag','promotion');
        $qb->select('promotion.id as id','promotion.name as name','promotion.path as path');
        $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->andWhere("promotion.type LIKE :type")->setParameter('type', '%"Tag"%');
        $qb->groupBy('promotion.id');
        $qb->orderBy('promotion.id','DESC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['tag_id']    = (int) $row['id'];
                $data[$key]['name']           = $row['name'];
                if($row['path']){
                    $path = $this->resizeFilter("uploads/domain/{$option->getId()}/promotion/{$row['path']}");
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }
        return $data;
    }

    public function getApiDiscount(GlobalOption $option)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.discount','discount');
        $qb->select('discount.id as id','discount.name as name','discount.discountAmount as amount','discount.type as type','discount.path as path');
        $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->orderBy('discount.id','DESC');
        $qb->groupBy('discount.id');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['discount_id']    = (int) $row['id'];
                $data[$key]['name']           = $row['name'];
                if($row['path']){
                    $path = $this->resizeFilter("uploads/domain/{$option->getId()}/discount/{$row['path']}");
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }
        return $data;
    }

    public function removeDiscount($config,$discount){

            $qb = $this->_em->createQueryBuilder();
            $q = $qb->update('EcommerceBundle:Item', 'e')
            ->set('e.discount', '?1')
            ->set('e.discountPrice', '?2')
            ->where('e.discount = ?3')
            ->andWhere('e.ecommerceConfig = ?4')
            ->setParameter(1,NULL)
            ->setParameter(2,0)
            ->setParameter(3, $discount)
            ->setParameter(4, $config)
            ->getQuery();
        $q->execute();

    }

    public function removePromotion($config,$discount){

        $qb = $this->_em->createQueryBuilder();
        $q = $qb->update('EcommerceBundle:Item', 'e')
            ->set('e.promotion', '?1')
            ->where('e.promotion = ?2')
            ->andWhere('e.ecommerceConfig = ?3')
            ->setParameter(1,NULL)
            ->setParameter(2, $discount)
            ->setParameter(3, $config)
            ->getQuery();
        $qr = $q->execute();

    }



}
