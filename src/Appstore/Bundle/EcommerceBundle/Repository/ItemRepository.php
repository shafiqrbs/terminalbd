<?php

namespace Appstore\Bundle\EcommerceBundle\Repository;
use Appstore\Bundle\EcommerceBundle\Entity\Discount;
use Appstore\Bundle\EcommerceBundle\Entity\EcommerceConfig;
use Appstore\Bundle\EcommerceBundle\Entity\Item;
use Appstore\Bundle\EcommerceBundle\Entity\ItemBrand;
use Appstore\Bundle\EcommerceBundle\Entity\Promotion;
use Appstore\Bundle\MedicineBundle\Entity\MedicineStock;
use Doctrine\ORM\EntityRepository;
use Gregwar\Image\Image;
use Product\Bundle\ProductBundle\Entity\Category;
use Setting\Bundle\AppearanceBundle\Entity\FeatureWidget;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * PurchaseVendorItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */


class ItemRepository extends EntityRepository
{

    public function findFrontendProductWithSearch($config, $data , $limit = 0)
    {


        $webName            = isset($data['webName'])? $data['webName'] :'';
        $name               = isset($data['keyword'])? $data['keyword'] :'';
        $category           = isset($data['category'])? $data['category'] :'';
        $categories         = isset($data['categories'])? $data['categories'] :'';
        $brand              = isset($data['brand'])? $data['brand'] :'';
        $brands             = isset($data['brands'])? $data['brands'] :'';
        $promotion          = isset($data['promotion'])? $data['promotion'] :'';
        $promotions         = isset($data['promotions'])? $data['promotions'] :'';
        $discount           = isset($data['discount'])? $data['discount'] :'';
        $discounts          = isset($data['discounts'])? $data['discounts'] :'';
        $tag                = isset($data['tag'])? $data['tag'] :'';
        $tags               = isset($data['tags'])? $data['tags'] :'';

        if (!empty($data['sortBy'])) {

            $sortBy = explode('=?=', $data['sortBy']);
            $sort = $sortBy[0];
            $order = $sortBy[1];
        }
        $qb = $this->createQueryBuilder('product');
        $qb->leftJoin('product.brand','brand');
        $qb->leftJoin('product.category','category');
        $qb->leftJoin('product.promotion','promotion');
        $qb->leftJoin('product.discount','discount');
        $qb->where("product.status = 1");
        $qb->andWhere("product.salesPrice > 0");
        $qb->andWhere("product.ecommerceConfig = :config");
        $qb->setParameter('config', $config);

        if (!empty($name)) {
            $qb->andWhere('product.webName LIKE :searchTerm OR category.slug LIKE :searchTerm OR brand.name LIKE :searchTerm  OR promotion.name LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.$name.'%');
        }
        if (!empty($webName)) {
            $qb->andWhere('product.webName LIKE :searchTerm OR category.slug LIKE :searchTerm OR brand.name LIKE :searchTerm  OR promotion.name LIKE :searchTerm OR discount.name LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($webName).'%');
        }

        if (!empty($category)) {
            $qb->andWhere('category.slug LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($category).'%');
        }

        if (!empty($categories)) {
            $qb->andWhere("product.category IN(:category)");
            $qb->setParameter('category',array_values($categories));
        }
        if (!empty($brand)) {
            $qb->andWhere('brand.slug LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($brand).'%');
        }

        if (!empty($brands)) {
            $qb->andWhere("product.brand IN(:brand)");
            $qb->setParameter('brand',array_values($brands));
        }

        if (!empty($promotion))  {
            $qb->andWhere('promotion.slug LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($promotion).'%');
        }

        if (!empty($promotions)) {
            $qb->andWhere("product.promotion IN(:promotion)");
            $qb->setParameter('promotion',array_values($promotions));
        }


        if (!empty($tag)) {
            $qb->leftJoin('product.tag','tag');
            $qb->andWhere('tag.slug LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($tag).'%');
        }

        if (!empty($tags)) {
            $qb->leftJoin('product.tag','tag');
            $qb->andWhere('tag.id IN (:tags)');
            $qb->setParameter('tags', array_values($tags));
        }

        if (!empty($discount)) {
            $qb->andWhere("discount.slug LIKE :searchTerm");
            $qb->setParameter('searchTerm', '%'.strtolower($tag).'%');
        }

        if (!empty($discounts)) {
            $qb->andWhere('discount.id IN (:discounts)');
            $qb->setParameter('discounts', array_values($discounts));
        }

        if (!empty($data['priceStart'])) {
            $qb->andWhere(' product.salesPrice >= :priceStart');
            $qb->setParameter('priceStart',$data['priceStart']);
        }

        if (!empty($data['priceEnd'])) {
            $qb->andWhere(' product.salesPrice <= :priceEnd');
            $qb->setParameter('priceEnd',$data['priceEnd']);
        }

        if (empty($data['sortBy'])){
            $qb->orderBy('product.webName', 'ASC');
        }else{
            $qb->orderBy($sort ,$order);
        }
        if($limit > 0 ) {
            $qb->setMaxResults($limit);
        }
        $res = $qb->getQuery();
        return  $res;

    }

    public function handleFrontendSearchBetween($qb,$data){

        $name               = isset($data['webName'])? $data['webName'] :'';
        $category           = isset($data['category'])? $data['category'] :'';
        $categories         = isset($data['categories'])? $data['categories'] :'';
        $brand              = isset($data['brand'])? $data['brand'] :'';
        $brands             = isset($data['brands'])? $data['brands'] :'';
        $promotion          = isset($data['promotion'])? $data['promotion'] :'';
        $promotions         = isset($data['promotions'])? $data['promotions'] :'';
        $discount           = isset($data['discount'])? $data['discount'] :'';
        $discounts          = isset($data['discounts'])? $data['discounts'] :'';
        $tag                = isset($data['tag'])? $data['tag'] :'';
        $tags               = isset($data['tags'])? $data['tags'] :'';

        if (!empty($name)) {

            $explode = explode(' ',strtolower($name));
            $implode = implode('-',$explode);
            $qb->andWhere('product.slug LIKE :searchTerm OR product.slug LIKE :searchTerm OR c.slug LIKE :searchTerm OR b.slug LIKE :searchTerm  OR p.slug LIKE :searchTerm OR t.slug LIKE :searchTerm OR g.name LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($implode).'%');
        }

        if (!empty($category)) {
            $qb->andWhere('c.slug LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($category).'%');
        }

        if (!empty($categories)) {
            $qb->andWhere("c.id IN(:categories)");
            $qb->setParameter('categories',array_values($categories));
        }
        if (!empty($brand)) {
            $qb->andWhere('b.slug LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($brand).'%');
        }

        if (!empty($brands)) {
            $qb->andWhere("b.id IN(:brands)");
            $qb->setParameter('brands',array_values($brands));
        }

        if (!empty($promotion))  {
            $qb->andWhere('p.slug LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($promotion).'%');
        }

        if (!empty($promotions)) {
            $qb->andWhere("p.id IN(:promotions)");
            $qb->setParameter('promotions',array_values($promotions));
        }

        if (!empty($tag)) {
            $qb->andWhere('t.slug LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($tag).'%');
        }

        if (!empty($tags)) {
            $qb->andWhere('t.id IN (:tags)');
            $qb->setParameter('tags', array_values($tags));
        }

        if (!empty($discount)) {
            $qb->andWhere("d.slug LIKE :searchTerm");
            $qb->setParameter('searchTerm', '%'.strtolower($tag).'%');
        }

        if (!empty($discounts)) {
            $qb->andWhere('d.id IN (:discounts)');
            $qb->setParameter('discounts', array_values($discounts));
        }

        if (!empty($data['priceStart'])) {
            $qb->andWhere(' product.salesPrice >= :priceStart');
            $qb->setParameter('priceStart',$data['priceStart']);
        }

        if (!empty($data['priceEnd'])) {
            $qb->andWhere(' product.salesPrice <= :priceEnd');
            $qb->setParameter('priceEnd',$data['priceEnd']);
        }

    }

    public function filterFrontendProductWithSearch(EcommerceConfig $config, $data , $limit = 0)
    {

        if (!empty($data['sortBy'])) {

            $sortBy = explode('=?=', $data['sortBy']);
            $sort = $sortBy[0];
            $order = $sortBy[1];
        }

        $qb = $this->createQueryBuilder('product');
        $qb->leftJoin('product.category','c');
        $qb->leftJoin('product.brand','b');
        $qb->leftJoin('product.discount','d');
        $qb->leftJoin('product.promotion','p');
        $qb->leftJoin('product.tag','t');
        $qb->leftJoin('product.medicine','m');
        $qb->leftJoin('m.medicineGeneric','g');
        $qb->where("product.ecommerceConfig = :config");
        $qb->andWhere("product.status = 1");
        $qb->andWhere("product.salesPrice > 0");
        $qb->andWhere("product.ecommerceConfig = :config");
        $qb->setParameter('config', $config->getId());
        $this->handleFrontendSearchBetween($qb,$data);
        if (empty($data['sortBy'])){
            $qb->orderBy('product.webName', 'ASC');
        }else{
            $qb->orderBy($sort ,$order);
        }
        $qb->groupBy('product.id');
        $res = $qb->getQuery();
        return  $res;
    }


    public function getFeatureProduct(EcommerceConfig $config, $pram , $feature = 'category', $limit = 0)
    {

        $qb = $this->createQueryBuilder('product');
        $qb->leftJoin('product.category','c');
        $qb->leftJoin('product.brand','b');
        $qb->leftJoin('product.discount','d');
        $qb->leftJoin('product.promotion','p');
        $qb->leftJoin('product.tag','t');
        $qb->leftJoin('product.medicine','m');
        $qb->leftJoin('m.medicineGeneric','g');
        $qb->where("product.ecommerceConfig = :config");
        $qb->andWhere("product.status = 1");
        $qb->andWhere("product.salesPrice > 0");
        $qb->andWhere("product.ecommerceConfig = :config")->setParameter('config', $config->getId());
        if (!empty($pram) and $feature == "category") {
            $qb->andWhere("product.isFeatureCategory = 1");
            $qb->andWhere('c.id =:pram')->setParameter('pram', $pram);
        }elseif(!empty($pram) and $feature == "brand") {
            $qb->andWhere("product.isFeatureBrand = 1");
            $qb->andWhere('b.id =:pram')->setParameter('pram', $pram);
        }elseif(!empty($pram) and $feature == "discount") {
            $qb->andWhere('d.id =:pram')->setParameter('pram', $pram);
        }elseif(!empty($pram) and $feature == "promotion") {
            $qb->andWhere('p.id =:pram')->setParameter('pram', $pram);
        }elseif(!empty($pram) and $feature == "tag") {
            $qb->andWhere('t.id =:pram')->setParameter('pram', $pram);
        }

        if (empty($data['sortBy'])){
            $qb->orderBy('product.webName', 'ASC');
        }else{
            $qb->orderBy('product.webName' ,'ASC');
        }
        if($limit > 0 ) {
            $qb->setMaxResults($limit);
        }
        $qb->groupBy('product.id');
        $res = $qb->getQuery()->getResult();
        return  $res;
    }


    public function insertCopyPurchaseItem(Item $entity, Item $copyEntity)
    {
        $em = $this->_em;
        $entity->setName($copyEntity->getName());
        $entity->setWebName($copyEntity->getWebName());
        $entity->setSubProduct(true);
        $entity->setQuantity($copyEntity->getQuantity());
        $entity->setMasterQuantity($copyEntity->getMasterQuantity());
        $entity->setPurchasePrice($copyEntity->getPurchasePrice());
        $entity->setSalesPrice($copyEntity->getSalesPrice());
        $entity->setOverHeadCost($copyEntity->getOverHeadCost());
        $entity->setSize($copyEntity->getSize());
        $entity->setItemColors($copyEntity->getItemColors());
        $entity->setBrand($copyEntity->getBrand());
        $entity->setDiscount($copyEntity->getDiscount());
        $entity->setDiscountPrice($copyEntity->getDiscountPrice());
        $entity->setContent($copyEntity->getContent());
        $entity->setTag($copyEntity->getTag());
        $entity->setPromotion($copyEntity->getPromotion());
        $entity->setCountry($copyEntity->getCountry());
        $entity->setSource($copyEntity->getSource());
        $em->persist($entity);
        $em->flush();
    }

    public function insertCopyMedicineItem(MedicineStock $copyEntity)
    {
        $em = $this->_em;
        if($copyEntity)
        $config = $copyEntity->getMedicineConfig()->getGlobalOption()->getEcommerceConfig();
        $exist = $this->findOneBy(array('ecommerceConfig' => $config,'itemGroup'=> $copyEntity->getMode(), 'webName' => $copyEntity->getName()));
        if(empty($exist)){
            $entity = new Item();
            $entity->setEcommerceConfig($config);
            $entity->setName($copyEntity->getName());
            $entity->setWebName($copyEntity->getName());
            $entity->setQuantity($copyEntity->getRemainingQuantity());
            $entity->setPurchasePrice($copyEntity->getPurchasePrice());
            $entity->setSalesPrice($copyEntity->getSalesPrice());
            $entity->setItemGroup($copyEntity->getMode());
            if($copyEntity->getBrandName()){
                $brand  = $em->getRepository('EcommerceBundle:ItemBrand')->insertBrand($copyEntity);
                $entity->setBrand($brand);
            }
            $entity->setSource('medicine');
            if($copyEntity->getMedicineBrand()) {
                $entity->setMedicine($copyEntity->getMedicineBrand());
            }
            $em->persist($entity);
            $em->flush();
            if($copyEntity->getMedicineBrand()) {
                $this->_em->getRepository('EcommerceBundle:ItemKeyValue')->insertMedicineAttribute($entity, $copyEntity);
            }
        }

    }

    public function insertCopyInventoryItem(\Appstore\Bundle\InventoryBundle\Entity\Item  $copyEntity)
    {
        $em = $this->_em;
        if($copyEntity)
            $config = $copyEntity->getInventoryConfig()->getGlobalOption()->getEcommerceConfig();
        $exist = $this->findOneBy(array('ecommerceConfig' => $config,'itemGroup'=> $copyEntity->getMode(), 'webName' => $copyEntity->getName()));
        if(empty($exist)){
            $entity = new Item();
            $entity->setEcommerceConfig($config);
            $entity->setName($copyEntity->getName());
            $entity->setWebName($copyEntity->getName());
            $entity->setQuantity($copyEntity->getRemainingQuantity());
            $entity->setPurchasePrice($copyEntity->setPurchasePrice());
            $entity->setSalesPrice($copyEntity->getSalesPrice());
            $entity->setItemGroup($copyEntity->getMode());
            if($copyEntity->getBrandName()){
                $brand  = $em->getRepository('EcommerceBundle:ItemBrand')->insertBrand($copyEntity);
                $entity->setBrand($brand);
            }
            $em->persist($entity);
            $em->flush();

        }

    }

    public function getSliderFeatureProduct($config, $limit = 3)
    {

        $qb = $this->createQueryBuilder('product');
        $qb->where("product.isWeb = 1");
        $qb->andWhere("product.salesPrice > 0");
        $qb->expr()->isNotNull('product.promotion');
        $qb->andWhere("product.ecommerceConfig = :config");
        $qb->setParameter('config', $config->getId());
        if($limit > 0 ) {
            $qb->setMaxResults($limit);
        }
        $qb->orderBy('product.updated', 'DESC');
        $qb = $qb->getQuery();
        $result = $qb->getResult();
        return  $result;

    }

    public function frontendProductNext($entity){

        $db = $this->getNextPrevious($entity);
        return $db->andWhere($db->expr()->gt('e.id',$entity->getId()))->getQuery()->getOneOrNullResult();
    }

    public function frontendProductPrev($entity){
        $db = $this->getNextPrevious($entity);
        return $db->andWhere($db->expr()->lt('e.id',$entity->getId()))->getQuery()->getOneOrNullResult();
    }

    private function getNextPrevious(Item $entity)
    {

        /**
         * @var Item $entity
         */
        $em = $this->_em;
        $db = $em->createQueryBuilder();
        $db->select('e');
        $db->from('EcommerceBundle:Item','e');
        $db->where($db->expr()->andX(
            $db->expr()->eq('e.status',1),
            $db->expr()->eq('e.ecommerceConfig',$entity->getecommerceConfig()->getId())
        ));
        $db->setMaxResults(1);
        return $db;

    }

    public function handleSearchBetween($qb,$data){

        $webName        = isset($data['name'])? $data['name'] :'';
        $name           = isset($data['keyword'])? $data['keyword'] :'';
        $cat            = isset($data['category'])? $data['category'] :'';
        $brand          = isset($data['brand'])? $data['brand'] :'';
        $promotion      = isset($data['promotion'])? $data['promotion'] :'';
        $discount       = isset($data['discount'])? $data['discount'] :'';
        $tag            = isset($data['tag'])? $data['tag'] :'';

        if (!empty($cat)) {
            $qb->andWhere("category.name LIKE :category");
            $qb->setParameter('category', '%'.$cat.'%');
        }
        if (!empty($brand)) {
            $qb->andWhere("brand.name LIKE :brand");
            $qb->setParameter('brand', '%'.$brand.'%');
        }
        if (!empty($promotion)) {
            $qb->andWhere("item.promotion = :promotion");
            $qb->setParameter('promotion', $promotion);
        }
        if (!empty($discount)) {
            $qb->andWhere("item.discount = :discount");
            $qb->setParameter('discount', $discount);
        }
        if (!empty($name)) {
           $qb->andWhere('item.webName LIKE :searchTerm OR category.slug LIKE :searchTerm OR brand.name LIKE :searchTerm  OR promotion.name LIKE :searchTerm');
                $qb->setParameter('searchTerm', '%'.$name.'%');
        }
        if (!empty($webName)) {
           $qb->andWhere('item.webName LIKE :searchTerm OR category.slug LIKE :searchTerm OR brand.name LIKE :searchTerm  OR promotion.name LIKE :searchTerm');
                $qb->setParameter('searchTerm', '%'.strtolower($webName).'%');
        }
    }

    public function handleSearchBetweenFeature($qb,$data){

        $name           = isset($data['keyword'])? $data['keyword'] :'';
        $cat            = isset($data['category'])? $data['category'] :'';
        $brand          = isset($data['brand'])? $data['brand'] :'';
        $promotion      = isset($data['promotion'])? $data['promotion'] :'';
        $discount       = isset($data['discount'])? $data['discount'] :'';
        $tag            = isset($data['tag'])? $data['tag'] :'';


        if (!empty($cat)) {
            $qb->andWhere("item.category IN (:category)");
            $qb->setParameter('category', $cat);
        }
        if (!empty($brand)) {
            $qb->andWhere("item.brand IN (:brand)");
            $qb->setParameter('brand', $brand);
        }
        if (!empty($promotion)) {
            $qb->andWhere("item.promotion IN (:promotion)");
            $qb->setParameter('promotion', $promotion);
        }
        if (!empty($discount)) {
            $qb->andWhere("item.discount IN (:discount)");
            $qb->setParameter('discount', $discount);
        }
        if (!empty($tag)) {
            $qb->andWhere("item.tag IN (:tag)");
            $qb->setParameter('tag', $tag);
        }

    }

    public function findItemWithSearch($config,$data,$limit = 0)
    {

        $sort = isset($data['sort'])? $data['sort'] :'item.path';
        $direction = isset($data['direction'])? $data['direction'] :'ASC';

        $qb = $this->createQueryBuilder('item');
        $qb->leftJoin('item.category', 'category');
        $qb->leftJoin('item.brand', 'brand');
        $qb->leftJoin('item.promotion', 'promotion');
        $qb->leftJoin('item.discount', 'discount');
        $qb->where("item.ecommerceConfig = :config");
        $qb->setParameter('config', $config);
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy("{$sort}",$direction);
        $result = $qb->getQuery();
        return  $result;

    }

    public function salesItemWithSearch($config)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join("e.masterItem",'masterItem' );
        $qb->where("e.source = 'service'");
        $qb->andWhere("e.ecommerceConfig = :config");
        $qb->setParameter('config', $config);
        $qb->orderBy('e.name','ASC');
        $qb->getQuery()->getResult();
        return  $qb;

    }

	public function updateMasterProductQuantity(Item $entity)
	{
		$qb = $this->createQueryBuilder('e');
		$qb->join('e.itemSubs','gi');
		$qb->select('sum(gi.quantity) AS quantity');
		$qb->where("e.id = :id");
		$qb->setParameter('id', $entity->getId());
		$sum = $qb->getQuery()->getSingleScalarResult();
		$entity->setMasterQuantity($sum);
		$this->_em->persist($entity);
		$this->_em->flush($entity);

	}

    public function findGroupBrands(EcommerceConfig $config , $array = array())
    {

        $brands =  isset($array) ? $array : array();

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.brand','brand');
        $qb->select('brand.id as id');
        $qb->addSelect('brand.slug as slug');
        $qb->addSelect('brand.name as name');
        $qb->addSelect('count(e.id) as itemQnt');
        $qb->where('e.ecommerceConfig='.$config->getId());
        $qb->andWhere('brand.status =1');
        $qb->groupBy('brand.id');
        $qb->orderBy('brand.name', 'ASC');
        $res = $qb->getQuery()->getArrayResult();
        $value ="";
        $value .="<ul class='ul-check-list'>";
        foreach ($res as $key => $val) {
            $checked = in_array($val['id'], $brands) ? 'checked':'';
            $value.= "<li><div class='checkboxOverride'>
                <input type='checkbox' name='brands[]' {$checked} id='brand-{$val["id"]}' value='{$val["id"]}'>
                <label for='brand-{$val["id"]}'></label>
                </div><a class='' href='/product/brand/{$val["slug"]}'>{$val["name"]}({$val['itemQnt']})</a></li>";
        }
        $value .="</ul>";
        return $value;

    }


    public function findGroupDiscount(EcommerceConfig $config,  $array = array())
    {
        $discounts = isset($array) ? $array :array();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.discount','discount');
        $qb->select('discount.id as id');
        $qb->addSelect('discount.name as name');
        $qb->addSelect('discount.slug as slug');
        $qb->where('e.ecommerceConfig ='.$config->getId());
        $qb->andWhere('discount.status=1');
        $qb->groupBy('discount.id');
        $qb->orderBy('discount.name', 'ASC');
        $res = $qb->getQuery()->getArrayResult();

        $value ="";
        $value .="<ul class='ul-check-list'>";
        foreach ($res as $key => $val) {
            $checked = in_array($val['id'], $discounts )? 'checked':'';
            $value.= "<li><div class='checkboxOverride'>
                <input type='checkbox' name='discounts[]' {$checked} id='discount-{$val["id"]}' value='{$val["id"]}'>
                <label for='discount-{$val["id"]}'></label>
                </div><a class='' href='/product/discount/{$val["slug"]}'>{$val["name"]}</a></li>";
        }
        $value .="</ul>";
        return $value;

    }

    public function findPromotionTree(EcommerceConfig $config , $array = array())
    {
        $promotions = isset($array) ? $array : array();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.promotion','promotion');
        $qb->select('promotion.id as id');
        $qb->addSelect('promotion.name as name');
        $qb->addSelect('promotion.slug as slug');
        $qb->where('e.ecommerceConfig='.$config->getId());
        $qb->andWhere($qb->expr()->like('promotion.type', ':type'));
        $qb->setParameter('type','%Promotion%');
        $qb->groupBy('promotion.id');
        $qb->orderBy('promotion.name', 'ASC');
        $res = $qb->getQuery()->getArrayResult();

        $value ='';
        $value .="<ul class='ul-check-list'>";
        foreach ($res as $key => $val) {
            $checked = in_array($val['id'], $promotions )? 'checked':'';
            $value.= "<li><div class='checkboxOverride'>
                <input type='checkbox' name='promotions[]' {$checked} id='promotion-{$val["id"]}' value='{$val["id"]}'>
                <label for='promotion-{$val["id"]}'></label>
                </div><a class='' href='/product/promotion/{$val["slug"]}'>{$val["name"]}</a></li>";
        }
        $value .="</ul>";
        return $value;
    }

    public function findTagTree(EcommerceConfig $config , $array = array())
    {
        $tags = isset($array) ? $array : array();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.tag','tag');
        $qb->select('tag.id as id');
        $qb->addSelect('tag.name as name');
        $qb->addSelect('tag.slug as slug');
        $qb->where('e.ecommerceConfig='.$config->getId());
        $qb->andWhere($qb->expr()->like('tag.type', ':type'));
        $qb->setParameter('type','%Tag%');
        $qb->groupBy('tag.id');
        $qb->orderBy('tag.name', 'ASC');
        $res = $qb->getQuery()->getArrayResult();

        $value ='';
        $value .="<ul class='ul-check-list'>";
        foreach ($res as $key => $val) {
            $checked = in_array($val['id'], $tags )? 'checked':'';
            $value.= "<li><div class='checkboxOverride'>
                <input type='checkbox' name='tags[]' {$checked} id='tag-{$val["id"]}' value='{$val["id"]}'>
                <label for='tag-{$val["id"]}'></label>
                </div><a class='' href='/product/tag/{$val["slug"]}'>{$val["name"]}</a></li>";
        }
        $value .="</ul>";
        return $value;
    }

    public function getCulculationDiscountPrice(Item $purchase , Discount $discount)
    {
        $discountPrice = "";
        if($discount->getType() == 'percentage' and $purchase->getSalesPrice() > $discount->getDiscountAmount() ){
            $price = ( ($purchase->getSalesPrice() * (int)$discount->getDiscountAmount())/100 );
            $discountPrice = $purchase->getSalesPrice() - $price;
        }elseif($purchase->getSalesPrice() > $discount->getDiscountAmount()){
            $discountPrice = ( $purchase->getSalesPrice() - (int)$discount->getDiscountAmount());
        }
        return $discountPrice;
    }


    public function getApiProduct(GlobalOption $option,$data = array())
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('item');
        $qb->leftJoin('item.productUnit','productUnit');
        $qb->leftJoin('item.category','category');
        $qb->leftJoin('item.brand','brand');
        $qb->leftJoin('item.discount','discount');
        $qb->leftJoin('item.promotion','promotion');
        $qb->leftJoin('item.tag','tag');
        $qb->select('item.id as id','item.webName as name','item.salesPrice as price','item.discountPrice as discountPrice','item.path as path','item.masterQuantity as quantity','item.quantityApplicable as quantityApplicable');
        $qb->addSelect('category.name as categoryName','category.id as categoryId');
        $qb->addSelect('brand.name as brandName','brand.id as brandId');
        $qb->addSelect('productUnit.name as unitName');
        $qb->addSelect('discount.name as discountName','discount.id as discountId');
        $qb->addSelect('promotion.name as promotionName','promotion.id as promotionId');
        $qb->addSelect('tag.name as tagName','tag.id as tagId');
        $qb->where("item.ecommerceConfig = :config")->setParameter('config', $config);
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('item.webName','DESC');
        $result = $qb->getQuery();

        return $result;
    }


    public function getApiProductDetails(GlobalOption $option,$id)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('item');
        $qb->leftJoin('item.productUnit','productUnit');
        $qb->leftJoin('item.category','category');
        $qb->leftJoin('item.brand','brand');
        $qb->leftJoin('item.discount','discount');
        $qb->select('item.id as itemId','item.webName as name','item.salesPrice as price','item.discountPrice as discountPrice','item.path as path','item.masterQuantity as quantity','item.quantityApplicable as quantityApplicable');
        $qb->addSelect('category.name as categoryName');
        $qb->addSelect('brand.name as brandName');
        $qb->addSelect('productUnit.name as unitName');
        $qb->addSelect('discount.name as discountName');
        $qb->where("item.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->andWhere("item.id = :pid")->setParameter('pid', $id);
        $row = $qb->getQuery()->getOneOrNullResult();
        $data = array();
        $data['product_id']               = (int) $row['itemId'];
        $data['name']                     = $row['name'];
        $data['quantity']                 = $row['quantity'];
        $data['price']                    = $row['price'];
        $data['discountPrice']            = $row['discountPrice'];
        $data['category']                 = $row['categoryName'];
        $data['brand']                    = $row['brandName'];
        $data['discountName']             = $row['discountName'];
        $data['unitName']                 = $row['unitName'];
        $data['quantityApplicable']       = $row['quantityApplicable'];
        if($row['path']){
            $path = $this->resizeFilter("uploads/domain/{$option->getId()}/ecommerce/product/{$row['path']}");
            $data['imagePath']            =  $path;
        }else{
            $data['imagePath']            = "";
        }
        return $data;
    }

    public function getSliderFeatureCategory(GlobalOption $globalOption , $limit = 10){

        $qb = $this->createQueryBuilder('e');
        $qb->where("e.globalOption = :option");
        $qb->setParameter('option', $globalOption->getId());
        $qb->orderBy('e.id','DESC');
        $qb->setMaxResults($limit);
        $sql = $qb->getQuery();
        $result = $sql->getResult();
        return  $result;

    }

    public function getApiAllCategory(GlobalOption $option)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.category','category');
        $qb->select('category.id as id','category.name as name','category.path as path');
        $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->groupBy('category.id');
        $qb->orderBy('category.id','DESC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['category_id']    = (int) $row['id'];
                $data[$key]['name']           = $row['name'];
                if($row['path']){
                    $path = $this->resizeFilter("uploads/files/category/{$row['path']}");
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }
        return $data;
    }

    public function getApiAllBrand(GlobalOption $option)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.brand','brand');
        $qb->select('brand.id as id','brand.name as name','brand.path as path');
        $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->groupBy('brand.id');
        $qb->orderBy('brand.id','DESC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['brand_id']    = (int) $row['id'];
                $data[$key]['name']           = $row['name'];
                if($row['path']){
                    $path = $this->resizeFilter("uploads/domain/{$option->getId()}/brand/{$row['path']}");
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }
        return $data;
    }


    public function resizeFilter($pathToImage, $width = 256, $height = 256)
    {
        $path = '/' . Image::open(__DIR__.'/../../../../../web/' . $pathToImage)->cropResize($width, $height, 'transparent', 'top', 'left')->guess();
        return $_SERVER['HTTP_HOST'].$path;
    }


    public function getApiPromotion(GlobalOption $option)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.promotion','promotion');
        $qb->select('promotion.id as id','promotion.name as name','promotion.path as path');
        $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->andWhere("promotion.type LIKE :type")->setParameter('type', '%"Promotion"%');
        $qb->groupBy('promotion.id');
        $qb->orderBy('promotion.id','DESC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['promotion_id']    = (int) $row['id'];
                $data[$key]['name']           = $row['name'];
                if($row['path']){
                    $path = $this->resizeFilter("uploads/domain/{$option->getId()}/promotion/{$row['path']}");
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }
        return $data;
    }

    public function getApiTag(GlobalOption $option)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.tag','promotion');
        $qb->select('promotion.id as id','promotion.name as name','promotion.path as path');
        $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->andWhere("promotion.type LIKE :type")->setParameter('type', '%"Tag"%');
        $qb->groupBy('promotion.id');
        $qb->orderBy('promotion.id','DESC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['tag_id']    = (int) $row['id'];
                $data[$key]['name']           = $row['name'];
                if($row['path']){
                    $path = $this->resizeFilter("uploads/domain/{$option->getId()}/promotion/{$row['path']}");
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }
        return $data;
    }

    public function getApiDiscount(GlobalOption $option)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.discount','discount');
        $qb->select('discount.id as id','discount.name as name','discount.discountAmount as amount','discount.type as type','discount.path as path');
        $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->orderBy('discount.id','DESC');
        $qb->groupBy('discount.id');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['discount_id']    = (int) $row['id'];
                $data[$key]['name']           = $row['name'];
                if($row['path']){
                    $path = $this->resizeFilter("uploads/domain/{$option->getId()}/discount/{$row['path']}");
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }
        return $data;
    }


    public function removeDiscount($config,$discount){

            $qb = $this->_em->createQueryBuilder();
            $q = $qb->update('EcommerceBundle:Item', 'e')
            ->set('e.discount', '?1')
            ->set('e.discountPrice', '?2')
            ->where('e.discount = ?3')
            ->andWhere('e.ecommerceConfig = ?4')
            ->setParameter(1,NULL)
            ->setParameter(2,0)
            ->setParameter(3, $discount)
            ->setParameter(4, $config)
            ->getQuery();
        $q->execute();

    }

    public function removePromotion($config,$discount){

        $qb = $this->_em->createQueryBuilder();
        $q = $qb->update('EcommerceBundle:Item', 'e')
            ->set('e.promotion', '?1')
            ->where('e.promotion = ?2')
            ->andWhere('e.ecommerceConfig = ?3')
            ->setParameter(1,NULL)
            ->setParameter(2, $discount)
            ->setParameter(3, $config)
            ->getQuery();
        $qr = $q->execute();
        return $qr;

    }

    public function getFeatureWidgetProduct(FeatureWidget $feature,$module = "category")
    {
        $data = array();


        if($module == "category" and $feature->getCategory()){

            /* @var $parent \Product\Bundle\ProductBundle\Entity\Category */
            $items = $feature->getCategory();
            $limit = $feature->getCategoryLimit() ? $feature->getCategoryLimit() : 18 ;

            $brd['category'] = $items;
            $result = $this->getApiFeatureProduct($feature->getGlobalOption(),$brd,$limit);
            if($result){
                foreach($result as $key => $row) {
                    $data[$key]['product_id']               = (int) $row['id'];
                    $data[$key]['name']                     = $row['name'];
                    $data[$key]['quantity']                 = $row['quantity'];
                    $data[$key]['price']                    = $row['price'];
                    $data[$key]['discountPrice']            = $row['discountPrice'];
                    $data[$key]['categoryId']               = $row['categoryId'];
                    $data[$key]['category']                 = $row['categoryName'];
                    $data[$key]['brandId']                  = $row['brandId'];
                    $data[$key]['brand']                    = $row['brandName'];
                    $data[$key]['discountId']               = $row['discountId'];
                    $data[$key]['discount']                 = $row['discountName'];
                    $data[$key]['promotionId']              = $row['promotionId'];
                    $data[$key]['promotion']                = $row['promotionName'];
                    $data[$key]['tagId']                    = $row['tagId'];
                    $data[$key]['tag']                      = $row['tagName'];
                    $data[$key]['unitName']                 = $row['unitName'];
                    $data[$key]['quantityApplicable']       = $row['quantityApplicable'];
                    if($row['path']){
                        $path = $this->resizeFilter("uploads/domain/{$feature->getGlobalOption()->getId()}/ecommerce/product/{$row['path']}");
                        $data[$key]['imagePath']            =  $path;
                    }else{
                        $data[$key]['imagePath']            = "";
                    }
                }
            }
        }

        if( $module == "brand" and $feature->getBrand()){

            /* @var $parent ItemBrand */

            $items = $feature->getBrand();
            $limit = $feature->getBrandLimit() ? $feature->getBrandLimit() : 12 ;
            $brd['brand'] = $items;
            $result = $this->getApiFeatureProduct($feature->getGlobalOption(),$brd,$limit);
            if($result){
                foreach($result as $key => $row) {
                    $data[$key]['product_id']               = (int) $row['id'];
                    $data[$key]['name']                     = $row['name'];
                    $data[$key]['quantity']                 = $row['quantity'];
                    $data[$key]['price']                    = $row['price'];
                    $data[$key]['discountPrice']            = $row['discountPrice'];
                    $data[$key]['categoryId']               = $row['categoryId'];
                    $data[$key]['category']                 = $row['categoryName'];
                    $data[$key]['brandId']                  = $row['brandId'];
                    $data[$key]['brand']                    = $row['brandName'];
                    $data[$key]['discountId']               = $row['discountId'];
                    $data[$key]['discount']                 = $row['discountName'];
                    $data[$key]['promotionId']              = $row['promotionId'];
                    $data[$key]['promotion']                = $row['promotionName'];
                    $data[$key]['tagId']                    = $row['tagId'];
                    $data[$key]['tag']                      = $row['tagName'];
                    $data[$key]['unitName']                 = $row['unitName'];
                    $data[$key]['quantityApplicable']       = $row['quantityApplicable'];
                    if($row['path']){
                        $path = $this->resizeFilter("uploads/domain/{$feature->getGlobalOption()->getId()}/ecommerce/product/{$row['path']}");
                        $data[$key]['imagePath']            =  $path;
                    }else{
                        $data[$key]['imagePath']            = "";
                    }
                }
            }
        }

        if( $module == "promotion" and $feature->getPromotion()){

            /* @var $parent Promotion */

            $items = $feature->getPromotion();

            $limit = $feature->getPromotionLimit() ? $feature->getPromotionLimit() : 12 ;

            $brd['promotion'] = $items;
            $result = $this->getApiFeatureProduct($feature->getGlobalOption(),$brd,$limit);
            if($result){
                foreach($result as $key => $row) {
                    $data[$key]['product_id']               = (int) $row['id'];
                    $data[$key]['name']                     = $row['name'];
                    $data[$key]['quantity']                 = $row['quantity'];
                    $data[$key]['price']                    = $row['price'];
                    $data[$key]['discountPrice']            = $row['discountPrice'];
                    $data[$key]['categoryId']               = $row['categoryId'];
                    $data[$key]['category']                 = $row['categoryName'];
                    $data[$key]['brandId']                  = $row['brandId'];
                    $data[$key]['brand']                    = $row['brandName'];
                    $data[$key]['discountId']               = $row['discountId'];
                    $data[$key]['discount']                 = $row['discountName'];
                    $data[$key]['promotionId']              = $row['promotionId'];
                    $data[$key]['promotion']                = $row['promotionName'];
                    $data[$key]['tagId']                    = $row['tagId'];
                    $data[$key]['tag']                      = $row['tagName'];
                    $data[$key]['unitName']                 = $row['unitName'];
                    $data[$key]['quantityApplicable']       = $row['quantityApplicable'];
                    if($row['path']){
                        $path = $this->resizeFilter("uploads/domain/{$feature->getGlobalOption()->getId()}/ecommerce/product/{$row['path']}");
                        $data[$key]['imagePath']            =  $path;
                    }else{
                        $data[$key]['imagePath']            = "";
                    }
                }
            }
        }


        if( $module == "discount" and $feature->getDiscount()){

            /* @var $parent Discount */

            $items = $feature->getDiscount();
            $limit = $feature->getDiscountLimit() ? $feature->getDiscountLimit() : 12 ;

            $brd['discount'] = $items;
            $result = $this->getApiFeatureProduct($feature->getGlobalOption(),$brd,$limit);
            if($result){
                foreach($result as $key => $row) {
                    $data[$key]['product_id']               = (int) $row['id'];
                    $data[$key]['name']                     = $row['name'];
                    $data[$key]['quantity']                 = $row['quantity'];
                    $data[$key]['price']                    = $row['price'];
                    $data[$key]['discountPrice']            = $row['discountPrice'];
                    $data[$key]['categoryId']               = $row['categoryId'];
                    $data[$key]['category']                 = $row['categoryName'];
                    $data[$key]['brandId']                  = $row['brandId'];
                    $data[$key]['brand']                    = $row['brandName'];
                    $data[$key]['discountId']               = $row['discountId'];
                    $data[$key]['discount']                 = $row['discountName'];
                    $data[$key]['promotionId']              = $row['promotionId'];
                    $data[$key]['promotion']                = $row['promotionName'];
                    $data[$key]['tagId']                    = $row['tagId'];
                    $data[$key]['tag']                      = $row['tagName'];
                    $data[$key]['unitName']                 = $row['unitName'];
                    $data[$key]['quantityApplicable']       = $row['quantityApplicable'];
                    if($row['path']){
                        $path = $this->resizeFilter("uploads/domain/{$feature->getGlobalOption()->getId()}/ecommerce/product/{$row['path']}");
                        $data[$key]['imagePath']            =  $path;
                    }else{
                        $data[$key]['imagePath']            = "";
                    }
                }
            }
        }

        return $data;
    }

    public function getFeatureWidgetProductAll(FeatureWidget $feature,$module = "category")
    {
        $data = array();


        if($module == "category" and $feature->getCategory()){

            /* @var $parent \Product\Bundle\ProductBundle\Entity\Category */
            $items = $feature->getCategory();
            $limit = $feature->getCategoryLimit() ? $feature->getCategoryLimit() : 18 ;

            foreach ($items as $parent) {
                $cat['category'] = $parent->getId();
                $data[$parent->getId()]['id'] = $parent->getId();
                $data[$parent->getId()]['category'] = $parent->getName();
                $result = $this->getApiFeatureProduct($feature->getGlobalOption(),$cat,$limit);
                if($result){
                    foreach($result as $key => $row) {
                        $data[$parent->getId()][$key]['product_id']               = (int) $row['id'];
                        $data[$parent->getId()][$key]['parent_id']                = (int) $parent->getId();
                        $data[$parent->getId()][$key]['name']                     = $row['name'];
                        $data[$parent->getId()][$key]['quantity']                 = $row['quantity'];
                        $data[$parent->getId()][$key]['price']                    = $row['price'];
                        $data[$parent->getId()][$key]['discountPrice']            = $row['discountPrice'];
                        $data[$parent->getId()][$key]['category']                 = $row['categoryName'];
                        $data[$parent->getId()][$key]['brand']                    = $row['brandName'];
                        $data[$parent->getId()][$key]['discountName']             = $row['discountName'];
                        $data[$parent->getId()][$key]['unitName']                 = $row['unitName'];
                        $data[$parent->getId()][$key]['quantityApplicable']       = $row['quantityApplicable'];
                        if($row['path']){
                            $path = $this->resizeFilter("uploads/domain/{$feature->getGlobalOption()->getId()}/ecommerce/product/{$row['path']}");
                            $data[$parent->getId()][$key]['imagePath']            =  $path;
                        }else{
                            $data[$parent->getId()][$key]['imagePath']            = "";
                        }
                    }
                }
            }
        }

        if( $module == "brand" and $feature->getBrand()){

            /* @var $parent ItemBrand */

            $items = $feature->getBrand();
            $limit = $feature->getBrandLimit() ? $feature->getBrandLimit() : 12 ;

            foreach ($items as $parentKey => $parent) {

                $brd['brand'] =$parent->getId();
                $data[$parent->getId()]['id'] = $parent->getId();
                $data[$parent->getId()]['brand'] = $parent->getName();
                $result = $this->getApiFeatureProduct($feature->getGlobalOption(),$brd,$limit);
                if($result){
                    foreach($result as $key => $row) {
                        $data[$parent->getId()][$key]['product_id']               = (int) $row['id'];
                        $data[$parent->getId()][$key]['parent_id']                = (int) $parent->getId();
                        $data[$parent->getId()][$key]['name']                     = $row['name'];
                        $data[$parent->getId()][$key]['quantity']                 = $row['quantity'];
                        $data[$parent->getId()][$key]['price']                    = $row['price'];
                        $data[$parent->getId()][$key]['discountPrice']            = $row['discountPrice'];
                        $data[$parent->getId()][$key]['category']                 = $row['categoryName'];
                        $data[$parent->getId()][$key]['brand']                    = $row['brandName'];
                        $data[$parent->getId()][$key]['discountName']             = $row['discountName'];
                        $data[$parent->getId()][$key]['unitName']                 = $row['unitName'];
                        $data[$parent->getId()][$key]['quantityApplicable']       = $row['quantityApplicable'];
                        if($row['path']){
                            $path = $this->resizeFilter("uploads/domain/{$feature->getGlobalOption()->getId()}/ecommerce/product/{$row['path']}");
                            $data[$parent->getId()][$key]['imagePath']            =  $path;
                        }else{
                            $data[$parent->getId()][$key]['imagePath']            = "";
                        }
                    }
                }
            }
        }

        if( $module == "promotion" and $feature->getPromotion()){

            /* @var $parent Promotion */

            $items = $feature->getPromotion();

            $limit = $feature->getPromotionLimit() ? $feature->getPromotionLimit() : 12 ;

            foreach ($items as $parent) {

                $prom['promotion'] =$parent->getId();
                $data[$parent->getId()]['id'] = $parent->getId();
                $data[$parent->getId()]['promotion'] = $parent->getName();
                $result = $this->getApiFeatureProduct($feature->getGlobalOption(),$prom,$limit);
                if($result){
                    foreach($result as $key => $row) {
                        $data[$parent->getId()][$key]['product_id']               = (int) $row['id'];
                        $data[$parent->getId()][$key]['parent_id']                = (int) $parent->getId();
                        $data[$parent->getId()][$key]['name']                     = $row['name'];
                        $data[$parent->getId()][$key]['quantity']                 = $row['quantity'];
                        $data[$parent->getId()][$key]['price']                    = $row['price'];
                        $data[$parent->getId()][$key]['discountPrice']            = $row['discountPrice'];
                        $data[$parent->getId()][$key]['category']                 = $row['categoryName'];
                        $data[$parent->getId()][$key]['brand']                    = $row['brandName'];
                        $data[$parent->getId()][$key]['discountName']             = $row['discountName'];
                        $data[$parent->getId()][$key]['unitName']                 = $row['unitName'];
                        $data[$parent->getId()][$key]['quantityApplicable']       = $row['quantityApplicable'];
                        if($row['path']){
                            $path = $this->resizeFilter("uploads/domain/{$feature->getGlobalOption()->getId()}/ecommerce/product/{$row['path']}");
                            $data[$parent->getId()][$key]['imagePath']            =  $path;
                        }else{
                            $data[$parent->getId()][$key]['imagePath']            = "";
                        }
                    }
                }
            }
        }

        if( $module == "tag" and $feature->getTag()){

            /* @var $parent Promotion */

            $items = $feature->getTag();
            $limit = $feature->getTagLimit() ? $feature->getTagLimit() : 12 ;

            foreach ($items as $parent) {

                $tag['tag'] =$parent->getId();
                $data['id'] = $parent->getId();
                $data['tag'] = $parent->getName();
                $result = $this->getApiFeatureProduct($feature->getGlobalOption(),$tag,$limit);
                if($result){
                    foreach($result as $key => $row) {
                        $data[$key]['product_id']               = (int) $row['id'];
                        $data[$key]['parent_id']                = (int) $parent->getId();
                        $data[$key]['name']                     = $row['name'];
                        $data[$key]['quantity']                 = $row['quantity'];
                        $data[$key]['price']                    = $row['price'];
                        $data[$key]['discountPrice']            = $row['discountPrice'];
                        $data[$key]['category']                 = $row['categoryName'];
                        $data[$key]['brand']                    = $row['brandName'];
                        $data[$key]['discountName']             = $row['discountName'];
                        $data[$key]['unitName']                 = $row['unitName'];
                        $data[$key]['quantityApplicable']       = $row['quantityApplicable'];
                        if($row['path']){
                            $path = $this->resizeFilter("uploads/domain/{$feature->getGlobalOption()->getId()}/ecommerce/product/{$row['path']}");
                            $data[$key]['imagePath']            =  $path;
                        }else{
                            $data[$key]['imagePath']            = "";
                        }
                    }
                }
            }
        }

        if( $module == "discount" and $feature->getDiscount()){

            /* @var $parent Discount */

            $items = $feature->getDiscount();
            $limit = $feature->getDiscountLimit() ? $feature->getDiscountLimit() : 12 ;

            foreach ($items as $parent) {

                $dis['discount'] =$parent->getId();
                $data['id'] = $parent->getId();
                $data['discount'] = $parent->getName();
                $result = $this->getApiFeatureProduct($feature->getGlobalOption(),$dis,$limit);
                if($result){
                    foreach($result as $key => $row) {
                        $data[$key]['product_id']               = (int) $row['id'];
                        $data[$key]['parent_id']                = (int) $parent->getId();
                        $data[$key]['name']                     = $row['name'];
                        $data[$key]['quantity']                 = $row['quantity'];
                        $data[$key]['price']                    = $row['price'];
                        $data[$key]['discountPrice']            = $row['discountPrice'];
                        $data[$parent->getId()][$key]['category']                 = $row['categoryName'];
                        $data[$parent->getId()][$key]['brand']                    = $row['brandName'];
                        $data[$parent->getId()][$key]['discountName']             = $row['discountName'];
                        $data[$parent->getId()][$key]['unitName']                 = $row['unitName'];
                        $data[$parent->getId()][$key]['quantityApplicable']       = $row['quantityApplicable'];
                        if($row['path']){
                            $path = $this->resizeFilter("uploads/domain/{$feature->getGlobalOption()->getId()}/ecommerce/product/{$row['path']}");
                            $data[$parent->getId()][$key]['imagePath']            =  $path;
                        }else{
                            $data[$parent->getId()][$key]['imagePath']            = "";
                        }
                    }
                }
            }
        }

        return $data;
    }

    public function getApiFeatureProduct(GlobalOption $option, $search = array(), $limit = 18)
    {
        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('item');
        $qb->leftJoin('item.productUnit','productUnit');
        $qb->leftJoin('item.category','category');
        $qb->leftJoin('item.brand','brand');
        $qb->leftJoin('item.discount','discount');
        $qb->leftJoin('item.promotion','promotion');
        $qb->leftJoin('item.tag','tag');
        $qb->select('item.id as id','item.webName as name','item.salesPrice as price','item.discountPrice as discountPrice','item.path as path','item.masterQuantity as quantity','item.quantityApplicable as quantityApplicable');
        $qb->addSelect('category.name as categoryName','category.id as categoryId');
        $qb->addSelect('brand.name as brandName','brand.id as brandId');
        $qb->addSelect('productUnit.name as unitName');
        $qb->addSelect('discount.name as discountName','discount.id as discountId');
        $qb->addSelect('promotion.name as promotionName','promotion.id as promotionId');
        $qb->addSelect('tag.name as tagName','tag.id as tagId');
        $qb->where("item.ecommerceConfig = :config")->setParameter('config', $config);
        $this->handleSearchBetweenFeature($qb,$search);
        $qb->orderBy('item.webName','DESC');
        $qb->setMaxResults($limit);
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function copyStockToEcommerce(GlobalOption $option)
    {
        $domainSlug = $option->getSlug();
        $strtotime = strtotime("now");
        $medicineConfig = $option->getMedicineConfig()->getId();
        $commerceConfig = $option->getEcommerceConfig()->getId();

        $em = $this->_em;
        $stock = $em->createQuery("DELETE EcommerceBundle:Item e WHERE e.ecommerceConfig = {$commerceConfig}");
        if($stock){
            $stock->execute();
        }

        $brand = $em->createQuery("DELETE EcommerceBundle:ItemBrand e WHERE e.ecommerceConfig = {$commerceConfig}");
        if($brand){
            $brand->execute();
        }

        $brandDql = "INSERT INTO ecommerce_item_brand (`ecommerceConfig_id`, `name`,`slug`, `status`)
                 SELECT $commerceConfig, `brandName`,REPLACE(REPLACE(LOWER(brandName), '/', '-'),' ','-'), 1
                 FROM medicine_stock
                 WHERE medicineConfig_id =:config 
                 GROUP BY brandName";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($brandDql);
        $qb1->bindValue('config', $medicineConfig);
        $qb1->execute();

        $product = "INSERT INTO ecommerce_item
                (`ecommerceConfig_id`, `webName`, `slug`,`quantity`, `purchasePrice`, `salesPrice`,`medicine_id`,`productUnit_id`,`source`,`itemGroup`,status,`brand_id`)
                SELECT $commerceConfig, e.name ,CONCAT(REPLACE(REPLACE(LOWER(e.name), '/', '-'),' ','-'),'-','{$domainSlug}-',LPAD(FLOOR(RAND() * 999999.99), 6, '0')) ,`remainingQuantity`, `purchasePrice`,`salesPrice`, e.medicineBrand_id, `unit_id`,'medicine',CONCAT(UCASE(MID(e.mode,1,1)),MID(e.mode,2)) AS mode ,1,(case when (item_brand.id > 0) 
                 THEN
                      item_brand.id
                 END)
                 as state
                FROM medicine_stock AS e
                LEFT JOIN ecommerce_item_brand AS item_brand ON e.brandName = item_brand.name AND item_brand.ecommerceConfig_id = $commerceConfig
                WHERE e.medicineConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($product);
        $qb1->bindValue('config', $medicineConfig);
        $qb1->execute();


        $meta1 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'Mode',itemGroup,1 FROM ecommerce_item AS e
                  WHERE ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta1);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();


        $meta2 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'Generic',generic.name,2 FROM ecommerce_item AS e
                  JOIN medicine_brand AS brand ON e.medicine_id = brand.id
                  JOIN medicine_generic AS generic ON brand.medicineGeneric_id = generic.id
                  WHERE itemGroup='medicine' AND ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta2);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();

        $meta3 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'Medicine Form',brand.medicineForm,3 FROM ecommerce_item AS e
                  JOIN medicine_brand AS brand ON e.medicine_id = brand.id
                  WHERE  itemGroup='medicine' AND ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta3);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();

        $meta4 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'Strength',brand.strength,4 FROM ecommerce_item AS e
                  JOIN medicine_brand AS brand ON e.medicine_id = brand.id
                  WHERE  itemGroup='medicine' AND ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta4);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();

        $meta5 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'Pack Size',brand.packSize,5 FROM ecommerce_item AS e
                  JOIN medicine_brand AS brand ON e.medicine_id = brand.id
                  WHERE  itemGroup='medicine' AND ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta5);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();

        $meta6 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'DAR',brand.dar,6 FROM ecommerce_item AS e
                  JOIN medicine_brand AS brand ON e.medicine_id = brand.id
                  WHERE  itemGroup='medicine' AND ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta6);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();

        $meta7 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'Use For',brand.useFor,7 FROM ecommerce_item AS e
                  JOIN medicine_brand AS brand ON e.medicine_id = brand.id
                  WHERE  itemGroup='medicine' AND ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta7);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();

        $stockUpdate = "UPDATE medicine_stock SET isWeb = 1 WHERE  medicineConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($stockUpdate);
        $qb1->bindValue('config', $medicineConfig);
        $qb1->execute();

    }

    public function updateBrandItem(ItemBrand $brand,$status){

        $stockUpdate = "UPDATE ecommerce_item SET status = {$status} WHERE  brand_id =:brand";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($stockUpdate);
        $qb1->bindValue('brand', $brand->getId());
        $qb1->execute();

    }

    public function updateCategoryItem(Category $category,$status){

        $stockUpdate = "UPDATE ecommerce_item SET status = {$status} WHERE  category_id =:category";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($stockUpdate);
        $qb1->bindValue('category', $category->getId());
        $qb1->execute();

    }

    public function itemPriceUpdate(GlobalOption $option)
    {
        $domain = $this->_em->getRepository('SettingToolBundle:GlobalOption')->find(154);
        $ecommerce = $option->getMedicineConfig()->getId();
        $medicine = $option->getMedicineConfig()->getId();
        $medicineConf = $domain->getMedicineConfig()->getId();

        $stockUpdate = "Update medicine_stock as i
        JOIN  medicine_stock as s ON i.medicineBrand_id = s.medicineBrand_id AND  s.medicineConfig_id = {$medicineConf} AND s.salesPrice > 0
        SET i.salesPrice = s.salesPrice 
        WHERE i.medicineConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($stockUpdate);
        $qb1->bindValue('config', $medicine);
        $qb1->execute();

        $itemUpdate = "Update ecommerce_item as i
        JOIN  medicine_stock as s ON i.medicine_id = s.medicineBrand_id AND  s.medicineConfig_id = $medicine AND s.salesPrice > 0
        SET i.salesPrice = s.salesPrice
        WHERE i.ecommerceConfig_id =:ecommerceConfig";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($itemUpdate);
        $qb1->bindValue('ecommerceConfig', $ecommerce);
        $qb1->execute();

    }

    public function searchWebStock($q, EcommerceConfig $config)
    {

        $query = $this->createQueryBuilder('e');
        $query->select('e.id as id');
        $query->addSelect('e.name as text');
        $query->where($query->expr()->like("e.name", "'%$q%'"  ));
        $query->andWhere("e.ecommerceConfig = :config");
        $query->setParameter('config', $config->getId());
        $query->groupBy('e.name');
        $query->orderBy('e.name', 'ASC');
        $query->setMaxResults( '30' );
        return $query->getQuery()->getResult();

    }



}
