<?php

namespace Appstore\Bundle\EcommerceBundle\Repository;
use Appstore\Bundle\DomainUserBundle\Entity\Customer;
use Appstore\Bundle\EcommerceBundle\Entity\Coupon;
use Appstore\Bundle\EcommerceBundle\Entity\Order;
use Appstore\Bundle\EcommerceBundle\Entity\OrderItem;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * OnlineOrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends EntityRepository
{

    public function insertOrder(GlobalOption $globalOption)
    {
        $em = $this->_em;
        $order = new Order();
        $user = $em->getRepository('UserBundle:User')->find(30);
        $order->setCreatedBy($user);
        $order->setEcommerceConfig($globalOption->getEcommerceConfig());
        $em->persist($order);
        $em->flush();
        return $order;
    }

    /**
     * @param $datetime
     * @param $entity
     * @return int|mixed
     */
    /*public function getLastCode($datetime, $entity)
    {
        $today_startdatetime = $datetime->format('Y-m-d 00:00:00');
        $today_enddatetime = $datetime->format('Y-m-d 23:59:59');


        $qb = $this->_em->getRepository('EcommerceBundle:Order')->createQueryBuilder('s');

        $qb
            ->select('MAX(s.code)')
            ->where('s.globalOption = :option')
            ->andWhere('s.updated >= :today_startdatetime')
            ->andWhere('s.updated <= :today_enddatetime')
            ->setParameter('option', $entity)
            ->setParameter('today_startdatetime', $today_startdatetime)
            ->setParameter('today_enddatetime', $today_enddatetime);
        $lastCode = $qb->getQuery()->getSingleScalarResult();

        if (empty($lastCode)) {
            return 0;
        }

        return $lastCode;
    }*/


    public function insertNewCustomerOrder(User $user,$shop, $cart, $couponCode ='')
    {

        $em = $this->_em;

        $order = new Order();
        $globalOption = $this->_em->getRepository('SettingToolBundle:GlobalOption')->findOneBy(array('uniqueCode' => $shop));
        $order->setGlobalOption($globalOption);
        $customer = $this->getDomainCustomer($user, $globalOption);
        $order->setCustomer($customer);
        $order->setEcommerceConfig($globalOption->getEcommerceConfig());
        $order->setShippingCharge($globalOption->getEcommerceConfig()->getShippingCharge());
        $vat = $this->getCulculationVat($globalOption, $cart->total());
        $order->setDeliveryDate(new \DateTime("now"));
        $order->setVat($vat);
        $order->setCreatedBy($user);
        $order->setTotalAmount($cart->total());
        $order->setItem($cart->total_items());
        $grandTotal = $cart->total() + $globalOption->getEcommerceConfig()->getShippingCharge() + $vat;
        if (!empty($couponCode)) {
            $coupon = $this->_em->getRepository('EcommerceBundle:Coupon')->getValidCouponCode($globalOption,$couponCode);
            if (!empty($coupon)){
                $couponAmount = $this->getCalculatorCouponAmount($order->getTotalAmount(), $coupon);
                $order->setGrandTotalAmount($grandTotal - $couponAmount);
                $order->setCoupon($coupon);
                $order->setCouponAmount($couponAmount);
            }
        }else{
            $order->setGrandTotalAmount($grandTotal);
        }
        $em->persist($order);
        $em->flush();
        $this->insertOrderItem($order,$cart);
        return $order;

    }

    public function getDomainCustomer($user,GlobalOption $globalOption)
    {

        $customer = $this->_em->getRepository('DomainUserBundle:Customer')->findOneBy(array('globalOption' => $globalOption,'mobile' => $user->getUsername()));
        if(!empty($customer)){

            return $customer;

        }else{

            $em = $this->_em;
            $entity = new Customer();
            $entity->setGlobalOption($globalOption);
            $entity->setMobile($user->getUsername());
            $entity->setEmail($user->getEmail());
            $entity->setAddress($user->getProfile()->getAddress());
            $entity->setName($user->getProfile()->getName());
            $entity->setCustomerType('online');
            $em->persist($entity);
            $em->flush($entity);
            return $entity;
        }
    }

    public function insertOrderItem(Order $order,$cart)
    {

        $em = $this->_em;
        foreach ($cart->contents() as $row){

            $goodsItem = $em->getRepository('InventoryBundle:GoodsItem')->find($row['id']);
            if(!empty($goodsItem)) {

                $orderItem = new OrderItem();
                $orderItem->setOrder($order);
                $orderItem->setPurchaseVendorItem($goodsItem->getPurchaseVendorItem());
                $orderItem->setGoodsItem($goodsItem);
                $orderItem->setPrice($goodsItem->getSalesPrice());
                $orderItem->setQuantity($row['quantity']);
                $orderItem->setSubTotal($row['quantity'] * $goodsItem->getSalesPrice());
                if (!empty($row['colorId'])){
                $orderItem->setColor($em->getRepository('InventoryBundle:ItemColor')->find($row['colorId']));
                }
                $em->persist($orderItem);
                $em->flush();

            }
        }
    }

    public function getCulculationVat($globalOption,$total)
    {

        $vat = $globalOption->getEcommerceConfig()->getVat();
        $totalVat = round(($total  * $vat )/100);
        return $totalVat;

    }

    public function getCalculatorCouponAmount( $grandTotal = 0, Coupon $coupon)
    {
        if ($coupon->getPercentage() == 1 ){
            $percentage = round(($grandTotal  * $coupon->getAmount() )/100);
            if($percentage >= $coupon->getAmountLimit()){
                $couponAmount = $coupon->getAmountLimit();
            }else{
                $couponAmount = $percentage;
            }
        }else{
            $couponAmount = $coupon->getAmount();
        }
        return $couponAmount;
    }


    public function updateOrder(Order $order)
    {
        $em = $this->_em;
        $orderItem = $em->getRepository('EcommerceBundle:OrderItem')->getItemOverview($order);
        $totalAmount = $orderItem['totalAmount'];
        $totalItem = $orderItem['totalQuantity'];
        $order->setTotalAmount($totalAmount);
        $order->setItem($totalItem);
        $vat = $this->getCulculationVat($order->getGlobalOption(),$totalAmount);
        $grandTotal = $totalAmount + $order->getShippingCharge() + $vat;
        $order->setVat($vat);
        $order->setGrandTotalAmount($grandTotal);
        if (!empty($order->getCoupon())) {
            $couponAmount = $this->getCalculatorCouponAmount($totalAmount, $order->getCoupon());
            $order->setGrandTotalAmount($grandTotal - $couponAmount);
            $order->setCouponAmount($couponAmount);
        }else{
            $order->setGrandTotalAmount($grandTotal);
        }

        if($order->getPaidAmount() > $grandTotal ){
            $order->setReturnAmount(($order->getPaidAmount() + $order->getDiscountAmount()) - $grandTotal);
            $order->setDueAmount(0);
        }elseif($totalAmount < $grandTotal ){
            $order->setReturnAmount(0);
            $due = (int)$grandTotal - ((int) $order->getPaidAmount() + $order->getDiscountAmount());
            $order->setDueAmount($due);
        }
        $em->flush();
    }

    public function updateOrderPayment(Order $entity)
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('EcommerceBundle:OrderPayment','e')
            ->select('sum(e.amount) as totalAmount')
            ->where('e.order = :order')
            ->andWhere('e.status = :status')
            ->setParameter('order', $entity ->getId())
            ->setParameter('status', 1)
            ->getQuery()->getSingleResult();

        $entity->setPaidAmount(floatval($total['totalAmount']));
        $due = $entity->getGrandTotalAmount() - $entity->getPaidAmount();
        $entity->setDueAmount($due);
        $em->persist($entity);
        $em->flush();
    }



}
