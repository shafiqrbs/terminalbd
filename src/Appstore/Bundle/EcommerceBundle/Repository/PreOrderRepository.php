<?php

namespace Appstore\Bundle\EcommerceBundle\Repository;
use Appstore\Bundle\EcommerceBundle\Entity\PreOrder;
use Doctrine\ORM\EntityRepository;

/**
 * PreOrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PreOrderRepository extends EntityRepository
{
    public function updatePreOder(PreOrder $entity)
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('EcommerceBundle:PreOrderItem','e')
            ->select('sum(e.total) as total , sum(e.totalDollar) as dollar , sum(e.shippingCharge) as shippingCharge , count(e.id) as item, sum(e.quantity) as quantity')
            ->where('e.preOrder = :preOrder')
            ->andWhere('e.status = :status')
            ->setParameter('preOrder', $entity ->getId())
            ->setParameter('status', 1)
            ->getQuery()->getSingleResult();

        $entity->setTotalAmount($total['total']);
        $entity->setDollar($total['dollar']);
        $entity->setTotalShippingCharge($total['shippingCharge']);
        $entity->setItem($total['item']);
        $entity->setQuantity($total['quantity']);
        $vat = $this->getCulculationVat($entity->getGlobalOption(),$total['total']);
        $entity->setVat($vat);
        $entity->setGrandTotalAmount($total['total'] + $total['shippingCharge'] + $vat + $entity->getDeliveryCharge() - $entity->getDiscountAmount());
        $grandTotal = $entity->getGrandTotalAmount();
        $payment = $entity->getAdvanceAmount() + $entity->getPaidAmount();

        if($payment > $grandTotal ){
            $entity->setReturnAmount( $payment - $grandTotal);
            $entity->setDueAmount(0);
        }elseif($payment < $grandTotal ){
            $entity->setReturnAmount(0);
            $entity->setDueAmount($grandTotal - $payment);
        }
        $em->persist($entity);
        $em->flush();
    }

    public function getCulculationVat($globalOption,$total)
    {

        $vat = $globalOption->getEcommerceConfig()->getVat();
        $totalVat = round(($total  * $vat )/100);
        return $totalVat;

    }

}
