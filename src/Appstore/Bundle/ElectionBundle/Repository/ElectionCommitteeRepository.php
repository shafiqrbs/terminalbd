<?php

namespace Appstore\Bundle\ElectionBundle\Repository;
use Appstore\Bundle\DomainUserBundle\Entity\NotificationConfig;
use Appstore\Bundle\ElectionBundle\Entity\ElectionConfig;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * ElectionCommitteeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ElectionCommitteeRepository extends EntityRepository
{

	public function getCommittees(ElectionConfig $config){

		$qb = $this->createQueryBuilder('e');
		$qb->select('e');
		$qb->where('e.electionConfig='.$config->getId());
		$qb->andWhere("e.status = :status");
		$qb->setParameter('status', 1);
		$qb->orderBy("e.updated",'DESC');
		$qb->getMaxResults(0,5);
		$results = $qb->getQuery()->getResult();
		return $results;
	}

	public function getTypeBaseCommittee(ElectionConfig $config){

		$qb = $this->createQueryBuilder('e');
		$qb->join('e.electionSetup','t');
		$qb->join('t.electionType','type');
		$qb->select('type.name as committeeName , COUNT(e.id) as countId');
		$qb->where('e.electionConfig='.$config->getId());
		$qb->andWhere("e.status = :status");
		$qb->setParameter('status', 1);
		$qb->groupBy('type.name');
		$results = $qb->getQuery()->getArrayResult();
		return $results;
	}

	public function getLocationBaseCommittee(ElectionConfig $config){

		$qb = $this->createQueryBuilder('e');
		$qb->join('e.location','t');
		$qb->select('t.name as locationName , COUNT(e.id) as countId');
		$qb->where('e.electionConfig='.$config->getId());
		$qb->andWhere("e.status = :status");
		$qb->setParameter('status', 1);
		$qb->groupBy('t.name');
		$results = $qb->getQuery()->getArrayResult();
		return $results;
	}

	public function getLocationGroupBaseCommittee(ElectionConfig $config){

		$qb = $this->createQueryBuilder('e');
		$qb->join('e.location','location');
		$qb->leftJoin('location.locationType','type');
		$qb->leftJoin('e.members','m');
		$qb->select('type.name as locationName , COUNT(e.id) as countId, COUNT(m.id) as memberCount');
		$qb->where('e.electionConfig='.$config->getId());
		$qb->andWhere("e.status = :status");
		$qb->setParameter('status', 1);
		$qb->groupBy('type.name');
		$results = $qb->getQuery()->getArrayResult();
		return $results;
	}

	public function searchAutoComplete(ElectionConfig $config, $q)
	{
		$query = $this->createQueryBuilder('e');
		$query->select('e.id as id');
		$query->addSelect('e.name AS text');
		$query->where($query->expr()->like("e.name", "'$q%'"  ));
		$query->andWhere("e.electionSetup = :config");
		$query->setParameter('config', $config->getSetup()->getId());
		$query->orderBy('e.name', 'ASC');
		$query->setMaxResults( '10' );
		return $query->getQuery()->getResult();

	}



}
