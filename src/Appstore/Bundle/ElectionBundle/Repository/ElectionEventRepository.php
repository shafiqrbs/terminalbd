<?php

namespace Appstore\Bundle\ElectionBundle\Repository;
use Appstore\Bundle\DomainUserBundle\Entity\Customer;
use Appstore\Bundle\ElectionBundle\Entity\ElectionConfig;
use Appstore\Bundle\ElectionBundle\Entity\ElectionEvent;
use Appstore\Bundle\ElectionBundle\Entity\ElectionEventMember;
use Appstore\Bundle\HospitalBundle\Entity\Invoice;
use Appstore\Bundle\InventoryBundle\Entity\Sales;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * CustomerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ElectionEventRepository extends EntityRepository
{


	public function getEvents(ElectionConfig $config){

		$qb = $this->createQueryBuilder('e');
		$qb->select('e');
		$qb->where('e.electionConfig='.$config->getId());
		$qb->andWhere("e.status = :status");
		$qb->setParameter('status', 1);
		$qb->orderBy("e.updated",'DESC');
		$qb->getMaxResults(0,5);
		$results = $qb->getQuery()->getResult();
		return $results;
	}

	public function getTypeBaseEvent(ElectionConfig $config){

		$qb = $this->createQueryBuilder('e');
		$qb->join('e.eventType','t');
		$qb->select('t.name as eventName , COUNT(e.id) as countId');
		$qb->where('e.electionConfig='.$config->getId());
		$qb->andWhere("e.status = :status");
		$qb->setParameter('status', 1);
		$qb->groupBy('t.name');
		$results = $qb->getQuery()->getArrayResult();
		return $results;
	}

	public function getLocationBaseEvent(ElectionConfig $config){

		$qb = $this->createQueryBuilder('e');
		$qb->join('e.location','t');
		$qb->select('t.name as locationName , COUNT(e.id) as countId');
		$qb->where('e.electionConfig='.$config->getId());
		$qb->andWhere("e.status = :status");
		$qb->setParameter('status', 1);
		$qb->groupBy('t.name');
		$results = $qb->getQuery()->getArrayResult();
		return $results;
	}


	public function getMemberLists(ElectionEvent $committee)
	{
		$entities = $committee->getEventMembers();
		$data = '';
		$i = 1;

		/* @var $entity ElectionEventMember */

		foreach ($entities as $entity) {
			$data .= "<tr id='remove-{$entity->getId()}'>";
			$data .= "<td>{$i}.</td>";
			$data .= "<td>{$entity->getName()}</td>";
			$data .= "<td>{$entity->getDesignation()}</td>";
			$data .= "<td><a href='tel:+88 {$entity->getMobile()}'>{$entity->getMobile()}</a></td>";
			$data .= "<td>{$entity->getDescription()}</td>";
			$data .= "<td><a data-id='{$entity->getId()}' data-url='/election/event/{$entity->getId()}/member-delete' href='javascript:' class='btn red mini delete' ><i class='icon-trash'></i></a></td>";
			$data .= '</tr>';
			$i++;
		}
		return $data;
	}


	public function searchAutoComplete(ElectionConfig $config, $q)
	{
		$query = $this->createQueryBuilder('e');
		$query->leftJoin('e.eventType','event');
		$query->select('e.id as id');
		$query->addSelect('CONCAT(e.name, \' \', event.name) AS text');
		$query->where($query->expr()->like("e.name", "'$q%'"  ));
		$query->orWhere($query->expr()->like("event.name", "'$q%'"  ));
		$query->andWhere("e.electionSetup = :config");
		$query->setParameter('config', $config->getSetup()->getId());
		$query->orderBy('e.name', 'ASC');
		$query->setMaxResults( '10' );
		return $query->getQuery()->getResult();

	}

}
