<?php

namespace Appstore\Bundle\ElectionBundle\Repository;
use Appstore\Bundle\DomainUserBundle\Entity\Customer;
use Appstore\Bundle\HospitalBundle\Entity\Invoice;
use Appstore\Bundle\InventoryBundle\Entity\Sales;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * CustomerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ElectionMemberRepository extends EntityRepository
{
    public function checkDuplicateCustomer(GlobalOption $config, $mobile)
    {
        $em = $this->_em;
        $entity = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('config' => $config,'mobile' => $mobile));
        if($entity) {
            return false;
        }else{
            return true;
        }

    }

    public function defaultCustomer($global)
    {

        $mobile = $global->getMobile();
        $em = $this->_em;
        $entity = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('config' => $global ,'mobile' => $mobile));
        if($entity){
            return $entity;
        }else{
            $entity = new Customer();
            $entity->setMobile($mobile);
            $entity->setName('Default');
            $entity->setGlobalOption($global);
            $em->persist($entity);
            $em->flush($entity);
            return $entity;
        }
    }

    public function newExistingCustomer($config,$mobile,$data)
    {
        $em = $this->_em;
        $name = $data['sales_online']['e']['name'];
        $location = $data['sales_online']['e']['location'];
        $address = $data['sales_online']['e']['address'];
        $entity = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('config' => $config ,'mobile' => $mobile));
        if($entity){
            return $entity;
        }else{
            $location = $em->getRepository('SettingLocationBundle:Location')->find($location);
            $entity = new Customer();
            $entity->setMobile($mobile);
            $entity->setName($name);
            $entity->setLocation($location);
            $entity->setAddress($address);
            $entity->setGlobalOption($config);
            $em->persist($entity);
            $em->flush($entity);
            return $entity;
        }
    }

    public function newExistingCustomerForSales($config,$mobile,$data)
    {
        $em = $this->_em;
        $name = $data['eName'];
        $address = $data['eAddress'];
        $entity = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('config' => $config ,'mobile' => $mobile));
        if($entity){
            return $entity;
        }else{
            $entity = new Customer();
            $entity->setMobile($mobile);
            $entity->setName($name);
            $entity->setAddress($address);
            $entity->setGlobalOption($config);
            if(!empty($data['location'])){
                $location = $em->getRepository('SettingLocationBundle:Location')->find($data['location']);
                $entity->setLocation($location);
            }
            $em->persist($entity);
            $em->flush($entity);
            return $entity;
        }
    }

	public function newExistingCustomerForHotel($config,$mobile,$data)
	{
		$em = $this->_em;
		$namePrefix = isset($data['namePrefix']) ? $data['namePrefix']:array();
		$email = $data['email'];
		$firstName = $data['firstName'];
		$lastName = $data['lastName'];
		$address = $data['address'];
		$profession = $data['profession'];
		$organization = $data['organization'];
		$postalCode = $data['postalCode'];
		$remark = $data['remark'];
		$entity = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('config' => $config ,'mobile' => $mobile));
		if($entity){
			return $entity;
		}else{
			$entity = new Customer();
			$entity->setNamePrefix($namePrefix);
			$entity->setMobile($mobile);
			$entity->setEmail($email);
			$entity->setFirstName($firstName);
			$entity->setLastName($lastName);
			$entity->setAddress($address);
			$entity->setProfession($profession);
			$entity->setCompany($organization);
			$entity->setPostalCode($postalCode);
			$entity->setRemark($remark);
			$entity->setName($entity->getFirstName().' '.$entity->getLastName());
			$entity->setGlobalOption($config);
			if(!empty($data['location'])){
				$location = $em->getRepository('SettingLocationBundle:Location')->find($data['location']);
				$entity->setLocation($location);
			}
			$em->persist($entity);
			$em->flush($entity);
			return $entity;
		}
	}


	public function newExistingRestaurantCustomer($config,$mobile,$name)
    {
        $em = $this->_em;
        $entity = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('config' => $config ,'mobile' => $mobile));
        if($entity){
            $entity->setName($name);
            $em->flush($entity);
            return $entity;

        }else{

            $entity = new Customer();
            $entity->setMobile($mobile);
            $entity->setName($name);
            $entity->setGlobalOption($config);
            $em->persist($entity);
            $em->flush($entity);
            return $entity;
        }
    }

    public function findExistingCustomer(Sales $sales, $mobile)
    {
        $em = $this->_em;
        $entity = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('config' => $sales->getInventoryConfig()->getGlobalOption(),'mobile'=>$mobile));
        if($entity){
            return $entity;
        }else{
            $entity = new Customer();
            $entity->setMobile($mobile);
            $entity->setName($mobile);
            $entity->setGlobalOption($sales->getInventoryConfig()->getGlobalOption());
            $em->persist($entity);
            $em->flush();
            return $entity;
        }
    }

    public function findHmsExistingCustomer($config, $mobile,$data)
    {
        $em = $this->_em;

        $name = $data['e']['name'];
        $gender = $data['e']['gender'];
        $age = $data['e']['age'];
        $ageType = $data['e']['ageType'];
        $location = $data['e']['location'];
        $profession = $data['e']['profession'];
        $maritalStatus = $data['e']['maritalStatus'];
        $dob = $data['e']['dob'];
        $fatherName = $data['e']['fatherName'];
        $motherName = $data['e']['motherName'];
        $nationality = $data['e']['nationality'];
        $bloodGroup = $data['e']['bloodGroup'];
        $address = $data['e']['address'];
        $religion = $data['e']['religion'];

        $alternativeContactPerson = $data['e']['alternativeContactPerson'];
        $alternativeRelation = $data['e']['alternativeRelation'];
        $alternativeContactMobile = $data['e']['alternativeContactMobile'];
        $entity = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('config' => $config ,'name' => $name ,'mobile' => $mobile,'age' => $age,'gender' => $gender));
        if($entity){
            return $entity;
        }else{

            $entity = new Customer();
            if(!empty($location)){
                $location = $em->getRepository('SettingLocationBundle:Location')->find($location);
                $entity->setLocation($location);
            }
            $entity->setMobile($mobile);
            $entity->setName($name);
            $entity->setGender($gender);
            $entity->setAge($age);
            $entity->setAgeType($ageType);
            $entity->setDob($dob);
            $entity->setFatherName($fatherName);
            $entity->setMotherName($motherName);
            $entity->setNationality($nationality);
            $entity->setReligion($religion);
            $entity->setBloodGroup($bloodGroup);
            $entity->setMaritalStatus($maritalStatus);
            $entity->setProfession($profession);
            $entity->setAddress($address);
            $entity->setAlternativeContactPerson($alternativeContactPerson);
            $entity->setAlternativeRelation($alternativeRelation);
            $entity->setAlternativeContactMobile($alternativeContactMobile);
            $entity->setGlobalOption($config);
            $em->persist($entity);
            $em->flush($entity);

            return $entity;
        }

    }
    public function findHmsExistingCustomerDiagnostic($config, $mobile,$data)
    {
        $em = $this->_em;

        $name = $data['e']['name'];
        $gender = $data['e']['gender'];
        $age = $data['e']['age'];
        $ageType = $data['e']['ageType'];
        $location = $data['e']['location'];
        $address = $data['e']['address'];
        $entity = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('config' => $config ,'name' => $name ,'mobile' => $mobile,'age' => $age,'gender' => $gender));
        if($entity){
            return $entity;
        }else{

            $entity = new Customer();
            if(!empty($location)){
                $location = $em->getRepository('SettingLocationBundle:Location')->find($location);
                $entity->setLocation($location);
            }
            $entity->setMobile($mobile);
            $entity->setName($name);
            $entity->setGender($gender);
            $entity->setAge($age);
            $entity->setAgeType($ageType);
            $entity->setAddress($address);
            $entity->setGlobalOption($config);
            $em->persist($entity);
            $em->flush($entity);
            return $entity;
        }

    }

    public function findWithSearch($config,$data)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->where("e.electionConfig = :config");
        $qb->setParameter('config', $config);
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.created','DESC');
        $qb->getQuery();
        return  $qb;

    }

    protected function handleSearchBetween($qb,$data)
    {
        if(!empty($data))
        {

            $mobile =    isset($data['mobile'])? $data['mobile'] :'';
            $e =    isset($data['name'])? $data['name'] :'';
            $location =    isset($data['location'])? $data['location'] :'';
            $eId =    isset($data['eId'])? $data['eId'] :'';

            if (!empty($mobile)) {
                $qb->andWhere("e.mobile = :mobile");
                $qb->setParameter('mobile', $mobile);
            }
            if (!empty($location)) {
                $qb->leftJoin('e.location','l');
                $qb->andWhere("l.name = :location");
                $qb->setParameter('location', $location);
            }

            if (!empty($e)) {
                $qb->andWhere("e.name LIKE :name");
                $qb->setParameter('name','%'. $e.'%');
            }
            if (!empty($eId)) {
                $qb->andWhere("e.eId LIKE :eId");
                $qb->setParameter('eId','%'. $eId.'%');
            }
        }

    }


    public function insertContactCustomer($config,$data,$mobile='')
    {
        $em = $this->_em;
        $entity  ='';

        if(!empty($mobile)){
            $entity = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('config' => $config, 'mobile' => $mobile));
        }elseif(isset($data['email']) && $data['email'] !=""){
            $entity = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('config' =>$config, 'email' => $data['email']));
        }

        if(!empty($entity)){
            return $data = array('e' => $entity, 'status'=>'invalid');
        }else {
            $entity = new Customer();
            if(isset($data['email']) && $data['email'] !=""){
                $entity->setEmail($data['email']);
            }
            if(!empty($mobile)) {
                $entity->setMobile($mobile);
            }
            if(isset($data['name']) && $data['name'] !=""){
                $entity->setName($data['name']);
            }
            $entity->setGlobalOption($config);
            $entity->setCustomerType('contact');
            $em->persist($entity);
            $em->flush();
            return $data = array('e' => $entity, 'status'=>'valid');
        }

    }

    public function insertNewsLetterCustomer($config,$data,$mobile='')
    {
        $em = $this->_em;
        $entity  ='';

        if(!empty($mobile)){
            $entity = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('config' => $config, 'mobile' => $mobile));
        }elseif(isset($data['email']) && $data['email'] !=""){
            $entity = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('config' =>$config, 'email' => $data['email']));
        }
        if(!empty($entity)){
            return $entity;
        }else {
            $entity = new Customer();
            if(isset($data['email']) && $data['email'] !=""){
                $entity->setEmail($data['email']);
            }
            if(!empty($mobile)) {
                $entity->setMobile($mobile);
            }
            $entity->setGlobalOption($config);
            $entity->setCustomerType('news-letter');
            $em->persist($entity);
            $em->flush();
            return $entity;
        }

    }

    public function insertSMSCustomer($data)
    {
        $em = $this->_em;
        $entity = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('config'=>$data['config'],'mobile' => $data['mobile']));
        if($entity){
            return $entity;
        }else{
            $entity = new Customer();
            $config = $this->_em->getRepository('SettingToolBundle:GlobalOption')->find($data['config']);
            $entity->setMobile($data['mobile']);
            $entity->setName($data['name']);
            $entity->setGlobalOption($config);
            $entity->setCustomerType('sms');
            $em->persist($entity);
            $em->flush();
            return $entity;
        }

    }

    public function searchAutoComplete(GlobalOption $config, $q, $type = 'NULL')
    {
        $query = $this->createQueryBuilder('e');

        $query->select('e.mobile as id');
        $query->addSelect('e.id as e');
        $query->addSelect('CONCAT(e.mobile, \' - \', e.name) AS text');
        $query->where($query->expr()->like("e.mobile", "'$q%'"  ));
        $query->orWhere($query->expr()->like("e.name", "'%$q%'"  ));
        $query->andWhere("e.config = :config");
        $query->setParameter('config', $config->getId());
        $query->orderBy('e.name', 'ASC');
        $query->groupBy('e.mobile');
        $query->setMaxResults( '10' );
        return $query->getQuery()->getResult();

    }

     public function searchMobileAutoComplete(GlobalOption $config, $q, $type = 'NULL')
    {
        $query = $this->createQueryBuilder('e');

        $query->select('e.mobile as id');
        $query->addSelect('e.id as e');
        $query->addSelect('CONCAT(e.mobile, \'-\', e.name) AS text');
        $query->where($query->expr()->like("e.mobile", "'$q%'"  ));
        $query->andWhere("e.config = :config");
        $query->setParameter('config', $config->getId());
        $query->orderBy('e.mobile', 'ASC');
        $query->groupBy('e.mobile');
        $query->setMaxResults( '10' );
        return $query->getQuery()->getResult();

    }

    public function searchCustomerAutoComplete(GlobalOption $config, $q, $type = 'NULL')
    {
        $query = $this->createQueryBuilder('e');
        $query->select('e.name as id');
        $query->addSelect('e.id as name');
        $query->addSelect('e.name as text');
        $query->where($query->expr()->like("e.mobile", "'$q%'"  ));
        $query->andWhere("e.config = :config");
        $query->setParameter('config', $config->getId());
        $query->orderBy('e.name', 'ASC');
        $query->groupBy('e.mobile');
        $query->setMaxResults( '10' );
        return $query->getQuery()->getResult();

    }

    public function searchAutoCompleteName(GlobalOption $config, $q)
    {
        $query = $this->createQueryBuilder('e');
        $query->select('e.name as id');
        $query->addSelect('e.id as e');
        $query->addSelect('e.name as text');
        $query->where($query->expr()->like("e.name", "'$q%'"  ));
        $query->andWhere("e.config = :config");
        $query->setParameter('config', $config->getId());
        $query->groupBy('e.name');
        $query->orderBy('e.name', 'ASC');
        $query->setMaxResults( '10' );
        return $query->getQuery()->getResult();

    }

    public function searchAutoCompleteCode(GlobalOption $config, $q)
    {
        $query = $this->createQueryBuilder('e');

        $query->select('e.mobile as id');
        $query->addSelect('e.id as e');
        $query->addSelect('e.eId as text');
        //$query->addSelect('CONCAT(e.eId, " - ", e.name) AS text');
        $query->where($query->expr()->like("e.eId", "'$q%'"  ));
        $query->andWhere("e.config = :config");
        $query->setParameter('config', $config->getId());
        $query->orderBy('e.eId', 'ASC');
        $query->setMaxResults( '10' );
        return $query->getQuery()->getResult();

    }

    public function patientInsertUpdate($data,Invoice $invoice)
    {
        $em = $this->_em;
        $e = $data['appstore_bundle_hospitalbundle_invoice']['e'];
        $patient = $data['patient'];
        $option = $invoice->getHospitalConfig()->getGlobalOption();
        if($patient){
            $entity = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('config'=> $option ,'id' => $patient));
        }else{
            $location = $e['location'];
            $entity = new Customer();
            if(!empty($location)){
                $location = $em->getRepository('SettingLocationBundle:Location')->find($location);
                $entity->setLocation($location);
            }
            if($e['mobile']){
                $entity->setMobile($e['mobile']);
            }
            if($e['name']){
                $entity->setName($e['name']);
            }
            if($e['gender']){
                $entity->setGender($e['gender']);
            }
            if($e['age']){
                $entity->setAge($e['age']);
            }
            if($e['ageType']){
                $entity->setAgeType($e['ageType']);
            }
            if($e['profession']){
                $entity->setProfession($e['profession']);
            }
            if($e['fatherName']){
                $entity->setFatherName($e['fatherName']);
            }
            if($e['motherName']){
                $entity->setMotherName($e['motherName']);
            }
            if($e['nationality']){
                $entity->setNationality($e['nationality']);
            }
            if($e['religion']){
                $entity->setReligion($e['religion']);
            }
            if($e['address']){
                $entity->setAddress($e['address']);
            }
            if($e['bloodGroup']){
                $entity->setBloodGroup($e['bloodGroup']);
            }
            if($e['motherName']){
                $entity->setMotherName($e['motherName']);
            }
            if($e['nationality']){
                $entity->setNationality($e['nationality']);
            }
            if($e['maritalStatus']){
                $entity->setMaritalStatus($e['maritalStatus']);
            }
            if($e['dob']){
                $entity->setDob($e['dob']);
            }
            if($e['alternativeRelation']){
                $entity->setAlternativeRelation($e['alternativeRelation']);
            }
            if($e['alternativeContactMobile']){
                $entity->setAlternativeContactMobile($e['alternativeContactMobile']);
            }
            if($e['alternativeContactPerson']){
                $entity->setAlternativeContactPerson($e['alternativeContactPerson']);
            }
            $entity->setGlobalOption($option);
            $em->persist($entity);
            $em->flush($entity);
        }
        $em->getRepository('HospitalBundle:Invoice')->updatePatientInfo($invoice, $entity);
        return $entity;

    }




}
