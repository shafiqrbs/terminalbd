<?php

namespace Appstore\Bundle\HospitalBundle\Repository;
use Appstore\Bundle\HospitalBundle\Entity\Invoice;
use Appstore\Bundle\HospitalBundle\Entity\InvoiceTransaction;
use Doctrine\ORM\EntityRepository;


/**
 * InvoiceTransactionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvoiceTransactionRepository extends EntityRepository
{
    public function insertTransaction(Invoice $invoice)
    {



        $entity = New InvoiceTransaction();
        $entity->setInvoice($invoice);
        $entity->setPayment($invoice->getPayment());
        $entity->setTransactionMethod($invoice->getTransactionMethod());
        $entity->setDiscount($invoice->getDiscount());
        $entity->setAccountBank($invoice->getAccountBank());
        $entity->setPaymentCard($invoice->getPaymentCard());
        $entity->setCardNo($invoice->getCardNo());
        $entity->setBank($invoice->getBank());
        $entity->setAccountMobileBank($invoice->getAccountMobileBank());
        $entity->setPaymentMobile($invoice->getPaymentMobile());
        $entity->setTransactionId($invoice->getTransactionId());
        $entity->setComment($invoice->getComment());
        if ($invoice->getHospitalConfig()->getVatEnable() == 1 && $invoice->getHospitalConfig()->getVatPercentage() > 0) {
            $vat = $this->getCulculationVat($invoice,$invoice->getPayment());
            $entity->setVat($vat);
        }
        $this->_em->persist($entity);
        $this->_em->flush($entity);

        $accountInvoice = $this->_em->getRepository('AccountingBundle:AccountSales')->insertAccountInvoice($entity);
        $this->_em->getRepository('AccountingBundle:Transaction')->hmsSalesTransaction($entity, $accountInvoice);

    }

    public function updatePaymentReceive(Invoice $invoice)
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('HospitalBundle:InvoiceTransaction','si')
            ->select('sum(si.payment) as total')
            ->where('si.invoice = :invoice')
            ->setParameter('invoice', $invoice ->getId())
            ->getQuery()->getSingleResult();

            $invoice->setPayment($total);
            $em->flush();

    }

    public function getCulculationVat(Invoice $sales,$totalAmount)
    {
        $vat = ( ($totalAmount * (int)$sales->getHospitalConfig()->getVatPercentage())/100 );
        return round($vat);
    }


}
