<?php

namespace Appstore\Bundle\HotelBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\AccountSales;
use Appstore\Bundle\HotelBundle\Entity\HotelInvoice;
use Appstore\Bundle\HotelBundle\Entity\HotelInvoiceTransaction;
use Appstore\Bundle\HotelBundle\Entity\HotelInvoiceTransactionSummary;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;


/**
 * HotelHotelInvoiceTransactionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HotelInvoiceTransactionSummaryRepository extends EntityRepository
{

	public function insertTransactionSummary(HotelInvoice $invoice)
	{
		$entity = new HotelInvoiceTransactionSummary();
		$entity->setHotelInvoice($invoice);
		$entity->setHotelConfig($invoice->getHotelConfig());
		$entity->setDiscount(0);
		$entity->setVat(0);
		$entity->setSubTotal(0);
		$entity->setTotal(0);
		$entity->setReceived(0);
		$entity->setDue(0);
		$this->_em->persist($entity);
		$this->_em->flush();
	}

	public function updateTransactionSummary(HotelInvoice $invoice)
	{

		$entity = $this->findOneBy(array('hotelConfig' => $invoice->getHotelConfig(),'hotelInvoice'=> $invoice));
		$em = $this->_em;
		$res = $em->createQueryBuilder()
		          ->from('HotelBundle:HotelInvoiceTransaction','si')
		          ->join('si.hotelInvoice','e')
		          ->select('sum(si.discount) as discount , sum(si.vat) as vat , sum(si.subTotal) as subTotal , sum(si.total) as total, sum(si.received) as received')
		          ->where('si.referenceInvoice = :invoice')
		          ->setParameter('invoice', $invoice->getId())
		          ->andWhere('e.hotelConfig = :config')
		          ->setParameter('config', $invoice->getHotelConfig()->getId())
		          ->andWhere('si.process = :process')
		          ->setParameter('process', 'Done')
		          ->getQuery()->getOneOrNullResult();

    	$due = ($res['total'] - ($res['received'] + $res['discount']));
		$entity->setDiscount($res['discount']);
		$entity->setVat($res['vat']);
		$entity->setSubTotal($res['subTotal']);
		$entity->setTotal($res['total']);
		$entity->setReceived($res['received']);
		$entity->setDue($due);
		$em->flush();

	}

}