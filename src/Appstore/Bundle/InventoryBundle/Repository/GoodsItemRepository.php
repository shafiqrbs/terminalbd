<?php
namespace Appstore\Bundle\InventoryBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\Transaction;
use Appstore\Bundle\EcommerceBundle\Entity\Discount;
use Appstore\Bundle\InventoryBundle\Entity\GoodsItem;
use Appstore\Bundle\InventoryBundle\Entity\PurchaseVendorItem;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\Validator\Constraints\Null;

/**
 * GoodsItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GoodsItemRepository extends EntityRepository
{

    /*public function insertSubProduct(PurchaseVendorItem $entity,$data)
    {
        $em = $this->_em;
        $i=0;

        if($entity->getSubProduct() == 1 and isset($data['salesPrice']) ){

            foreach ($data['salesPrice'] as $value) {

                if(isset($data['goodsItem'][$i]) and !empty($data['goodsItem'][$i])){

                    $id = $data['goodsItem'][$i];

                    $goods = $this->_em->getRepository('InventoryBundle:GoodsItem')->find($id);
                    $goods->setSalesPrice($data['salesPrice'][$i]);
                    $goods->setWebPrice($data['webPrice'][$i]);
                    if(isset($data['size'][$i])){
                        $sizeId = $data['size'][$i];
                        $size = $this->_em->getRepository('InventoryBundle:ItemSize')->findOneBy(array('inventoryConfig'=>$entity->getInventoryConfig(),'id'=> $sizeId));
                        $goods->setSize($size);
                    }else{
                        $goods->setName($data['name'][$i]);
                    }

                }elseif( isset($data['salesPrice'][$i]) and !empty($data['salesPrice'][$i]) ) {

                    $goods = new GoodsItem();
                    $goods->setSalesPrice($data['salesPrice'][$i]);
                    $goods->setWebPrice($data['webPrice'][$i]);
                    if(isset($data['size'][$i])){
                        $sizeId = $data['size'][$i];
                        $size = $this->_em->getRepository('InventoryBundle:ItemSize')->findOneBy(array('inventoryConfig'=>$entity->getInventoryConfig(),'id'=> $sizeId));
                        $goods->setSize($size);
                    }else{
                        $goods->setName($data['name'][$i]);
                    }
                    $goods->setPurchaseVendorItem($entity);
                    $em->persist($goods);
                }
                $i++;
            }


        }
        $em->flush();
    }*/

    public function initialInsertSubProduct(PurchaseVendorItem $reEntity)
    {

        $em = $this->_em;
        $goods = new GoodsItem();
        $goods->setSalesPrice($reEntity->getSalesPrice());
        $goods->setPurchasePrice($reEntity->getPurchasePrice());
        $goods->setQuantity($reEntity->getMasterQuantity());
        if($reEntity->getSize()){
            $goods->setSize($reEntity->getSize());
        }
        if($reEntity->getItemColors()){
            $goods->setColors($reEntity->getItemColors());
        }
        $goods->setPurchaseVendorItem($reEntity);
        $goods->setMasterItem(1);
        $em->flush();

    }

    public function initialUpdateSubProduct(PurchaseVendorItem $reEntity)
    {

        $em = $this->_em;
        $goods = $this->_em->getRepository('InventoryBundle:GoodsItem')->findOneBy(array('purchaseVendorItem' => $reEntity, 'masterItem' => 1));
        if(empty($goods)){
            $this->initialInsertSubProduct($reEntity);
        }else{
            $goods->setSalesPrice($reEntity->getSalesPrice());
            $goods->setPurchasePrice($reEntity->getPurchasePrice());
            $goods->setQuantity($reEntity->getQuantity());
            if($reEntity->getSize()){
                $goods->setSize($reEntity->getSize());
            }
            if($reEntity->getItemColors()){
                $goods->setColors($reEntity->getItemColors());
            }
            $goods->setPurchaseVendorItem($reEntity);
            $em->persist($goods);
            $em->flush();
        }


    }

     public function insertSubProduct(PurchaseVendorItem $reEntity,$data)
    {

        $em = $this->_em;
        $i=0;

        if($reEntity->getSubProduct() == 1 and isset($data['salesPrice']) ) {

            if (isset($data['salesPrice'])) {

                foreach ($data['salesPrice'] as $value) {

                    $goodsItem = isset($data['goodsItem'][$i]) ? $data['goodsItem'][$i] : 0;
                    $goods = $this->_em->getRepository('InventoryBundle:GoodsItem')->findOneBy(array('purchaseVendorItem' => $reEntity, 'id' => $goodsItem));
                    if (!empty($goods)) {
                        $this->updateItemGoods($goods, $data['size'][$i],$data['color'][$i], $data['name'][$i],$data['quantity'][$i], $data['salesPrice'][$i], $data['purchasePrice'][$i]);
                    } else {
                        if (isset($data['salesPrice'][$i]) and !empty($data['salesPrice'][$i]) ) {

                            $goods = new GoodsItem();
                            $goods->setSalesPrice($data['salesPrice'][$i]);
                            $goods->setPurchasePrice($data['purchasePrice'][$i]);
                            $goods->setQuantity($data['quantity'][$i]);
                            if(isset($data['color'][$i]) and !empty($data['color'][$i])){
                                $colorId = $data['color'][$i];
                                $color = $this->_em->getRepository('InventoryBundle:ItemColor')->findOneBy(array('inventoryConfig' => $reEntity->getInventoryConfig(),'id'=> $colorId));
                                $goods->setColors(array($color));
                            }
                            if(isset($data['size'][$i]) and !empty($data['size'][$i])){
                                $sizeId = $data['size'][$i];
                                $size = $this->_em->getRepository('InventoryBundle:ItemSize')->findOneBy(array('inventoryConfig' => $reEntity->getInventoryConfig(),'id'=> $sizeId));
                                $goods->setSize($size);
                            }else{
                                $goods->setName($data['name'][$i]);
                            }
                            $goods->setPurchaseVendorItem($reEntity);
                            $em->persist($goods);

                        }

                    }

                    $i++;
                }
                $em->flush();
            }
        }
    }

    public function insertInventorySubProduct(PurchaseVendorItem $entity)
    {
        $em = $this->_em;
        $rows=array();
        foreach($entity->getPurchaseItems() as $item ) {

            if(!isset($rows[$item->getItem()->getSize()->getId()]['color'])) {
                $rows[$item->getItem()->getSize()->getId()]['color'] = array();
            }

            $rows[$item->getItem()->getSize()->getId()]['color'][$item->getItem()->getColor()->getId()] = $item->getItem()->getColor()->getId();

            if(!isset($rows[$item->getItem()->getSize()->getId()]['quantity'])){
                $rows[$item->getItem()->getSize()->getId()]['quantity'] = 0;
            }

            $rows[$item->getItem()->getSize()->getId()]['quantity'] += $item->getQuantity();
            $rows[$item->getItem()->getSize()->getId()]['purchasePrice'] = $item->getPurchasePrice();
            $rows[$item->getItem()->getSize()->getId()]['salesPrice'] = $item->getSalesPrice();
        }

        foreach($rows as $size => $row )
        {
            $colors = $row['color'];
            $goods = new GoodsItem();
            $goods->setSalesPrice($row['salesPrice']);
            $goods->setPurchasePrice($row['purchasePrice']);
            $goods->setQuantity($row['quantity']);

            $sizeObj = $this->_em->getRepository('InventoryBundle:ItemSize')->findOneBy(array('inventoryConfig' => $entity->getInventoryConfig(),'id'=> $size));
            $goods->setSize($sizeObj);

            $colorObjs =array();
            foreach ($colors as $color){
                $colorObjs[] = $this->_em->getRepository('InventoryBundle:ItemColor')->findOneBy(array('inventoryConfig' => $entity->getInventoryConfig(),'id'=> $color));
            }
            if(!empty($colors) && is_array($colors)){
                $goods->setColors($colorObjs);
            }
            $goods->setPurchaseVendorItem($entity);
           // $goods->setMasterItem(1);
            $em->persist($goods);
            $em->flush();
        }

    }

    public function updateItemGoods(GoodsItem $goods,$size,$color,$name,$quantity,$salesPrice,$purchasePrice)
    {
        $em = $this->_em;
        $goods->setSalesPrice($salesPrice);
        $goods->setPurchasePrice($purchasePrice);
        $goods->setQuantity($quantity);
        if(isset($size) and !empty($size) ){
            $size = $this->_em->getRepository('InventoryBundle:ItemSize')->findOneBy(array('inventoryConfig' => $goods->getPurchaseVendorItem()->getInventoryConfig(),'id'=> $size));
            $goods->setSize($size);
            $goods->setName(null);
        }else{
            $goods->setName($name);
        }
        if(isset($color) and !empty($color)){
            $color = $this->_em->getRepository('InventoryBundle:ItemColor')->findOneBy(array('inventoryConfig' => $goods->getPurchaseVendorItem()->getInventoryConfig(),'id'=> $color));
            $goods->setColors(array($color));
        }
        $em->flush();
    }

    public function subItemDiscountPrice(PurchaseVendorItem $entity ,Discount $discount)
    {
        $em = $this->_em;
        /** @var GoodsItem $item */
        foreach( $entity->getGoodsItems() as $item){
            $discountPrice = $this->getCulculationDiscountPrice($entity,$discount);
            $item->setDiscountPrice($discountPrice);
        }
        $em->flush();
    }

    public function getCulculationDiscountPrice(PurchaseVendorItem $purchase , Discount $discount)
    {
        if($discount->getType() == 'percentage'){
            $price = ( ($purchase->getSalesPrice() * (int)$discount->getName())/100 );
            $discountPrice = $purchase->getSalesPrice() - $price;
        }else{
            $discountPrice = ( $purchase->getSalesPrice() - $discount->getName());
        }

        return $discountPrice;

    }

}
