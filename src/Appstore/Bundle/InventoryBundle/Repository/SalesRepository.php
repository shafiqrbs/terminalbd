<?php

namespace Appstore\Bundle\InventoryBundle\Repository;
use Appstore\Bundle\InventoryBundle\Entity\Sales;
use Doctrine\ORM\EntityRepository;

/**
 * SalesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SalesRepository extends EntityRepository
{

    public function salesLists($config,$data)
    {

        $qb = $this->createQueryBuilder('s');
        $qb->leftJoin('s.customer','c');
        $qb->where("s.inventoryConfig = :config");
        $qb->setParameter('config', $config);
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('s.updated','DESC');
        $result = $qb->getQuery();
        return $result;

    }

    public function getSalesLastId($inventory)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('s.id');
        $qb->from('InventoryBundle:Sales','s');
        $qb->where("s.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory->getId());
        $qb->orderBy('s.id','DESC');
        $qb->setMaxResults(1);
        $lastId = $qb->getQuery()->getSingleScalarResult();
        if( $lastId > 0 ){
            return $lastId +1;
        }else{
            return 1;
        }
        return $lastId;
    }

    public function updateSalesTotalPrice(Sales $sales,$import ='')
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('InventoryBundle:SalesItem','si')
            ->select('sum(si.subTotal) as total , sum(si.quantity) as totalItem')
            ->where('si.sales = :sales')
            ->setParameter('sales', $sales ->getId())
            ->getQuery()->getSingleResult();
        if($import == 'import')
        {
            $sales->setPayment($total['total']);
        }
        $sales->setSubTotal($total['total']);
        $sales->setTotal($total['total']);
        $sales->setTotalItem($total['totalItem']);
        $em->persist($sales);
        $em->flush();

        return $total['total'];

    }

    public function todaySalesOverview($inventory)
    {
        $qb = $this->_em->createQueryBuilder();
        $datetime = new \DateTime("now");
        $today_startdatetime = $datetime->format('Y-m-d 00:00:00');
        $today_enddatetime = $datetime->format('Y-m-d 23:59:59');
        $qb->from('InventoryBundle:Sales','s');
        $qb->select('sum(s.subTotal) as subTotal , sum(s.total) as total , count(s.id) as totalVoucher, sum(s.due) as totalDue, sum(s.discount) as totalDiscount');
        $qb->where('s.inventoryConfig = :inventory')
            ->andWhere('s.paymentStatus IN (:pStatus)')
            ->andWhere('s.updated >= :today_startdatetime')
            ->andWhere('s.updated <= :today_enddatetime');
        $qb->setParameter('inventory', $inventory)
            ->setParameter('pStatus', array('Paid','Due'))
            ->setParameter('today_startdatetime', $today_startdatetime)
            ->setParameter('today_enddatetime', $today_enddatetime);
        $qb->orderBy("s.updated", 'DESC');
        return $qb->getQuery()->getResult();
    }

    public function todaySales($inventory)
    {
        $qb = $this->_em->createQueryBuilder();
        $datetime = new \DateTime("now");
        $today_startdatetime = $datetime->format('Y-m-d 00:00:00');
        $today_enddatetime = $datetime->format('Y-m-d 23:59:59');
        $qb->from('InventoryBundle:Sales','s');
        $qb->select('s')
            ->where('s.inventoryConfig = :inventory')
            ->andWhere('s.updated >= :today_startdatetime')
            ->andWhere('s.updated <= :today_enddatetime');

        $qb->setParameter('inventory', $inventory)
            ->setParameter('today_startdatetime', $today_startdatetime)
            ->setParameter('today_enddatetime', $today_enddatetime);
        $qb->orderBy("s.invoice", 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function findBySalesReturn($saleId = 0)
    {

        return $query = $this->findOneBy(array('invoice'=>$saleId));
        exit;
        echo $query->getId();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:Sales','sales');
        $qb->select('sales');
        $qb->innerJoin('sales.salesItems','salesItems');
        $qb->innerJoin('salesItems.purchaseItem','purchaseitem');
        $qb->where("sales.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory->getId());
        if(!empty($saleId)){
            $qb->andWhere("sales.salesCode = :code");
            $qb->setParameter('code',$saleId);
        }
        if(!empty($barcode)){
            $qb->andWhere("purchaseitem.barcode = :barcode");
            $qb->setParameter('barcode',$barcode);
        }
        return $result =   $qb->getQuery()->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);;


    }



    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {
        if(!empty($data))
        {

            $startDate = isset($data['startDate'])  ? $data['startDate'] : '';
            $endDate = isset($data['endDate'])  ? $data['endDate'] : '';
            $invoice =    isset($data['invoice'])? $data['invoice'] :'';
            $amount =    isset($data['amount'])? $data['amount'] :'';
            $customer =    isset($data['customer'])? $data['customer'] :'';


            if (!empty($startDate)) {
                $start = date('Y-m-d',strtotime($data['startDate']));
                $qb->andWhere("s.updated >= :startDate");
                $qb->setParameter('startDate',$start);
            }

            if (!empty($endDate)) {
                $end = date('Y-m-d',strtotime($data['endDate']));
                $qb->andWhere("s.updated <= :endDate");
                $qb->setParameter('endDate',$end);
            }

            if (!empty($invoice)) {

                $qb->andWhere("s.invoice LIKE :invoice");
                $qb->setParameter('invoice', $invoice);
            }

            if (!empty($amount)) {

                $qb->andWhere("s.payment = :payment");
                $qb->setParameter('payment', $amount);
            }

            if (!empty($customer)) {

                $qb->andWhere("c.mobile = :mobile");
                $qb->setParameter('mobile', $customer);
            }
        }

    }

    public function getCulculationVat(Sales $sales,$totalAmount)
    {
            $vat = ( ($totalAmount * (int)$sales->getInventoryConfig()->getVat())/100 );
            return $vat;

    }



}
