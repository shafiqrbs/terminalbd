<?php

namespace Appstore\Bundle\InventoryBundle\Repository;
use Appstore\Bundle\EcommerceBundle\Entity\Order;
use Appstore\Bundle\EcommerceBundle\Entity\OrderItem;
use Appstore\Bundle\InventoryBundle\Entity\Damage;
use Appstore\Bundle\InventoryBundle\Entity\SalesReturn;
use Appstore\Bundle\InventoryBundle\Entity\StockItem;
use Doctrine\ORM\EntityRepository;

/**
 * ItemStockRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StockItemRepository extends EntityRepository
{

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {
        if(!empty($data))
        {

            $startDate = isset($data['startDate'])  ? date('Y-m-d',strtotime($data['startDate'])) : '';
            $endDate =   isset($data['endDate'])  ? date('Y-m-d',strtotime($data['endDate'])) : '';
            $item = isset($data['item'])? $data['item'] :'';
            $color = isset($data['color'])? $data['color'] :'';
            $size = isset($data['size'])? $data['size'] :'';
            $vendor = isset($data['vendor'])? $data['vendor'] :'';
            $brand = isset($data['brand'])? $data['brand'] :'';

            if (!empty($data['startDate']) ) {
                $qb->andWhere("pi.created >= :startDate");
                $qb->setParameter('startDate', $startDate.' 00:00:00');
            }
            if (!empty($data['endDate'])) {
                $qb->andWhere("pi.created <= :endDate");
                $qb->setParameter('endDate', $endDate.' 23:59:59');
            }

            if (!empty($item)) {
                $qb->andWhere("m.name = :name");
                $qb->setParameter('name', $item);
            }
            if (!empty($color)) {

                $qb->andWhere("c.name = :color");
                $qb->setParameter('color', $color);
            }
            if (!empty($size)) {
                $qb->andWhere("s.name = :size");
                $qb->setParameter('size', $size);
            }
            if (!empty($vendor)) {
                $qb->andWhere("v.companyName = :vendor");
                $qb->setParameter('vendor', $vendor);
            }

            if (!empty($brand)) {
                $qb->andWhere("b.name = :brand");
                $qb->setParameter('brand', $brand);

            }
        }

    }

    /**
     * @param $qb
     * @param $data
     */

    protected function handleWithSearch($qb,$data)
    {
        if(!empty($data))
        {
            $item = isset($data['item'])? $data['item'] :'';
            $color = isset($data['color'])? $data['color'] :'';
            $size = isset($data['size'])? $data['size'] :'';
            $vendor = isset($data['vendor'])? $data['vendor'] :'';
            $brand = isset($data['brand'])? $data['brand'] :'';
            $category = isset($data['category'])? $data['category'] :'';
            $unit = isset($data['unit'])? $data['unit'] :'';

            if (!empty($item)) {
                $qb->andWhere("m.name = :name");
                $qb->setParameter('name', $item);
            }
            if (!empty($color)) {
                $qb->join('item.color', 'c');
                $qb->andWhere("c.name = :color");
                $qb->setParameter('color', $color);
            }
            if (!empty($size)) {
                $qb->join('item.size', 's');
                $qb->andWhere("s.name = :size");
                $qb->setParameter('size', $size);
            }
            if (!empty($vendor)) {
                $qb->join('item.vendor', 'v');
                $qb->andWhere("v.companyName = :vendor");
                $qb->setParameter('vendor', $vendor);
            }

            if (!empty($brand)) {
                $qb->join('item.brand', 'b');
                $qb->andWhere("b.name = :brand");
                $qb->setParameter('brand', $brand);
            }

            if (!empty($category)) {
                $qb->join('m.category','cat');
                $qb->andWhere("cat.name = :category");
                $qb->setParameter('category', $category);
            }

            if (!empty($unit)) {
                $qb->join('m.productUnit','u');
                $qb->andWhere("b.name = :unit");
                $qb->setParameter('unit', $unit);
            }

        }

    }


    public function getStockPriceOverview($inventory,$data)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.purchaseItem','pi');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->addSelect('SUM(e.quantity * pi.purchasePrice) AS purchasePrice');
        $qb->addSelect('SUM(e.quantity * pi.salesPrice) AS salesPrice');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }
    public function stockItem($inventory,$data)
    {

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.item', 'item');
        $qb->leftJoin('item.masterItem', 'm');
        $qb->leftJoin('m.productUnit', 'u');
        $qb->select("item.name AS name");
        $qb->addSelect("item.id AS itemId");
        $qb->addSelect("item.sku AS sku");
        $qb->addSelect("u.name AS unit");

        $qb->where("stock.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $this->handleWithSearch($qb,$data);
        $qb->orderBy('m.name','ASC');
        $qb->getQuery()->getArrayResult();
        return  $qb;

    }

    public function  getPreviousItemStock($inventory,$data)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:PurchaseItem','pi');
        $qb->join('pi.purchase', 'purchase');
        $qb->leftJoin('pi.item', 'item');
        $qb->leftJoin('item.masterItem','m');
        $qb->leftJoin('item.size', 's');
        $qb->leftJoin('item.color', 'c');
        $qb->leftJoin('item.brand', 'b');
        $qb->leftJoin('item.vendor', 'v');
        $qb->select('item.id  as itemId');
        $qb->addSelect('sum(pi.quantity)  as purchaseQuantity');
        $qb->where("purchase.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $this->handleSearchBetween($qb,$data);
        $qb->groupBy('item.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['itemId']] = $row['purchaseQuantity'];
        }
        return $data;
    }

    public function tillStockItem($mode,$inventory,$data)
    {

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.item', 'item');
        $qb->leftJoin('item.masterItem', 'm');
        $qb->leftJoin('m.productUnit', 'u');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->addSelect('item.id AS itemId');
        $qb->where("stock.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        if($mode == 'previous'){
            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('purchase','salesReturn','sales','damage','purchaseReturn','online','onlineReturn')));

            $tillDate = !empty($data['tillDate']) ? date('Y-m-d',strtotime($data['tillDate'])) : date('Y-m-d');

            if (!empty($tillDate) ) {
                $qb->andWhere("stock.created < :created");
                $qb->setParameter('created', $tillDate.' 00:00:00');
            }
        }
        if($mode == 'purchase'){

            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('purchase','salesReturn','onlineReturn')));
            $tillDate = !empty($data['tillDate']) ? date('Y-m-d',strtotime($data['tillDate'])) : date('Y-m-d');
            if (!empty($tillDate) ) {
                $qb->andWhere("stock.created >= :startDate");
                $qb->setParameter('startDate', $tillDate.' 00:00:00');
                $qb->andWhere("stock.created <= :endDate");
                $qb->setParameter('endDate', $tillDate.' 23:59:59');
            }
        }

        if($mode == 'sales'){

            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('sales','damage','purchaseReturn','online')));
            $tillDate = !empty($data['tillDate']) ? date('Y-m-d',strtotime($data['tillDate'])) : date('Y-m-d');
            if (!empty($tillDate) ) {
                $qb->andWhere("stock.created >= :startDate");
                $qb->setParameter('startDate', $tillDate.' 00:00:00');
                $qb->andWhere("stock.created <= :endDate");
                $qb->setParameter('endDate', $tillDate.' 23:59:59');
            }
        }

        $this->handleWithSearch($qb,$data);
        $qb->groupBy('item.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['itemId']] = $row['quantity'];
        }
        return $data;

    }

    public function periodicStockItem($mode,$inventory,$data)
    {
        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.item', 'item');
        $qb->leftJoin('item.masterItem', 'm');
        $qb->leftJoin('m.productUnit', 'u');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->addSelect('item.id AS itemId');
        $qb->where("stock.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);

        if($mode == 'previous'){
            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('purchase','salesReturn','sales','damage','purchaseReturn','online','onlineReturn')));
            $tillDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
            if (!empty($tillDate) ) {
                $qb->andWhere("stock.created < :created");
                $qb->setParameter('created', $tillDate.' 00:00:00');
            }
        }

        if($mode == 'purchase'){

            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('purchase','salesReturn','onlineReturn')));
            $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
            $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : date('Y-m-d');

            if (!empty($startDate) ) {
                $qb->andWhere("stock.created > :startDate");
                $qb->setParameter('startDate', $startDate.' 00:00:00');
                $qb->andWhere("stock.created < :endDate");
                $qb->setParameter('endDate', $endDate.' 23:59:59');
            }
        }

        if($mode == 'sales'){

            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('sales','damage','purchaseReturn','online')));
            $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
            $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : date('Y-m-d');
            if (!empty($startDate) ) {
                $qb->andWhere("stock.created >= :startDate");
                $qb->setParameter('startDate', $startDate.' 00:00:00');
                $qb->andWhere("stock.created <= :endDate");
                $qb->setParameter('endDate', $endDate.' 23:59:59');
            }
        }

        $this->handleWithSearch($qb,$data);
        $qb->groupBy('item.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['itemId']] = $row['quantity'];
        }
        return $data;

    }

    public function operationalStockItem($inventory,$data)
    {
        $mode = isset($data['mode'])? $data['mode'] :'';

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.item', 'item');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->addSelect('item.id AS itemId');
        $qb->where("stock.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);

        if(!empty($mode)){
            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array($mode)));
        }
        $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : '';
        $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : '';
        if (!empty($startDate and !empty($endDate)) ) {
            $qb->andWhere("stock.created >= :startDate");
            $qb->setParameter('startDate', $startDate.' 00:00:00');
            $qb->andWhere("stock.created <= :endDate");
            $qb->setParameter('endDate', $endDate.' 23:59:59');
        }
        $this->handleWithSearch($qb,$data);
        $qb->groupBy('item.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['itemId']] = $row['quantity'];
        }
        return $data;

    }

    public function stockGroupItemName($inventory,$data)
    {
        $group = isset($data['group'])? $data['group'] :'masterItem';

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.item', 'item');
        $qb->join('item.'.$group, 'e');
        $qb->select("e.name AS name");
        $qb->addSelect('e.id AS itemId');
        $qb->where("stock.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $this->handleWithSearch($qb,$data);
        $qb->groupBy('item.'.$group);
        $qb->orderBy('e.name','ASC');
        $qb->getQuery()->getArrayResult();
        return  $qb;

    }

    public function groupStockItem($mode,$inventory,$data)
    {
        $group = isset($data['group'])? $data['group'] :'masterItem';

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.item', 'item');
        $qb->join('item.'.$group, 'e');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->addSelect('e.id AS itemId');
        $qb->where("stock.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);

        if($mode == 'previous'){
            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('purchase','salesReturn','sales','damage','purchaseReturn','online','onlineReturn')));
            $tillDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
            if (!empty($tillDate) ) {
                $qb->andWhere("stock.created < :created");
                $qb->setParameter('created', $tillDate.' 00:00:00');
            }
        }

        if(!empty($mode) and  $mode != 'previous'){

            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array($mode)));
            $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
            $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : date('Y-m-d');

            if (!empty($startDate) ) {
                $qb->andWhere("stock.created > :startDate");
                $qb->setParameter('startDate', $startDate.' 00:00:00');
                $qb->andWhere("stock.created < :endDate");
                $qb->setParameter('endDate', $endDate.' 23:59:59');
            }
        }
       // $this->handleWithSearch($qb,$data);
        $qb->groupBy('item.'.$group);
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['itemId']] = $row['quantity'];
        }
        return $data;


    }


    public function getGroupStock($inventory,$group)
    {

        $vendor         = $group == 'vendor' ? $group :'';
        $masterItem     = $group == 'product' ? $group :'';
        $brand          = $group == 'brand' ? $group :'';
        $color          = $group == 'color' ? $group :'';
        $size           = $group == 'size' ? $group :'';
        $category       = $group == 'category' ? $group :'';


        $qb = $this->createQueryBuilder('e');
        $qb->join('e.item','item');
        $qb->select('e.item AS itemId');
        $qb->addSelect('SUM(e.quantity) AS quantity');

        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);

        if (!empty($masterItem)) {
            $qb->addSelect('m.name AS masterItem');
            $qb->leftJoin('item.masterItem', 'm');
            $qb->groupBy('item.masterItem');
            $qb->orderBy('m.name','ASC');
        }
        if (!empty($brand)) {
            $qb->addSelect('b.name AS brand');
            $qb->join('item.brand', 'b');
            $qb->groupBy('item.brand');
            $qb->orderBy('b.name','ASC');
        }
        if (!empty($color)) {
            $qb->addSelect('c.name AS color');
            $qb->addSelect('s.name AS size');
            $qb->join('item.size', 's');
            $qb->join('item.color', 'c');
            $qb->groupBy('item.color');
            $qb->orderBy('c.name','ASC');
        }
        if (!empty($size)) {
            $qb->addSelect('s.name AS size');
            $qb->join('item.size', 's');
            $qb->groupBy('item.size');
            $qb->orderBy('s.name','ASC');
        }
        if (!empty($vendor)) {
            $qb->addSelect('v.companyName AS vendor');
            $qb->addSelect('v.mobile AS mobile');
            $qb->join('item.vendor', 'v');
            $qb->groupBy('item.vendor');
            $qb->orderBy('v.companyName','ASC');
        }
        if (!empty($category)) {
            $qb->addSelect('cat.name AS category');
            $qb->join('item.masterItem', 'm');
            $qb->join('m.category','cat');
            $qb->groupBy("m.category");
            $qb->orderBy('cat.name','ASC');
        }
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }





    public function getProcessStock($inventory,$data)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.item','item');
        $qb->join('e.purchaseItem', 'pi');
        $qb->join('item.masterItem','m');
        $qb->leftJoin('item.size', 's');
        $qb->leftJoin('item.color', 'c');
        $qb->leftJoin('item.brand', 'b');
        $qb->leftJoin('item.vendor', 'v');
        $qb->select('item.id AS itemId');
        $qb->addselect('m.name AS masterItem');
        $qb->addselect('s.name AS size');
        $qb->addselect('c.name AS color');
        $qb->addselect('v.name AS vendor');
        $qb->addselect('b.name AS brand');
        $qb->addSelect('SUM(e.quantity) AS remainingQuantity');
        $qb->addSelect('SUM(e.quantity * pi.purchasePrice) AS purchasePrice');
        $qb->addSelect('SUM(e.quantity * pi.salesPrice) AS salesPrice');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->groupBy('item.id');
        $this->handleSearchBetween($qb,$data);
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }


    public function  getGroupPurchaseItemStock($inventory,$data)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:PurchaseItem','pi');
        $qb->join('pi.purchase', 'purchase');
        $qb->leftJoin('pi.item', 'item');
        $qb->leftJoin('item.masterItem','m');
        $qb->leftJoin('item.size', 's');
        $qb->leftJoin('item.color', 'c');
        $qb->leftJoin('item.brand', 'b');
        $qb->leftJoin('item.vendor', 'v');
        $qb->select('item.id  as itemId');
        $qb->addSelect('sum(pi.quantity)  as purchaseQuantity');
        $qb->where("purchase.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $this->handleSearchBetween($qb,$data);
        $qb->groupBy('item.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['itemId']] = $row['purchaseQuantity'];
        }
        return $data;
    }


    public function getSizeStock($inventory,$data)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:PurchaseItem','pi');
        $qb->join('pi.stockItem','e');
        $qb->join('pi.purchase','p');
        $qb->join('pi.item','item');
        $qb->join('item.masterItem','m');
        $qb->join('item.size', 's');
        $qb->leftJoin('item.color', 'c');
        $qb->leftJoin('item.brand', 'b');
        $qb->join('item.vendor', 'v');
        $qb->select('m.name AS masterItem');
        $qb->addselect('p.grn AS grn');
        $qb->addselect('p.updated AS created');
        $qb->addselect('s.name AS size');
        $qb->addselect('c.name AS color');
        $qb->addselect('v.companyName AS vendor');
        $qb->addselect('b.name AS brand');
        $qb->addSelect('SUM(pi.quantity) AS purchaseQuantity');
        $qb->addSelect('SUM(e.quantity) AS remainingQuantity');
        $qb->addSelect('SUM(e.quantity * pi.purchasePrice) AS purchasePrice');
        $qb->addSelect('SUM(e.quantity * pi.salesPrice) AS salesPrice');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->groupBy('item.id');
        $qb->groupBy('pi.purchase');
        $this->handleSearchBetween($qb,$data);
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }



    public function getItemBaseStock($inventory)
    {

        $process    = isset($data['process'])? $data['process'] :'purchase';
        $startDate  = isset($data['startDate'])? $data['startDate'] :'';
        $endDate    = isset($data['endDate'])? $data['endDate'] :'';

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.item','item');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("e.process = :process");
        $qb->setParameter('process', $process);
        if (!empty($startDate)) {
            $qb->andWhere("e.created = :created");
            $qb->setParameter('created', $startDate);
        }
        if (!empty($endDate)) {
            $qb->andWhere("e.created = :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        $qb->groupBy('e.item');
        $qb->getQuery();
        return  $qb;


    }

    public function insertPurchaseStockItem($purchase){

        $em = $this->_em;
        foreach($purchase->getPurchaseItems() as $purchaseItem ) {

            $entity = new StockItem();
            $entity->setInventoryConfig($purchase->getInventoryConfig());
            $entity->setPurchaseItem($purchaseItem);
            $entity->setItem($purchaseItem->getItem());
            $entity->setQuantity($purchaseItem->getQuantity());
            $entity->setCreatedBy($purchaseItem->getPurchase()->getCreatedBy());
            $entity->setProduct($purchaseItem->getItem()->getMasterItem());
            $entity->setProductName($purchaseItem->getItem()->getMasterItem()->getName());
            $entity->setVendor($purchaseItem->getPurchase()->getVendor());
            $entity->setVendorName($purchaseItem->getPurchase()->getVendor()->getName());

            if(!empty($purchaseItem->getItem()->getMasterItem()->getCategory())){
                $entity->setCategory($purchaseItem->getItem()->getMasterItem()->getCategory());
                $entity->setCategoryName($purchaseItem->getItem()->getMasterItem()->getCategory()->getName());
            }

            if(!empty($purchaseItem->getItem()->getMasterItem()->getProductUnit())) {
                $entity->setUnit($purchaseItem->getItem()->getMasterItem()->getProductUnit());
                $entity->setUnitName($purchaseItem->getItem()->getMasterItem()->getProductUnit()->getName());
            }

            if(!empty($purchaseItem->getPurchaseVendorItem()->getBrand())) {
                $entity->setBrand($purchaseItem->getPurchaseVendorItem()->getBrand());
                $entity->setBrandName($purchaseItem->getPurchaseVendorItem()->getBrand()->getName());
            }


            if(!empty($purchaseItem->getItem()->getSize())){
                $entity->setSize($purchaseItem->getItem()->getSize());
                $entity->setSizeName($purchaseItem->getItem()->getSize()->getName());
            }

            if(!empty($purchaseItem->getItem()->getColor())){
                $entity->setColor($purchaseItem->getItem()->getColor());
                $entity->setColorName($purchaseItem->getItem()->getColor()->getName());
            }

            $entity->setProcess('purchase');
            $em->persist($entity);
        }
        $em->flush();

    }

    public function insertPurchaseReturnStockItem($purchaseReturn){

        $em = $this->_em;
        foreach($purchaseReturn->getPurchaseReturnItems() as $purchaseReturnItem ){

            $entity = new StockItem();
            $entity->setInventoryConfig($purchaseReturn->getInventoryConfig());
            $entity->setPurchaseItem($purchaseReturnItem->getPurchaseItem());
            $entity->setPurchaseReturnItem($purchaseReturnItem);
            $entity->setItem($purchaseReturnItem->getPurchaseItem()->getItem());
            $entity->setQuantity('-'.$purchaseReturnItem->getQuantity());
            $entity->setCreatedBy($purchaseReturn->getCreatedBy());

            $purchaseItem = $purchaseReturnItem->getPurchaseItem();
            $entity->setProduct($purchaseItem->getItem()->getMasterItem());
            $entity->setProductName($purchaseItem->getItem()->getMasterItem()->getName());
            $entity->setVendor($purchaseItem->getPurchase()->getVendor());
            $entity->setVendorName($purchaseItem->getPurchase()->getVendor()->getName());

            if(!empty($purchaseItem->getItem()->getMasterItem()->getCategory())){
                $entity->setCategory($purchaseItem->getItem()->getMasterItem()->getCategory());
                $entity->setCategoryName($purchaseItem->getItem()->getMasterItem()->getCategory()->getName());
            }

            if(!empty($purchaseItem->getItem()->getMasterItem()->getProductUnit())) {
                $entity->setUnit($purchaseItem->getItem()->getMasterItem()->getProductUnit());
                $entity->setUnitName($purchaseItem->getItem()->getMasterItem()->getProductUnit()->getName());
            }

            if(!empty($purchaseItem->getPurchaseVendorItem()->getBrand())) {
                $entity->setBrand($purchaseItem->getPurchaseVendorItem()->getBrand());
                $entity->setBrandName($purchaseItem->getPurchaseVendorItem()->getBrand()->getName());
            }


            if(!empty($purchaseItem->getItem()->getSize())){
                $entity->setSize($purchaseItem->getItem()->getSize());
                $entity->setSizeName($purchaseItem->getItem()->getSize()->getName());
            }

            if(!empty($purchaseItem->getItem()->getColor())){
                $entity->setColor($purchaseItem->getItem()->getColor());
                $entity->setColorName($purchaseItem->getItem()->getColor()->getName());
            }
            $entity->setProcess('purchaseReturn');
            $em->persist($entity);
        }
        $em->flush();

    }

    public function insertPurchaseReturnReplaceStockItem($purchaseReturn,$purchaseReturnItem,$curQuantity = 0){

        $em = $this->_em;

            $entity = new StockItem();
            $entity->setInventoryConfig($purchaseReturn->getInventoryConfig());
            $entity->setPurchaseItem($purchaseReturnItem->getPurchaseItem());
            $entity->setPurchaseReplaceItem($purchaseReturnItem);
            $entity->setItem($purchaseReturnItem->getPurchaseItem()->getItem());
            $entity->setQuantity($curQuantity);
            $entity->setCreatedBy($purchaseReturn->getCreatedBy());
            $entity->setProcess('purchaseReturnReplace');
            $em->persist($entity);
            $em->flush();

    }

    public function insertSalesStockItem($sales){

        $em = $this->_em;
        foreach ($sales->getSalesItems() as $row ){
            $entity = new StockItem();
            $entity->setInventoryConfig($sales->getInventoryConfig());
            $entity->setSalesItem($row);
            $entity->setPurchaseItem($row->getPurchaseItem());
            $entity->setItem($row->getItem());
            $quantity = '-'.$row->getQuantity();
            $entity->setQuantity($quantity);
            $entity->setCreatedBy($sales->getCreatedBy());

            $purchaseItem = $row->getPurchaseItem();

            $entity->setProduct($purchaseItem->getItem()->getMasterItem());
            $entity->setProductName($purchaseItem->getItem()->getMasterItem()->getName());
            $entity->setVendor($purchaseItem->getPurchase()->getVendor());
            $entity->setVendorName($purchaseItem->getPurchase()->getVendor()->getName());

            if(!empty($purchaseItem->getItem()->getMasterItem()->getCategory())){
                $entity->setCategory($purchaseItem->getItem()->getMasterItem()->getCategory());
                $entity->setCategoryName($purchaseItem->getItem()->getMasterItem()->getCategory()->getName());
            }

            if(!empty($purchaseItem->getItem()->getMasterItem()->getProductUnit())) {
                $entity->setUnit($purchaseItem->getItem()->getMasterItem()->getProductUnit());
                $entity->setUnitName($purchaseItem->getItem()->getMasterItem()->getProductUnit()->getName());
            }

            if(!empty($purchaseItem->getPurchaseVendorItem()->getBrand())) {
                $entity->setBrand($purchaseItem->getPurchaseVendorItem()->getBrand());
                $entity->setBrandName($purchaseItem->getPurchaseVendorItem()->getBrand()->getName());
            }

            if(!empty($purchaseItem->getItem()->getSize())){
                $entity->setSize($purchaseItem->getItem()->getSize());
                $entity->setSizeName($purchaseItem->getItem()->getSize()->getName());
            }

            if(!empty($purchaseItem->getItem()->getColor())){
                $entity->setColor($purchaseItem->getItem()->getColor());
                $entity->setColorName($purchaseItem->getItem()->getColor()->getName());
            }

            $entity->setProcess('sales');
            $em->persist($entity);
        }

        $em->flush();

    }

    public function insertSalesReturnStockItem(SalesReturn $salesReturn){

        $em = $this->_em;
        foreach ($salesReturn ->getSalesReturnItems() as $row ){
            $entity = new StockItem();
            $entity->setInventoryConfig($salesReturn->getInventoryConfig());
            $entity->setPurchaseItem($row->getSalesItem()->getPurchaseItem());
            $entity->setSalesReturnItem($row);
            $entity->setItem($row->getSalesItem()->getItem());
            $quantity = $row->getQuantity();
            $entity->setQuantity($quantity);
            $entity->setCreatedBy($salesReturn->getCreatedBy());

            $purchaseItem = $row->getSalesItem()->getPurchaseItem();

            $entity->setProduct($purchaseItem->getItem()->getMasterItem());
            $entity->setProductName($purchaseItem->getItem()->getMasterItem()->getName());
            $entity->setVendor($purchaseItem->getPurchase()->getVendor());
            $entity->setVendorName($purchaseItem->getPurchase()->getVendor()->getName());

            if(!empty($purchaseItem->getItem()->getMasterItem()->getCategory())){
                $entity->setCategory($purchaseItem->getItem()->getMasterItem()->getCategory());
                $entity->setCategoryName($purchaseItem->getItem()->getMasterItem()->getCategory()->getName());
            }

            if(!empty($purchaseItem->getItem()->getMasterItem()->getProductUnit())) {
                $entity->setUnit($purchaseItem->getItem()->getMasterItem()->getProductUnit());
                $entity->setUnitName($purchaseItem->getItem()->getMasterItem()->getProductUnit()->getName());
            }

            if(!empty($purchaseItem->getPurchaseVendorItem()->getBrand())) {
                $entity->setBrand($purchaseItem->getPurchaseVendorItem()->getBrand());
                $entity->setBrandName($purchaseItem->getPurchaseVendorItem()->getBrand()->getName());
            }

            if(!empty($purchaseItem->getItem()->getSize())){
                $entity->setSize($purchaseItem->getItem()->getSize());
                $entity->setSizeName($purchaseItem->getItem()->getSize()->getName());
            }

            if(!empty($purchaseItem->getItem()->getColor())){
                $entity->setColor($purchaseItem->getItem()->getColor());
                $entity->setColorName($purchaseItem->getItem()->getColor()->getName());
            }

            $entity->setProcess('salesReturn');
            $em->persist($entity);
        }

        $em->flush();

    }

    public function insertDamageItem(Damage $damage){

            $em = $this->_em;
            $entity = new StockItem();
            $entity->setInventoryConfig($damage->getInventoryConfig());
            $entity->setPurchaseItem($damage->getPurchaseItem());
            $entity->setDamage($damage);
            $entity->setItem($damage->getItem());
            $quantity = $damage->getQuantity();
            $entity->setQuantity('-'.$quantity);
            $entity->setCreatedBy($damage->getCreatedBy());

            $purchaseItem = $damage->getPurchaseItem();

            $entity->setProduct($purchaseItem->getItem()->getMasterItem());
            $entity->setProductName($purchaseItem->getItem()->getMasterItem()->getName());
            $entity->setVendor($purchaseItem->getPurchase()->getVendor());
            $entity->setVendorName($purchaseItem->getPurchase()->getVendor()->getName());

            if(!empty($purchaseItem->getItem()->getMasterItem()->getCategory())){
                $entity->setCategory($purchaseItem->getItem()->getMasterItem()->getCategory());
                $entity->setCategoryName($purchaseItem->getItem()->getMasterItem()->getCategory()->getName());
            }

            if(!empty($purchaseItem->getItem()->getMasterItem()->getProductUnit())) {
                $entity->setUnit($purchaseItem->getItem()->getMasterItem()->getProductUnit());
                $entity->setUnitName($purchaseItem->getItem()->getMasterItem()->getProductUnit()->getName());
            }

            if(!empty($purchaseItem->getPurchaseVendorItem()->getBrand())) {
                $entity->setBrand($purchaseItem->getPurchaseVendorItem()->getBrand());
                $entity->setBrandName($purchaseItem->getPurchaseVendorItem()->getBrand()->getName());
            }

            if(!empty($purchaseItem->getItem()->getSize())){
                $entity->setSize($purchaseItem->getItem()->getSize());
                $entity->setSizeName($purchaseItem->getItem()->getSize()->getName());
            }

            if(!empty($purchaseItem->getItem()->getColor())){
                $entity->setColor($purchaseItem->getItem()->getColor());
                $entity->setColorName($purchaseItem->getItem()->getColor()->getName());
            }
            $entity->setProcess('damage');
            $em->persist($entity);
            $em->flush();

    }

    public function insertOnlineOrder(Order $order){

        $em = $this->_em;
        foreach ($order ->getOrderItems() as $orderItem ) {
            $entity = new StockItem();
            $entity->setInventoryConfig($orderItem->getPurchaseItem()->getPurchase()->getInventoryConfig());
            $entity->setPurchaseItem($orderItem->getPurchaseItem());
            $entity->setOrderItem($orderItem);
            $entity->setItem($orderItem->getPurchaseItem()->getItem());
            $quantity = $orderItem->getQuantity();
            $entity->setQuantity('-' . $quantity);
            $entity->setCreatedBy($orderItem->getOrder()->getCreatedBy());

            $purchaseItem = $orderItem->getPurchaseItem();

            $entity->setProduct($purchaseItem->getItem()->getMasterItem());
            $entity->setProductName($purchaseItem->getItem()->getMasterItem()->getName());
            $entity->setVendor($purchaseItem->getPurchase()->getVendor());
            $entity->setVendorName($purchaseItem->getPurchase()->getVendor()->getName());

            if(!empty($purchaseItem->getItem()->getMasterItem()->getCategory())){
                $entity->setCategory($purchaseItem->getItem()->getMasterItem()->getCategory());
                $entity->setCategoryName($purchaseItem->getItem()->getMasterItem()->getCategory()->getName());
            }

            if(!empty($purchaseItem->getItem()->getMasterItem()->getProductUnit())) {
                $entity->setUnit($purchaseItem->getItem()->getMasterItem()->getProductUnit());
                $entity->setUnitName($purchaseItem->getItem()->getMasterItem()->getProductUnit()->getName());
            }

            if(!empty($purchaseItem->getPurchaseVendorItem()->getBrand())) {
                $entity->setBrand($purchaseItem->getPurchaseVendorItem()->getBrand());
                $entity->setBrandName($purchaseItem->getPurchaseVendorItem()->getBrand()->getName());
            }

            if(!empty($purchaseItem->getItem()->getSize())){
                $entity->setSize($purchaseItem->getItem()->getSize());
                $entity->setSizeName($purchaseItem->getItem()->getSize()->getName());
            }

            if(!empty($purchaseItem->getItem()->getColor())){
                $entity->setColor($purchaseItem->getItem()->getColor());
                $entity->setColorName($purchaseItem->getItem()->getColor()->getName());
            }

            $entity->setProcess('online');
            $em->persist($entity);
            $em->flush();
        }

    }

    public function insertOnlineOrderItemReturn(OrderItem $entity){

        $em = $this->_em;
        $entity = new StockItem();
        $entity->setInventoryConfig($entity->getInventoryConfig());
        $entity->setPurchaseItem($entity->getPurchaseItem());
        $entity->setDamage($entity);
        $entity->setItem($entity->getItem());
        $quantity = $entity->getQuantity();
        $entity->setQuantity('-'.$quantity);
        $entity->setCreatedBy($entity->getCreatedBy());
        $entity->setProcess('onlineReturn');

        $purchaseItem = $entity->getPurchaseItem();

        $entity->setProduct($purchaseItem->getItem()->getMasterItem());
        $entity->setProductName($purchaseItem->getItem()->getMasterItem()->getName());
        $entity->setVendor($purchaseItem->getPurchase()->getVendor());
        $entity->setVendorName($purchaseItem->getPurchase()->getVendor()->getName());

        if(!empty($purchaseItem->getItem()->getMasterItem()->getCategory())){
            $entity->setCategory($purchaseItem->getItem()->getMasterItem()->getCategory());
            $entity->setCategoryName($purchaseItem->getItem()->getMasterItem()->getCategory()->getName());
        }

        if(!empty($purchaseItem->getItem()->getMasterItem()->getProductUnit())) {
            $entity->setUnit($purchaseItem->getItem()->getMasterItem()->getProductUnit());
            $entity->setUnitName($purchaseItem->getItem()->getMasterItem()->getProductUnit()->getName());
        }

        if(!empty($purchaseItem->getPurchaseVendorItem()->getBrand())) {
            $entity->setBrand($purchaseItem->getPurchaseVendorItem()->getBrand());
            $entity->setBrandName($purchaseItem->getPurchaseVendorItem()->getBrand()->getName());
        }

        if(!empty($purchaseItem->getItem()->getSize())){
            $entity->setSize($purchaseItem->getItem()->getSize());
            $entity->setSizeName($purchaseItem->getItem()->getSize()->getName());
        }

        if(!empty($purchaseItem->getItem()->getColor())){
            $entity->setColor($purchaseItem->getItem()->getColor());
            $entity->setColorName($purchaseItem->getItem()->getColor()->getName());
        }
        $em->persist($entity);
        $em->flush();

    }



    public  function getStockOverview($inventory,$data=''){

        $purchase = $this->getSumStock($inventory,'purchase',$data);
        $purchaseReturn = $this->getSumStock($inventory,'purchaseReturn',$data);
        $purchaseReplace = $this->getSumStock($inventory,'purchaseReplace',$data);
        $sales = $this->getSumStock($inventory,'sales',$data);
        $salesReturn = $this->getSumStock($inventory,'salesReturn',$data);
        $damage = $this->getSumStock($inventory,'damage',$data);

        $remaining = (($purchase + $salesReturn ) + ($purchaseReturn + $sales + $damage ));
        $data = array(
            'purchase'=>        $purchase,
            'purchaseReturn'=>  $purchaseReturn,
            'purchaseReplace'=> $purchaseReplace,
            'sales'=>           $sales,
            'salesReturn'=>     $salesReturn,
            'damage'=>          $damage,
            'remaining'=>       $remaining
        );
        return $data;

    }

    private function getSumStock($inventory,$process='',$data)
    {
        $item = isset($data['item'])? $data['item'] :'';
        $color = isset($data['color'])? $data['color'] :'';
        $size = isset($data['size'])? $data['size'] :'';
        $vendor = isset($data['vendor'])? $data['vendor'] :'';

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.item','item');
        $qb->select('SUM(e.quantity) AS quantity ');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("e.process = :process");
        $qb->setParameter('process', $process);
        if (!empty($item)) {

            $qb->join('item.masterItem', 'm');
            $qb->andWhere("m.name = :name");
            $qb->setParameter('name', $item);
        }
        if (!empty($color)) {

            $qb->join('item.color', 'c');
            $qb->andWhere("c.name = :color");
            $qb->setParameter('color', $color);
        }
        if (!empty($size)) {

            $qb->join('item.size', 's');
            $qb->andWhere("s.name = :size");
            $qb->setParameter('size', $size);
        }
        if (!empty($vendor)) {
            $qb->join('item.vendor', 'v');
            $qb->andWhere("v.companyName = :vendor");
            $qb->setParameter('vendor', $vendor);
        }
        $result = $qb->getQuery()->getSingleScalarResult();
        return $result;
    }



}
