<?php

namespace Appstore\Bundle\InventoryBundle\Repository;
use Appstore\Bundle\InventoryBundle\Entity\Damage;
use Appstore\Bundle\InventoryBundle\Entity\SalesReturn;
use Appstore\Bundle\InventoryBundle\Entity\StockItem;
use Doctrine\ORM\EntityRepository;

/**
 * ItemStockRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StockItemRepository extends EntityRepository
{

    public function getItemBaseStock($inventory)
    {

        $process    = isset($data['process'])? $data['process'] :'purchase';
        $startDate  = isset($data['startDate'])? $data['startDate'] :'';
        $endDate    = isset($data['endDate'])? $data['endDate'] :'';

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.item','item');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("e.process = :process");
        $qb->setParameter('process', $process);
        if (!empty($startDate)) {
            $qb->andWhere("e.created = :created");
            $qb->setParameter('created', $startDate);
        }
        if (!empty($endDate)) {
            $qb->andWhere("e.created = :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        $qb->groupBy('e.item');
        $qb->getQuery();
        return  $qb;


    }

    public function insertPurchaseStockItem($purchase){

        $em = $this->_em;
        foreach($purchase->getPurchaseItems() as $purchaseItem ) {
            $entity = new StockItem();
            $entity->setInventoryConfig($purchase->getInventoryConfig());
            $entity->setPurchaseItem($purchaseItem);
            $entity->setItem($purchaseItem->getItem());
            $entity->setQuantity($purchaseItem->getQuantity());
            $entity->setCreatedBy($purchaseItem->getPurchase()->getCreatedBy());
            $entity->setProcess('purchase');
            $em->persist($entity);
        }
        $em->flush();

    }

    public function insertPurchaseReturnStockItem($purchaseReturn){

        $em = $this->_em;
        foreach($purchaseReturn->getPurchaseReturnItems() as $purchaseReturnItem ){
            $category = $purchaseReturnItem->getPurchaseItem()->getItem()->getMasterItem()->getCategory();
            $entity = new StockItem();
            $entity->setInventoryConfig($purchaseReturn->getInventoryConfig());
            $entity->setPurchaseItem($purchaseReturnItem->getPurchaseItem());
            $entity->setPurchaseReturnItem($purchaseReturnItem);
            $entity->setItem($purchaseReturnItem->getPurchaseItem()->getItem());
            $entity->setQuantity('-'.$purchaseReturnItem->getQuantity());
            $entity->setCreatedBy($purchaseReturn->getCreatedBy());
            if($category){
                $entity->setCategory($category);
            }
            $entity->setProcess('purchaseReturn');
            $em->persist($entity);
        }
        $em->flush();

    }

    public function insertPurchaseReturnReplaceStockItem($purchaseReturn,$purchaseReturnItem,$curQuantity = 0){

        $em = $this->_em;

            $entity = new StockItem();
            $entity->setInventoryConfig($purchaseReturn->getInventoryConfig());
            $entity->setPurchaseItem($purchaseReturnItem->getPurchaseItem());
            $entity->setPurchaseReplaceItem($purchaseReturnItem);
            $entity->setItem($purchaseReturnItem->getPurchaseItem()->getItem());
            $entity->setQuantity($curQuantity);
            $entity->setCreatedBy($purchaseReturn->getCreatedBy());
            $entity->setProcess('purchaseReturnReplace');
            $em->persist($entity);
            $em->flush();

    }

    public function insertSalesStockItem($sales){

        $em = $this->_em;
        foreach ($sales->getSalesItems() as $row ){
            $entity = new StockItem();
            $entity->setInventoryConfig($sales->getInventoryConfig());
            $entity->setSalesItem($row);
            $entity->setPurchaseItem($row->getPurchaseItem());
            $entity->setItem($row->getItem());
            $quantity = '-'.$row->getQuantity();
            $entity->setQuantity($quantity);
            $entity->setCreatedBy($sales->getSalesBy());
            $entity->setProcess('sales');
            $em->persist($entity);
        }

        $em->flush();

    }

    public function insertSalesReturnStockItem(SalesReturn $salesReturn){

        $em = $this->_em;
        foreach ($salesReturn ->getSalesReturnItems() as $row ){
            $entity = new StockItem();
            $entity->setInventoryConfig($salesReturn->getInventoryConfig());
            $entity->setPurchaseItem($row->getSalesItem()->getPurchaseItem());
            $entity->setSalesReturnItem($row);
            $entity->setItem($row->getSalesItem()->getItem());
            $quantity = $row->getQuantity();
            $entity->setQuantity($quantity);
            $entity->setCreatedBy($salesReturn->getCreatedBy());
            $entity->setProcess('salesReturn');
            $em->persist($entity);
        }

        $em->flush();

    }

    public function insertDamageItem(Damage $damage){

            $em = $this->_em;
            $entity = new StockItem();
            $entity->setInventoryConfig($damage->getInventoryConfig());
            $entity->setPurchaseItem($damage->getPurchaseItem());
            $entity->setDamage($damage);
            $entity->setItem($damage->getItem());
            $quantity = $damage->getQuantity();
            $entity->setQuantity('-'.$quantity);
            $entity->setCreatedBy($damage->getCreatedBy());
            $entity->setProcess('damage');
            $em->persist($entity);
            $em->flush();

    }



    public  function getStockOverview($inventory,$data=''){

        $purchase = $this->getSumStock($inventory,'purchase',$data);
        $purchaseReturn = $this->getSumStock($inventory,'purchaseReturn',$data);
        $purchaseReplace = $this->getSumStock($inventory,'purchaseReplace',$data);
        $sales = $this->getSumStock($inventory,'sales',$data);
        $salesReturn = $this->getSumStock($inventory,'salesReturn',$data);
        $damage = $this->getSumStock($inventory,'damage',$data);

        $remaining = (($purchase + $salesReturn + $purchaseReplace ) + ($purchaseReturn + $sales + $damage ));
        $data = array(
            'purchase'=>$purchase,
            'purchaseReturn'=>$purchaseReturn,
            'purchaseReplace'=>$purchaseReplace,
            'sales'=>$sales,
            'salesReturn'=>$salesReturn,
            'damage'=>$damage,
            'remaining'=> $remaining
        );
        return $data;

    }

    private function getSumStock($inventory,$process='',$data)
    {
        $item = isset($data['item'])? $data['item'] :'';
        $color = isset($data['color'])? $data['color'] :'';
        $size = isset($data['size'])? $data['size'] :'';
        $vendor = isset($data['vendor'])? $data['vendor'] :'';

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.item','item');
        $qb->select('SUM(e.quantity) AS quantity ');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("e.process = :process");
        $qb->setParameter('process', $process);
        if (!empty($item)) {

            $qb->join('item.masterItem', 'm');
            $qb->andWhere("m.name = :name");
            $qb->setParameter('name', $item);
        }
        if (!empty($color)) {

            $qb->join('item.color', 'c');
            $qb->andWhere("c.name = :color");
            $qb->setParameter('color', $color);
        }
        if (!empty($size)) {

            $qb->join('item.size', 's');
            $qb->andWhere("s.name = :size");
            $qb->setParameter('size', $size);
        }
        if (!empty($vendor)) {
            $qb->join('item.vendor', 'v');
            $qb->andWhere("v.companyName = :vendor");
            $qb->setParameter('vendor', $vendor);
        }
        $result = $qb->getQuery()->getSingleScalarResult();
        return $result;
    }



}
