<?php

namespace Appstore\Bundle\MedicineBundle\Repository;
use Appstore\Bundle\MedicineBundle\Entity\MedicinePurchase;
use Appstore\Bundle\MedicineBundle\Entity\MedicinePurchaseItem;
use Appstore\Bundle\MedicineBundle\Entity\MedicineParticular;
use Doctrine\ORM\EntityRepository;


/**
 * MedicinePurchaseItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MedicinePurchaseItemRepository extends EntityRepository
{

    public function getPurchaseAveragePrice(MedicineParticular $particular)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->from('MedicineBundle:MedicinePurchaseItem','e');
        $qb->select('AVG(e.purchasePrice) AS avgPurchasePrice');
        $qb->where('e.dmsParticular = :particular')->setParameter('particular', $particular) ;
        $res = $qb->getQuery()->getOneOrNullResult();
        if(!empty($res)){
            $particular->setPurchaseAverage($res['avgPurchasePrice']);
            $this->_em->persist($particular);
            $this->_em->flush($particular);
        }
    }

    public function insertPurchaseItems($invoice, $data)
    {
        $particular = $this->_em->getRepository('MedicineBundle:MedicineParticular')->find($data['particularId']);
        $em = $this->_em;
        $entity = new MedicinePurchaseItem();
        $entity->setMedicinePurchase($invoice);
        $entity->setMedicineParticular($particular);
        $entity->setSalesPrice($particular->getPrice());
        $entity->setPurchasePrice($particular->getPurchasePrice());
        $entity->setQuantity($data['quantity']);
        $entity->setPurchaseSubTotal($data['quantity'] * $particular->getPurchasePrice());
        $em->persist($entity);
        $em->flush();
        $this->getPurchaseAveragePrice($particular);

    }

    public function getPurchaseItems(MedicinePurchase $sales)
    {
        $entities = $sales->getPurchaseItems();
        $data = '';
        $i = 1;
        /* @var $entity MedicinePurchaseItem */

        foreach ($entities as $entity) {
            $data .= '<tr id="remove-'. $entity->getId().'">';
            $data .= '<td class="span1" >' . $i.'. '.$entity->getBarcode().'</td>';
            $data .= '<td class="span3" >' . $entity->getMedicineStock()->getName() . '</td>';
            $data .= '<td class="span1" >' . $entity->getExpirationDate()->format('d-m-Y') . '</td>';
            $data .= '<td class="span1" >' . $entity->getSalesPrice() . '</td>';
            $data .= '<td class="span1" >' . $entity->getPurchasePrice() . '</td>';
            $data .= '<td class="span1" >' . $entity->getQuantity() . '</td>';
            $data .= '<td class="span1" >' . $entity->getPurchaseSubTotal() . '</td>';
            $data .= '<td class="span1" >
                     <a id="'.$entity->getId(). '" title="Are you sure went to delete ?" data-url="/medicine/purchase/' . $sales->getId() . '/' . $entity->getId() . '/particular-delete" href="javascript:" class="btn red mini delete" ><i class="icon-trash"></i></a>
                     </td>';
            $data .= '</tr>';
            $i++;
        }
        return $data;
    }

    public function invoiceMedicineParticularLists($hospital,$data = array()){

        $invoice = isset($data['invoice'])? $data['invoice'] :'';
        $particular = isset($data['particular'])? $data['particular'] :'';
        $category = isset($data['category'])? $data['category'] :'';

        $qb = $this->createQueryBuilder('e');
        $qb->select('e');
        $qb->join('e.invoice','invoice');
        $qb->join('e.particular','particular');
        $qb->join('particular.category','category');
        $qb->where('particular.service = :service')->setParameter('service', 1) ;
        /*            $qb->andWhere('invoice.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
                    $qb->andWhere('particular.process IN(:process)');
                    $qb->setParameter('process',array_values(array('In-progress','Damage','Impossible')));
                    if (!empty($invoice)) {
                        $qb->andWhere($qb->expr()->like("invoice.invoice", "'%$invoice%'"  ));
                    }
                    if (!empty($particular)) {
                        $qb->andWhere('particular.name = :partName')->setParameter('partName', $particular) ;
                    }
                    if (!empty($category)) {
                        $qb->andWhere('category.name = :catName')->setParameter('catName', $category) ;
                    }*/
        $qb->orderBy('e.updated','DESC');
        $qb->getQuery();
        return  $qb;

    }
}
