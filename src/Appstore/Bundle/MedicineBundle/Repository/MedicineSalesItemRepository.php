<?php

namespace Appstore\Bundle\MedicineBundle\Repository;
use Appstore\Bundle\MedicineBundle\Entity\MedicineConfig;
use Appstore\Bundle\MedicineBundle\Entity\MedicinePurchaseItem;
use Appstore\Bundle\MedicineBundle\Entity\MedicineSales;
use Appstore\Bundle\MedicineBundle\Entity\MedicineSalesItem;
use Appstore\Bundle\MedicineBundle\Entity\MedicineSalesTemporary;
use Appstore\Bundle\MedicineBundle\Entity\MedicineStock;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;


/**
 * MedicineSalesItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MedicineSalesItemRepository extends EntityRepository
{

    public function salesStockItemUpdate(MedicineStock $stockItem)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.medicineStock = :stock')->setParameter('stock', $stockItem->getId());
        $qnt = $qb->getQuery()->getOneOrNullResult();
        return $qnt['quantity'];
    }

    public function salesPurchaseStockItemUpdate(MedicinePurchaseItem $item)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.medicinePurchaseItem = :purchaseItem')->setParameter('purchaseItem', $item->getId());
        $qb->andWhere('e.medicineStock = :medicineStock')->setParameter('medicineStock', $item->getMedicineStock()->getId());
        $qnt = $qb->getQuery()->getOneOrNullResult();
        return !empty($qnt['quantity']) ? $qnt['quantity'] : 0;
    }

    public function temporarySalesInsert(User $user, MedicineSales $sales)
    {
        $em = $this->_em;
        $entities = $user->getMedicineSalesTemporary();

        foreach ($entities as $item) {

	        /* @var  $item MedicineSalesTemporary */


	        	$entity = new MedicineSalesItem();
		        $entity->setMedicineSales( $sales );
		        $entity->setMedicineStock( $item->getMedicineStock() );
		        $entity->setQuantity( $item->getQuantity() );
		        $entity->setSalesPrice( $item->getSalesPrice() );
		        $entity->setSubTotal( $item->getSubTotal() );
	            $entity->setPurchasePrice( $item->getPurchasePrice() );
	            if(!empty($item->getMedicinePurchaseItem())) {
		            $entity->setMedicinePurchaseItem( $item->getMedicinePurchaseItem() );
		        }
		        if ( $sales->getDiscountType() == 'percentage' ) {
			        $entity->setDiscountPrice( $this->itemDiscountPrice( $sales, $item->getSalesPrice() ) );
		        } else {
			        $entity->setDiscountPrice( $item->getSalesPrice() );
		        }
		        $em->persist( $entity );
		        $em->flush();
	            if(!empty($item->getMedicinePurchaseItem())) {
		            $em->getRepository( 'MedicineBundle:MedicinePurchaseItem' )->updateRemovePurchaseItemQuantity( $item->getMedicinePurchaseItem(), 'sales' );
	            }
		        $em->getRepository( 'MedicineBundle:MedicineStock' )->updateRemovePurchaseQuantity( $item->getMedicineStock(), 'sales' );
            }

    }

    public function itemDiscountPrice(MedicineSales $sales,$price)
    {
        $discountPrice = $price;
        if($sales->getDiscountType() == 'percentage'){
            $discount = (($price * $sales->getDiscountCalculation())/100);
            $discountPrice = ($price - $discount);
        }
        return round($discountPrice,2);
    }


    public function insertInstantSalesItem(MedicineSales $sales,MedicinePurchaseItem $item,$data){

        $em = $this->_em;
        $entity = new MedicineSalesItem();
        $entity->setMedicineSales($sales);
        $entity->setMedicineStock($item->getMedicineStock());
        $entity->setMedicinePurchaseItem($item);
        $entity->setQuantity($data['salesQuantity']);
        $entity->setSalesPrice($item->getSalesPrice());
        $entity->setSubTotal($item->getSalesPrice() * $data['salesQuantity']);
        $entity->setPurchasePrice($item->getPurchasePrice());
        $entity->setDiscountPrice($this->itemDiscountPrice($sales,$item->getSalesPrice()));
        $em->persist($entity);
        $em->flush();
        $em->getRepository('MedicineBundle:MedicinePurchaseItem')->updateRemovePurchaseItemQuantity($item->getMedicinePurchaseItem(),'sales');
        $em->getRepository('MedicineBundle:MedicineStock')->updateRemovePurchaseQuantity($item->getMedicineStock(),'sales');

    }

	protected function handleSearchBetween($qb,$data)
	{

		$invoice = isset($data['invoice'])? $data['invoice'] :'';
		$transactionMethod = isset($data['transactionMethod'])? $data['transactionMethod'] :'';
		$salesBy = isset($data['salesBy'])? $data['salesBy'] :'';
		$process = isset($data['process'])? $data['process'] :'';
		$customer = isset($data['customer'])? $data['customer'] :'';
		$customerName = isset($data['customer'])? $data['customer'] :'';
		$customerMobile = isset($data['mobile'])? $data['mobile'] :'';
		$createdStart = isset($data['startDate'])? $data['startDate'] :'';
		$createdEnd = isset($data['endDate'])? $data['endDate'] :'';
		$medicineName = isset($data['medicineName'])? $data['medicineName'] :'';
		if (!empty($invoice)) {
			$qb->andWhere($qb->expr()->like("s.invoice", "'%$invoice%'"  ));
		}
		if (!empty($customerName)) {
			$qb->join('s.customer','c');
			$qb->andWhere($qb->expr()->like("c.name", "'$customerName%'"  ));
		}

		if (!empty($customerMobile)) {
			$qb->join('s.customer','c');
			$qb->andWhere($qb->expr()->like("c.mobile", "'%$customerMobile%'"  ));
		}

		if (!empty($customer)) {
			$qb->join('s.customer','c');
			$qb->andWhere($qb->expr()->like("c.mobile", "'%$customer%'"  ));
		}

		if (!empty($createdStart)) {
			$compareTo = new \DateTime($createdStart);
			$created =  $compareTo->format('Y-m-d 00:00:00');
			$qb->andWhere("s.created >= :createdStart");
			$qb->setParameter('createdStart', $created);
		}

		if (!empty($createdEnd)) {
			$compareTo = new \DateTime($createdEnd);
			$createdEnd =  $compareTo->format('Y-m-d 23:59:59');
			$qb->andWhere("s.created <= :createdEnd");
			$qb->setParameter('createdEnd', $createdEnd);
		}

		if(!empty($salesBy)){
			$qb->join("s.salesBy",'u');
			$qb->andWhere("u.username = :username");
			$qb->setParameter('username', $salesBy);
		}

		if(!empty($process)){
			$qb->andWhere("s.process = :process");
			$qb->setParameter('process', $process);
		}
		if(!empty($transactionMethod)){
			$qb->andWhere("s.transactionMethod = :method");
			$qb->setParameter('method', $transactionMethod);
		}
		if(!empty($medicineName)){
			$qb->join("si.medicineStock",'m');
			$qb->andWhere($qb->expr()->like("m.name", "'%$medicineName%'"  ));
		}


	}

    public function handleDateRangeFind($qb,$data)
    {
        if(empty($data)){
            $datetime = new \DateTime("now");
            $data['startDate'] = $datetime->format('Y-m-d 00:00:00');
            $data['endDate'] = $datetime->format('Y-m-d 23:59:59');
        }else{
            $data['startDate'] = date('Y-m-d',strtotime($data['startDate']));
            $data['endDate'] = date('Y-m-d',strtotime($data['endDate']));
        }

        if (!empty($data['startDate']) ) {
            $qb->andWhere("e.created >= :startDate");
            $qb->setParameter('startDate', $data['startDate'].' 00:00:00');
        }
        if (!empty($data['endDate'])) {
            $qb->andWhere("e.created <= :endDate");
            $qb->setParameter('endDate', $data['endDate'].' 23:59:59');
        }
    }

    public function salesItemLists(User $user, $data)
    {
        $userBranch = $user->getProfile()->getBranches();
        $config =  $user->getGlobalOption()->getMedicineConfig()->getId();

        $qb = $this->createQueryBuilder('si');
        $qb->join('si.medicineSales','s');
        $qb->where('s.medicineConfig = :config')->setParameter('config', $config) ;
        if ($userBranch){
            $qb->andWhere("s.branch = :branch");
            $qb->setParameter('branch', $userBranch);
        }
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('s.created','DESC');
        $qb->getQuery();
        return  $qb;
    }



    public function getSalesItems(MedicineSales $sales)
    {
        $entities = $sales->getMedicineSalesItems();
        $data = '';
        $i = 1;
        /* @var $entity MedicineSalesItem */
        foreach ($entities as $entity) {
            $data .= "<tr id='remove-{$entity->getId()}'>";
            $data .= "<td class='span1' >{$i}.</td>";
            $data .= "<td class='span4' >{$entity->getMedicineStock()->getName()}</td>";
            $data .= "<td class='span2' >{$entity->getSalesPrice()}</td>";
            $data .= "<td class='span1' >{$entity->getQuantity()}</td>";
            $data .= "<td class='span2' >{$entity->getSubTotal()}</td>";
            $data .= "<td class='span1' >";
            $data .= "<a id='{$entity->getId()}' data-id='{$entity->getId()}'  data-url='/medicine/sales/{$sales->getId()}/{$entity->getId()}/sales-item-delete' href='javascript:' class='btn red mini itemDelete' ><i class='icon-trash'></i></a>";
            $data .= "</td>";
            $data .= "</tr>";
            $i++;
        }
        return $data;
    }


    public function medicineInvoiceParticularReverse(Invoice $invoice)
    {

        $em = $this->_em;

        /** @var InvoiceMedicineParticular $item */

        foreach($invoice->getMedicineSalesItems() as $item ){

            /** @var MedicineParticular  $particular */

            $particular = $item->getMedicineParticular();
            if( $particular->getService()->getId() == 4 ){
                $qnt = ($particular->getSalesQuantity() - $item->getQuantity());
                $particular->setSalesQuantity($qnt);
                $em->persist($particular);
                $em->flush();
            }
        }

    }

    public function getLastCode($entity,$datetime)
    {

        $today_startdatetime = $datetime->format('Y-m-d 00:00:00');
        $today_enddatetime = $datetime->format('Y-m-d 23:59:59');


        $qb = $this->createQueryBuilder('ip');
        $qb
            ->select('MAX(ip.code)')
            ->join('ip.medicineInvoice','s')
            ->where('s.hospitalConfig = :hospital')
            ->andWhere('s.updated >= :today_startdatetime')
            ->andWhere('s.updated <= :today_enddatetime')
            ->setParameter('hospital', $entity->getMedicineConfig())
            ->setParameter('today_startdatetime', $today_startdatetime)
            ->setParameter('today_enddatetime', $today_enddatetime);
        $lastCode = $qb->getQuery()->getSingleScalarResult();

        if (empty($lastCode)) {
            return 0;
        }

        return $lastCode;
    }


    public function reportSalesAccessories(GlobalOption $option ,$data)
    {
        $startDate = isset($data['startDate'])  ? $data['startDate'] : '';
        $endDate =   isset($data['endDate'])  ? $data['endDate'] : '';
        $qb = $this->createQueryBuilder('ip');
        $qb->join('ip.particular','p');
        $qb->join('ip.medicineInvoice','i');
        $qb->select('SUM(ip.quantity * p.purchasePrice ) AS totalPurchaseAmount');
        $qb->where('i.hospitalConfig = :hospital');
        $qb->setParameter('hospital', $option->getMedicineConfig());
        $qb->andWhere("i.process IN (:process)");
        $qb->setParameter('process', array('Done','Paid','In-progress','Diagnostic','Admitted','Release','Death','Released','Dead'));
        if (!empty($data['startDate']) ) {
            $qb->andWhere("i.updated >= :startDate");
            $qb->setParameter('startDate', $startDate.' 00:00:00');
        }
        if (!empty($data['endDate'])) {
            $qb->andWhere("i.updated <= :endDate");
            $qb->setParameter('endDate', $endDate.' 23:59:59');
        }
        $res = $qb->getQuery()->getOneOrNullResult();
        return $res['totalPurchaseAmount'];

    }


    public function searchAutoComplete(MedicineConfig $config,$q)
    {
        $query = $this->createQueryBuilder('e');
        $query->join('e.medicineInvoice', 'i');
        $query->select('e.metaValue as id');
        $query->where($query->expr()->like("e.metaValue", "'$q%'"  ));
        $query->andWhere("i.medicineConfig = :config");
        $query->setParameter('config', $config->getId());
        $query->groupBy('e.metaValue');
        $query->orderBy('e.metaValue', 'ASC');
        $query->setMaxResults( '10' );
        return $query->getQuery()->getResult();
    }

    public function searchProcedureDiseasesComplete(MedicineConfig $config,$q)
    {
        $query = $this->createQueryBuilder('e');
        $query->join('e.medicineInvoice', 'i');
        $query->select('e.diseases as id');
        $query->where($query->expr()->like("e.diseases", "'$q%'"  ));
        $query->andWhere("i.medicineConfig = :config");
        $query->setParameter('config', $config->getId());
        $query->groupBy('e.diseases');
        $query->orderBy('e.diseases', 'ASC');
        $query->setMaxResults( '10' );
        return $query->getQuery()->getResult();
    }

    /* Sales Medicine item */

	public  function reportSalesStockItem(User $user, $data=''){

		$userBranch = $user->getProfile()->getBranches();
		$config =  $user->getGlobalOption()->getMedicineConfig()->getId();
		$group = isset($data['group']) ? $data['group'] :'medicineStock';

		$qb = $this->createQueryBuilder('si');
		$qb->join('si.medicineSales','s');
		$qb->join('si.medicineStock','mds');
		$qb->select('SUM(si.quantity) AS quantity');
		$qb->addSelect('SUM(si.quantity * si.discountPrice ) AS salesPrice');
		$qb->addSelect('SUM(si.quantity * si.purchasePrice ) AS purchasePrice');
		$qb->addSelect('mds.name AS name');
		$qb->addSelect('mds.sku AS sku');
		$qb->where('s.medicineConfig = :config');
		$qb->setParameter('config', $config);
		$qb->andWhere('s.process = :process');
		$qb->setParameter('process', 'Done');
		if($group == 'medicinePurchaseItem') {
			$qb->addSelect('item.barcode AS barcode');
		}
		$this->handleSearchStockBetween($qb,$data);
		if ($userBranch){
			$qb->andWhere("s.branches = :branch");
			$qb->setParameter('branch', $userBranch);
		}
		$qb->groupBy('si.'.$group);
		$qb->orderBy('mds.name','ASC');
		return $qb->getQuery()->getArrayResult();
	}

	protected function handleSearchStockBetween($qb,$data)
	{

		$createdStart = isset($data['startDate'])? $data['startDate'] :'';
		$createdEnd = isset($data['endDate'])? $data['endDate'] :'';
		$name = isset($data['name'])? $data['name'] :'';
		$sku = isset($data['sku'])? $data['sku'] :'';
		$brandName = isset($data['brandName'])? $data['brandName'] :'';

		if (!empty($name)) {
			$qb->andWhere($qb->expr()->like("mds.name", "'%$name%'"  ));
		}
		if (!empty($sku)) {
			$qb->andWhere($qb->expr()->like("mds.sku", "'%$sku%'"  ));
		}
		if (!empty($brandName)) {
			$qb->andWhere($qb->expr()->like("mds.brandName", "'%$brandName%'"  ));
		}

		if (!empty($createdStart)) {
			$compareTo = new \DateTime($createdStart);
			$created =  $compareTo->format('Y-m-d 00:00:00');
			$qb->andWhere("s.created >= :createdStart");
			$qb->setParameter('createdStart', $created);
		}

		if (!empty($createdEnd)) {
			$compareTo = new \DateTime($createdEnd);
			$createdEnd =  $compareTo->format('Y-m-d 23:59:59');
			$qb->andWhere("s.created <= :createdEnd");
			$qb->setParameter('createdEnd', $createdEnd);
		}

	}
}
