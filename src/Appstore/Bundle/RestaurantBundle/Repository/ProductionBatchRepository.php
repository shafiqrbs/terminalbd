<?php

namespace Appstore\Bundle\RestaurantBundle\Repository;
use Appstore\Bundle\RestaurantBundle\Entity\RestaurantConfig;
use Doctrine\ORM\EntityRepository;



/**
 * ProductionElementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductionBatchRepository extends EntityRepository
{

    protected function handleSearchBetween($qb,$data)
    {

        $invoice = isset($data['invoice'])? $data['invoice'] :'';
        $process = isset($data['process'])? $data['process'] :'';
        $startDate = isset($data['startDate'])? $data['startDate'] :'';
        $endDate = isset($data['endDate'])? $data['endDate'] :'';
        $transactionMethod = isset($data['transactionMethod'])? $data['transactionMethod'] :'';

        if (!empty($invoice)) {
            $qb->andWhere($qb->expr()->like("e.invoice", "'%$invoice%'"  ));
        }
        if (!empty($startDate) ) {
            $start = date('Y-m-d 00:00:00',strtotime($data['startDate']));
            $qb->andWhere("e.created >= :startDate")->setParameter('startDate', $start);
        }
        if (!empty($endDate)) {
            $end = date('Y-m-d 23:59:59',strtotime($data['endDate']));
            $qb->andWhere("e.created <= :endDate")->setParameter('endDate',$end);
        }
        if(!empty($process)){
            $qb->andWhere("e.process = :process")->setParameter('process', $process);
        }
        if(!empty($transactionMethod)){
            $qb->andWhere("e.transactionMethod = :transactionMethod")->setParameter('transactionMethod', $transactionMethod);
        }

    }

    public function handleDateRangeFind($qb,$data)
    {

        if(empty($data['startDate']) and empty($data['endDate'])){
            $datetime = new \DateTime("now");
            $data['startDate'] = $datetime->format('Y-m-d 00:00:00');
            $data['endDate'] = $datetime->format('Y-m-d 23:59:59');
        }else{
            $data['startDate'] = date('Y-m-d',strtotime($data['startDate']));
            $data['endDate'] = date('Y-m-d',strtotime($data['endDate']));
        }

        if (!empty($data['startDate']) ) {
            $qb->andWhere("e.created >= :startDate");
            $qb->setParameter('startDate', $data['startDate'].' 00:00:00');
        }

        if (!empty($data['endDate'])) {
            $qb->andWhere("e.created <= :endDate");
            $qb->setParameter('endDate', $data['endDate'].' 23:59:59');
        }
    }

    public function findWithSearch(RestaurantConfig $config,$data)
    {
        $config = $config->getId();

        $qb = $this->createQueryBuilder('e');
        $qb->where('e.restaurantConfig = :config')->setParameter('config', $config) ;
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.created','DESC');
        $qb->getQuery();
        return  $qb;
    }


    public function productionElementExpense(ProductionBatch $batch)
    {
        $em = $this->_em;


        /* @var $batchItem ProductionBatchItem */

        foreach ($batch->getBatchItems() as $batchItem){

            foreach ($batchItem->getProductionItem()->getElements() as $elm):
                $expense = new ProductionExpense();
                $exist = $this->findOneBy(array('productionItem' => $batchItem->getProductionItem(),'productionBatchItem' => $batchItem,'productionElement' => $elm));
                if($exist){ $expense = $exist; }
                $expense->setProductionItem($batchItem->getProductionItem());
                $expense->setProductionBatchItem($batchItem);
                $expense->setProductionElement($elm);
                $expense->setItem($elm->getMaterial());
                $quantity = ($elm->getQuantity() + $elm->getWastageQuantity());
                $expense->setQuantity($quantity  * $batchItem->getIssueQuantity());
                $expense->setPurchasePrice($elm->getPrice());
                $em->persist($expense);
                $em->flush();
                if($batch->getConfig()->getConsumptionMethod() == 'purachse-consumption'){
                    $em->getRepository('TerminalbdInventoryBundle:PurchaseItem')->rawMaterialConsumtion($expense);
                }else{
                    $em->getRepository('TerminalbdInventoryBundle:StockItem')->rawMaterialDirectConsumption($expense);
                }
            endforeach;
        }

    }

    public function productionReturnElementExpense(ProductionReceiveBatchItem $batch)
    {
        $em = $this->_em;

        $batchItem = $batch->getBatchItem();

        /* @var $batchItem ProductionReceiveBatchItem */

        foreach ($batchItem->getProductionItem()->getElements() as $elm):

            $expense = new ProductionExpense();
            $exist = $this->findOneBy(array('returnReceiveBatchItem'=> $batch, 'productionElement' => $elm, 'item' => $elm->getMaterial()));
            if($exist){ $expense = $exist; }
            $expense->setReturnReceiveBatchItem($batch);
            $expense->setProductionBatchItem($batch->getBatchItem());
            $expense->setProductionElement($elm);
            $expense->setItem($elm->getMaterial());
            $expense->setQuantity(0);
            $quantity = ($elm->getQuantity() + $elm->getWastageQuantity());
            $expense->setReturnQuantity($quantity * $batch->getReturnQuantity());
            $expense->setPurchasePrice($elm->getPrice());
            $em->persist($expense);
            $em->flush();
            if($batch->getBatchItem()->getBatch()->getConfig()->getConsumptionMethod() == 'purachse-consumption') {
                $em->getRepository('TerminalbdInventoryBundle:StockItem')->contructualProductionExpenBatchItemRetun($batch->getBatchItem(), $expense);
            }else{

                $em->createQuery("DELETE TerminalbdInventoryBundle:StockItem e WHERE e.productionExpenseReturn = '{$expense->getId()}'")->execute();
                $em->getRepository('TerminalbdInventoryBundle:StockItem')->contructualDirectProductionExpenBatchItemRetun($batch->getBatchItem(), $expense);
            }

        endforeach;
    }

}
