<?php

namespace Appstore\Bundle\RestaurantBundle\Repository;
use Doctrine\ORM\EntityRepository;
use Terminalbd\ProductionBundle\Entity\ProductionBatch;
use Terminalbd\ProductionBundle\Entity\ProductionBatchItem;
use Terminalbd\ProductionBundle\Entity\ProductionExpense;
use Terminalbd\ProductionBundle\Entity\ProductionReceiveBatchItem;


/**
 * ProductionElementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductionExpenseRepository extends EntityRepository
{


    public function productionElementExpense(ProductionBatch $batch)
    {
        $em = $this->_em;


        /* @var $batchItem ProductionBatchItem */

        foreach ($batch->getBatchItems() as $batchItem){

            foreach ($batchItem->getProductionItem()->getElements() as $elm):
                $expense = new ProductionExpense();
                $exist = $this->findOneBy(array('productionItem' => $batchItem->getProductionItem(),'productionBatchItem' => $batchItem,'productionElement' => $elm));
                if($exist){ $expense = $exist; }
                $expense->setProductionItem($batchItem->getProductionItem());
                $expense->setProductionBatchItem($batchItem);
                $expense->setProductionElement($elm);
                $expense->setItem($elm->getMaterial());
                $quantity = ($elm->getQuantity() + $elm->getWastageQuantity());
                $expense->setQuantity($quantity  * $batchItem->getIssueQuantity());
                $expense->setPurchasePrice($elm->getPrice());
                $em->persist($expense);
                $em->flush();
                if($batch->getConfig()->getConsumptionMethod() == 'purachse-consumption'){
                    $em->getRepository('TerminalbdInventoryBundle:PurchaseItem')->rawMaterialConsumtion($expense);
                }else{
                    $em->getRepository('TerminalbdInventoryBundle:StockItem')->rawMaterialDirectConsumption($expense);
                }
            endforeach;
        }

    }

    public function productionReturnElementExpense(ProductionReceiveBatchItem $batch)
    {
        $em = $this->_em;

        $batchItem = $batch->getBatchItem();

        /* @var $batchItem ProductionReceiveBatchItem */

        foreach ($batchItem->getProductionItem()->getElements() as $elm):

            $expense = new ProductionExpense();
            $exist = $this->findOneBy(array('returnReceiveBatchItem'=> $batch, 'productionElement' => $elm, 'item' => $elm->getMaterial()));
            if($exist){ $expense = $exist; }
            $expense->setReturnReceiveBatchItem($batch);
            $expense->setProductionBatchItem($batch->getBatchItem());
            $expense->setProductionElement($elm);
            $expense->setItem($elm->getMaterial());
            $expense->setQuantity(0);
            $quantity = ($elm->getQuantity() + $elm->getWastageQuantity());
            $expense->setReturnQuantity($quantity * $batch->getReturnQuantity());
            $expense->setPurchasePrice($elm->getPrice());
            $em->persist($expense);
            $em->flush();
            if($batch->getBatchItem()->getBatch()->getConfig()->getConsumptionMethod() == 'purachse-consumption') {
                $em->getRepository('TerminalbdInventoryBundle:StockItem')->contructualProductionExpenBatchItemRetun($batch->getBatchItem(), $expense);
            }else{

                $em->createQuery("DELETE TerminalbdInventoryBundle:StockItem e WHERE e.productionExpenseReturn = '{$expense->getId()}'")->execute();
                $em->getRepository('TerminalbdInventoryBundle:StockItem')->contructualDirectProductionExpenBatchItemRetun($batch->getBatchItem(), $expense);
            }

        endforeach;
    }

}
