<?php

namespace Setting\Bundle\ContentBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Setting\Bundle\AppearanceBundle\Entity\Menu;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends EntityRepository
{

    public  function insertPageMenu($page)
    {

        $entity = new Menu();
        $em = $this->_em;
        if($page){

            $entity->setMenu($page->getMenu());
            $entity->setMenuSlug($page->getMenuSlug());
            $entity->setSlug($page->getSlug());
            $entity->setPage($page);
            $entity->setGlobalOption($page->getGlobalOption());

            $em->persist($entity);
            $em->flush();
        }

    }

    public function getPagesFor($globalOption)
    {
        return $this->findBy(array('globalOption'=> $globalOption),array('name' => 'asc'));
    }

    public  function updatePageMenu($page)
    {

        $em = $this->_em;

            $entity = $em->getRepository('SettingAppearanceBundle:Menu')->findOneBy(array('page' => $page->getId()));
            if(!empty($entity)){

                $entity->setMenu($page->getMenu());
                $entity->setMenuSlug($page->getMenuSlug());
                $entity->setSlug($page->getSlug());
                $em->persist($entity);
                $em->flush();

            }else{

                $this->insertPageMenu($page);
            }


    }

    public function findFeatureContent($entity)
    {
        $user = $entity->getUser()->getId();
        $limit = $entity->getUser()->getHomePage()->getShowingListing();
        return $this->getEntityManager()
            ->createQuery('SELECT n FROM SettingContentBundle:Page n WHERE n.status = 1 AND n.user = '.$user.' ORDER BY n.name DESC')
            ->setMaxResults($limit)
            ->getResult();
    }

    public function findUserModuleContent($entity,$limit=5)
    {
        $user = $entity->getUser()->getId();
        $qb = $this->createQueryBuilder('a');
        $qb
            ->where($qb->expr()->eq('a.status', 1))
            ->andWhere($qb->expr()->eq('a.user', $user))
            ->setMaxResults($limit)
            ->orderBy('a.name', 'ASC');

        return $qb->getQuery()->getResult();
    }

    public function getCategoryPage($globalOption,$module,$cat){

        $em = $this->_em;

        $repository = $em->getRepository('SettingContentBundle:Page');
        $query = $repository->createQueryBuilder('p')
            ->innerJoin('p.moduleCategory', 'moduleCategory')
            ->where('p.globalOption = :option')
            ->setParameter('option', $globalOption->getId())
            ->andWhere('p.module = :module')
            ->setParameter('module', $module)
            ->andWhere('moduleCategory.id = :category')
            ->setParameter('category', $cat)
            ->getQuery();

        return $query;
    }


}
