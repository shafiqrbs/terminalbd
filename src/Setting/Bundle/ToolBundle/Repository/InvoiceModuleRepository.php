<?php

namespace Setting\Bundle\ToolBundle\Repository;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\InvoiceModule;
use Setting\Bundle\ToolBundle\Entity\InvoiceModuleItem;
use Setting\Bundle\ToolBundle\Entity\InvoiceSmsEmail;

/**
 * InvoiceModuleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvoiceModuleRepository extends EntityRepository
{

    public function domainInvoice($globalOption)
    {

        $qb = $this->createQueryBuilder('i');
        $qb->where("i.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption->getId());
        $qb->andWhere("i.process != :process");
        $qb->setParameter('process', 'Created');
        $qb->orderBy('i.updated','DESc');
        $query = $qb->getQuery();
        return $query;
    }

    public function insertInvoiceItem(InvoiceModule $invoice)
    {
        $this->insertAppModule($invoice);
        $this->insertModule($invoice);
        $this->insertSyndicateModule($invoice);
        $this->updateInvoice($invoice);
    }

    public function updateInvoice($invoice)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->select('SUM(i.amount)');
        $qb->from('SettingToolBundle:InvoiceModuleItem','i');
        $qb->where("i.invoiceModule = :invoice");
        $qb->setParameter('invoice', $invoice->getId());
        $sum = $qb->getQuery()->getSingleScalarResult();
        $invoice->setTotalAmount($sum);
        $invoice->setPaidAmount($sum);
        $this->_em->persist($invoice);
        $this->_em->flush();

    }

    public function insertAppModule($invoice)
    {
        $globalOption = $invoice->getGlobalOption();
        $modules = $globalOption->getSiteSetting()->getAppModules();
        if(!empty($modules)){
            foreach ($modules as $module){

                $item = New InvoiceModuleItem();
                $item->setInvoiceModule($invoice);
                $item->setAppModule($module);
                $item->setAmount($module->getPrice());
                $this->_em->persist($item);

            }
            $this->_em->flush();
        }


    }
    public function insertModule($invoice)
    {
        $globalOption = $invoice->getGlobalOption();
        $modules = $globalOption->getSiteSetting()->getModules();
        if(!empty($modules)) {
            foreach ($modules as $module) {

                $item = New InvoiceModuleItem();
                $item->setInvoiceModule($invoice);
                $item->setModule($module);
                $item->setAmount($module->getPrice());
                $this->_em->persist($item);

            }
            $this->_em->flush();
        }
    }
    public function insertSyndicateModule($invoice)
    {
        $globalOption = $invoice->getGlobalOption();
        $modules = $globalOption->getSiteSetting()->getSyndicateModules();
        if(!empty($modules)) {
            foreach ($modules as $module) {

                $item = New InvoiceModuleItem();
                $item->setInvoiceModule($invoice);
                $item->setSyndicateModule($module);
                $item->setAmount($module->getPrice());
                $this->_em->persist($item);

            }
            $this->_em->flush();
        }
    }
}
