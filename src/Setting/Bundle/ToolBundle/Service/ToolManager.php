<?php

namespace Setting\Bundle\ToolBundle\Service;

use Doctrine\ORM\EntityManager;
use Doctrine\Bundle\DoctrineBundle\Registry;
use Doctrine\ORM\EntityRepository;
use Doctrine\DBAL\Connection;

use Setting\Bundle\ToolBundle\Entity\GlobalOption;
use Symfony\Component\Debug\Debug;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * RequestManager
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class ToolManager

{

    /**
     * @var EntityManager
     */
    protected $em;
    /**
     * @var \Doctrine\Bundle\DoctrineBundle\Registry
     */
    private $doctrine;

    public function  __construct(Registry $doctrine)
    {
        $this->doctrine = $doctrine;
        $this->em = $doctrine->getManager();
    }



    public function createDirectory($globalOption, $dir = null)
    {

        $assets_dir = $_SERVER['DOCUMENT_ROOT'].'/uploads/domain/';
        if(!file_exists($assets_dir.$globalOption)){
            if(mkdir($assets_dir.$globalOption, 0777, true)){
                //return $path;
                mkdir($assets_dir.$globalOption.'/setting', 0777, true);
                mkdir($assets_dir.$globalOption.'/setting/customize_template', 0777, true);
                mkdir($assets_dir.$globalOption.'/content', 0777, true);
                mkdir($assets_dir.$globalOption.'/inventory', 0777, true);
                mkdir($assets_dir.$globalOption.'/inventory/item/', 0777, true);
                mkdir($assets_dir.$globalOption.'/domain_user', 0777, true);
                mkdir($assets_dir.$globalOption.'/media', 0777, true);

            }else{

                return false;
            }
        }
        if(!empty($dir)){

            $path = $globalOption.'/'.$dir;
            if(!file_exists($assets_dir.$path)){
                if(mkdir($assets_dir.$path, 0777)){
                    return $path;
                }else{
                    return false;
                }
            }
            return $path = $globalOption.'/'.$dir;
        }

    }

    public function create_slide_dir($globalOption)
    {
        $assets_dir = __DIR__.'/../../../../../web/uploads/domain/';
        if(!file_exists($assets_dir.$globalOption)){
            if(mkdir($assets_dir.$globalOption, 0777)){
                mkdir($assets_dir.$globalOption.'/thumbs', 0777);
                mkdir($assets_dir.$globalOption.'/larges', 0777);
                //return $path;
            }else{
                return false;
            }
        }


    }

    public function deleteDirectory($dir)
    {
        if (!file_exists($dir)) return true;
        if (!is_dir($dir) || is_link($dir)) return unlink($dir);
        foreach (scandir($dir) as $item) {
            if ($item == '.' || $item == '..') continue;
            if (!deleteDirectory($dir . "/" . $item)) {
                chmod($dir . "/" . $item, 0777);
                if (!deleteDirectory($dir . "/" . $item)) return false;
            };
        }
        return rmdir($dir);
    }

    public function delete_directory($dir)
    {
        if(is_dir($dir))
        {
            $dir = (substr($dir, -1) != "/")? $dir."/":$dir;
            $openDir = opendir($dir);
            while($file = readdir($openDir))
            {
                if(!in_array($file, array(".", "..")))
                {
                    if(!is_dir($dir.$file))
                        @unlink($dir.$file);

                }
            }
            closedir($openDir);
            @rmdir($dir);
        }
    }

    public function specialExpClean($string) {

        $string = str_replace(' ', '', $string); // Replaces all spaces with hyphens.
        $string = preg_replace('/[^A-Za-z0-9\-]/', '', $string); // Removes special chars.
        return preg_replace('/-+/', '', $string); // Replaces multiple hyphens with single one.
    }

    public function intToWords($x) {

        $nwords = array( "zero", "one", "two", "three", "four", "five", "six", "seven",
            "eight", "nine", "ten", "eleven", "twelve", "thirteen",
            "fourteen", "fifteen", "sixteen", "seventeen", "eighteen",
            "nineteen", "twenty", 30 => "thirty", 40 => "forty",
            50 => "fifty", 60 => "sixty", 70 => "seventy", 80 => "eighty",
            90 => "ninety" );

        if(!is_numeric($x))
            $w = '#';
        else if(fmod($x, 1) != 0)
            $w = '#';
        else {
            if($x < 0) {
                $w = 'minus ';
                $x = -$x;
            } else
                $w = '';
            // ... now $x is a non-negative integer.

            if($x < 21)   // 0 to 20
                $w .= $nwords[$x];
            else if($x < 100) {   // 21 to 99
                $w .= $nwords[10 * floor($x/10)];
                $r = fmod($x, 10);
                if($r > 0)
                    $w .= '-'. $nwords[$r];
            } else if($x < 1000) {   // 100 to 999
                $w .= $nwords[floor($x/100)] .' hundred';
                $r = fmod($x, 100);
                if($r > 0)
                    $w .= ' and '. $this->intToWords($r);
            } else if($x < 1000000) {   // 1000 to 999999
                $w .= $this->intToWords(floor($x/1000)) .' thousand';
                $r = fmod($x, 1000);
                if($r > 0) {
                    $w .= ' ';
                    if($r < 100)
                        $w .= 'and ';
                    $w .= $this->intToWords($r);
                }
            } else {    //  millions
                $w .= $this->intToWords(floor($x/1000000)) .' million';
                $r = fmod($x, 1000000);
                if($r > 0) {
                    $w .= ' ';
                    if($r < 100)
                        $w .= 'and ';
                    $w .= $this->intToWords($r);
                }
            }
        }
        $textAmount = ucwords($w);
        return $textAmount;
    }


}
