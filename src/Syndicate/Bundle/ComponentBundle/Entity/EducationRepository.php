<?php

namespace Syndicate\Bundle\ComponentBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EducationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EducationRepository extends EntityRepository
{


    public function  getVendorList()
    {
        $em = $this->_em;
        return $entities = $em -> getRepository('SyndicateComponentBundle:Education')->findAll();
    }

    public function insertVendor($id)
    {
        $em = $this->_em;
        $entity = $em->getRepository('SyndicateComponentBundle:Education')->findOneBy(array('user'=>$id));
        if(empty($entity)){
            $entity = new Education();
            $user  = $em->getRepository('UserBundle:User')->find($id);
            $entity->setUser($user);
            $em->persist($entity);
            $em->flush();
        }


    }

    public function setUpdateInstituteLevel($entity,$levels){

        $em = $this->_em;

        if(!empty($entity)){

            $synarr = array();
            foreach($levels as $sid ){
                $synarr[] = $em->getRepository('SettingToolBundle:InstituteLevel')->findOneBy(array('id'=>$sid));
            }
            if (!empty($synarr)) {

                $entity->setInstituteLevels($synarr);
                $em->persist($entity);
                $em->flush();
            }


        }

    }




    public function getGeoCode(){

     //Declare search variables

        //Get user entered values using $_GET function and assign them to variables
        if(isset($_GET['location']) && !empty($_GET['location'])){
            $GLOBALS['location'] = filter_input(INPUT_GET, 'location', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
        }
        if(isset($_GET['state']) && !empty($_GET['state'])){
            $GLOBALS['state'] = filter_input(INPUT_GET, 'state', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
        }

        $location = '3 Road 2, Gulshan, Dhaka, Dhaka Division,Bangladesh';
        $state = 'ACT';
        $state = 'NSW';


        //Call the function above get the lat lng for the searched address
        $targetLatLng = $this->geocodeAddy($location.' '.$state);
        //$targetLatLng = $this->geocodeAddy($GLOBALS['location'].' '.$GLOBALS['state']);
        //print the lat, lng variables
        echo $targetLatLng["lat"].', '.$targetLatLng["lng"];

    }

    //function that returns the lat lng of a raw address
    public function geocodeAddy($rawAdd){
        //add the user entered location to the Google Maps API url query string
        $gmapsApiAdd = "http://maps.googleapis.com/maps/api/geocode/json?address=".str_replace(" ","+", urlencode($rawAdd))."&sensor=false";

        //Open the Google Maps API and send it the above url containing user entered address
        //Google Maps will return a JSON file (Javascript multidimensional array)
        if($results = @file_get_contents($gmapsApiAdd)){
            //convert the json file to PHP array
            $response = json_decode($results, true);
            //If the user entered address matched a Google Maps API address, it will return 'OK' in the status field.
            if($response["status"] == "OK"){
                //If okay, find the lat and lng values and assign them to local array
                $latLng = array("lat"=>$response["results"][0]["geometry"]["location"]["lat"],
                    "lng" =>$response["results"][0]["geometry"]["location"]["lng"]);
                return $latLng;
            }
        }
        else{
            echo 'Error: Address not found';
        }
    }


}
