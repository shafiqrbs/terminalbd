<?php
namespace Terminalbd\ReportBundle\Repository;
use Appstore\Bundle\InventoryBundle\Entity\InventoryConfig;
use Appstore\Bundle\InventoryBundle\Entity\Vendor;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;
use Terminalbd\PosBundle\Entity\Pos;
use Terminalbd\PosBundle\Entity\PosItem;

/**
 * VendorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReportRepository extends EntityRepository
{

    /* ================ This part for Inventory Reports ============================*/

    protected function handleSearchBetween($qb,$data)
    {
        if(!empty($data))
        {

            $startDate = isset($data['startDate'])  ? $data['startDate'] : '';
            $endDate = isset($data['endDate'])  ? $data['endDate'] : '';
            $grn =    isset($data['grn'])? $data['grn'] :'';
            $vendor =    isset($data['vendor'])? $data['vendor'] :'';

            if (!empty($startDate)) {
                $datetime = new \DateTime($startDate);
                $start = $datetime->format('Y-m-d 00:00:00');
                $qb->andWhere("e.created >= :startDate")->setParameter('startDate',$start);
            }

            if (!empty($endDate)) {
                $datetime = new \DateTime($endDate);
                $end = $datetime->format('Y-m-d 23:59:59');
                $qb->andWhere("e.created <= :endDate")->setParameter('endDate',$end);
            }

            if (!empty($memo)) {
                $qb->andWhere("e.memo = :memo");
                $qb->setParameter('memo', $memo);
            }
            if (!empty($grn)) {
                $qb->andWhere("e.grn LIKE :grn");
                $qb->setParameter('grn', $grn.'%');
            }
            if (!empty($vendor)) {
                $qb->join('e.vendor', 'v');
                $qb->andWhere("v.companyName = :companyName");
                $qb->setParameter('companyName', $vendor);
            }

        }

    }

    /**
     * @param $qb
     * @param $data
     */

    protected function handleWithSearch($qb,$data)
    {
        if(!empty($data))
        {

            $item = isset($data['item'])? $data['item'] :'';
            $color = isset($data['color'])? $data['color'] :'';
            $size = isset($data['size'])? $data['size'] :'';
            $vendor = isset($data['vendor'])? $data['vendor'] :'';
            $brand = isset($data['brand'])? $data['brand'] :'';
            $category = isset($data['category'])? $data['category'] :'';
            $barcode = isset($data['barcode'])? $data['barcode'] :'';

            if (!empty($barcode)) {
                $qb->join('stock.purchaseItem', 'p');
                $qb->andWhere("p.barcode = :barcode");
                $qb->setParameter('barcode', $barcode);
            }

            if (!empty($item)) {
                $qb->join('item.masterItem', 'm');
                $qb->andWhere("m.name = :name");
                $qb->setParameter('name', $item);
            }

            if (!empty($color)) {
                $qb->join('item.color', 'c');
                $qb->andWhere("c.name = :color");
                $qb->setParameter('color', $color);
            }

            if (!empty($size)) {
                $qb->join('item.size', 's');
                $qb->andWhere("s.name = :size");
                $qb->setParameter('size', $size);
            }

            if (!empty($vendor)) {
                $qb->join('item.vendor', 'v');
                $qb->andWhere("v.companyName = :vendor");
                $qb->setParameter('vendor', $vendor);
            }

            if (!empty($brand)) {
                $qb->join('item.brand', 'b');
                $qb->andWhere("b.name = :brand");
                $qb->setParameter('brand', $brand);
            }

            if (!empty($category)) {
                $qb->join('item.masterItem', 'mc');
                $qb->join('mc.category','cat');
                $qb->andWhere("cat.name = :category");
                $qb->setParameter('category', $category);
            }
        }

    }


    public function invReportPurchaseOverview($inventory,$data)
    {

        $receiveDate = isset($data['receiveDate'])? $data['receiveDate'] :'';
        $memo = isset($data['memo'])? $data['memo'] :'';
        $grn = isset($data['grn'])? $data['grn'] :'';
        $vendor = isset($data['vendor'])? $data['vendor'] :'';
        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:Purchase','purchase');
        $qb->select('SUM(purchase.totalQnt) AS quantity ');
        $qb->addSelect('SUM(purchase.totalAmount) AS total ');
        $qb->addSelect('SUM(purchase.paymentAmount) AS payment');
        $qb->addSelect('SUM(purchase.dueAmount) AS due');
        $qb->addSelect('SUM(purchase.vatAmount) AS vat');
        $qb->addSelect('SUM(purchase.commissionAmount) AS discount');
        $qb->where("purchase.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("purchase.process = 'approved'");
        if (!empty($receiveDate)) {
            $compareTo = new \DateTime($receiveDate);
            $receiveDate =  $compareTo->format('Y-m-d');
            $qb->andWhere("purchase.receiveDate LIKE :receiveDate");
            $qb->setParameter('receiveDate', $receiveDate.'%');

        }
        if (!empty($memo)) {
            $qb->andWhere("purchase.memo = :memo");
            $qb->setParameter('memo', $memo);
        }
        if (!empty($grn)) {
            $qb->andWhere("purchase.grn LIKE :grn");
            $qb->setParameter('grn', $grn.'%');
        }
        if (!empty($vendor)) {
            $qb->join('purchase.vendor', 'v');
            $qb->andWhere("v.companyName = :companyName");
            $qb->setParameter('companyName', $vendor);
        }
        $data = $qb->getQuery()->getOneOrNullResult();
        return $data;

    }

    public function invReportTransactionOverview($inventory , $data)
    {

        $receiveDate = isset($data['receiveDate'])? $data['receiveDate'] :'';
        $memo = isset($data['memo'])? $data['memo'] :'';
        $grn = isset($data['grn'])? $data['grn'] :'';
        $vendor = isset($data['vendor'])? $data['vendor'] :'';

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:Purchase','s');
        $qb->join('s.transactionMethod','t');
        $qb->select('t.name as transactionName , sum(s.totalAmount) as total ,sum(s.paymentAmount) as payment , sum(s.dueAmount) as due, sum(s.commissionAmount) as discount, sum(s.vatAmount) as vat');
        $qb->where('s.inventoryConfig = :inventory');
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'approved');
        if (!empty($receiveDate)) {
            $compareTo = new \DateTime($receiveDate);
            $receiveDate =  $compareTo->format('Y-m-d');
            $qb->andWhere("purchase.receiveDate LIKE :receiveDate");
            $qb->setParameter('receiveDate', $receiveDate.'%');

        }
        if (!empty($memo)) {
            $qb->andWhere("purchase.memo = :memo");
            $qb->setParameter('memo', $memo);
        }
        if (!empty($grn)) {
            $qb->andWhere("purchase.grn LIKE :grn");
            $qb->setParameter('grn', $grn.'%');
        }
        if (!empty($vendor)) {
            $qb->join('purchase.vendor', 'v');
            $qb->andWhere("v.companyName = :companyName");
            $qb->setParameter('companyName', $vendor);
        }
        $qb->groupBy("s.transactionMethod");
        $res = $qb->getQuery();
        return $result = $res->getArrayResult();
    }

    public function invReportAccountPurchaseOverview(User $user ,$data = array())
    {
        $global =  $user->getGlobalOption()->getId();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('AccountingBundle:AccountPurchase','e');
        $qb->select('sum(e.purchaseAmount) as total ,sum(e.payment) as totalPayment');
        $qb->where('e.globalOption = :config');
        $qb->setParameter('config', $global);
        $qb->andWhere('e.process = :process');
        $qb->setParameter('process', 'approved');
        $this->handleSearchBetween($qb,$data);
        return $qb->getQuery()->getOneOrNullResult();
    }

    public function invReportStockPriceOverview($inventory,$data ="")
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->from("InventoryBundle:Item",'e');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->addSelect('SUM(e.remainingQnt * e.purchaseAvgPrice) AS purchasePrice');
        $qb->addSelect('SUM(e.remainingQnt * e.salesAvgPrice) AS salesPrice');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }

    public function invReportPurchasePrice($inventory,$data)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','si');
        $qb->join('si.sales','sales');
        $qb->select('SUM(si.quantity * si.purchasePrice ) AS totalPurchaseAmount');
        $qb->where("sales.inventoryConfig = :inventoryConfig");
        $qb->setParameter('inventoryConfig', $inventory);
        $qb->andWhere('sales.paymentStatus IN(:paymentStatus)');
        $qb->setParameter('paymentStatus',array_values(array('Paid','Due')));
        $this->handleSearchBetween($qb,$data);
        $result = $qb->getQuery()->getSingleResult();
        return $data = $result['totalPurchaseAmount'] ;
    }

    public  function getStockOverview($inventory,$data=''){

        $em = $this->_em;
        $purchase = $em->getRepository('InventoryBundle:Item')->getSumStock($inventory,'purchase',$data);
        $purchaseReturn = $em->getRepository('InventoryBundle:Item')->getSumStock($inventory,'purchaseReturn',$data);
        $purchaseReplace = $em->getRepository('InventoryBundle:Item')->getSumStock($inventory,'purchaseReplace',$data);
        $sales = $em->getRepository('InventoryBundle:Item')->getSumStock($inventory,'sales',$data);
        $salesReturn = $em->getRepository('InventoryBundle:Item')->getSumStock($inventory,'salesReturn',$data);
        $damage = $em->getRepository('InventoryBundle:Item')->getSumStock($inventory,'damage',$data);

        $remaining = (($purchase + $salesReturn ) + ($purchaseReturn + $sales + $damage ));
        $data = array(
            'purchase'=>        $purchase,
            'purchaseReturn'=>  $purchaseReturn,
            'purchaseReplace'=> $purchaseReplace,
            'sales'=>           $sales,
            'salesReturn'=>     $salesReturn,
            'damage'=>          $damage,
            'remaining'=>       $remaining
        );
        return $data;

    }

    public function invReportStockItemPrice($inventory,$data)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:Item', 'item');
        $qb->join('item.masterItem', 'm');
        $qb->join('m.productUnit', 'u');
        $qb->addSelect('item.name as name','item.purchaseQuantity','item.purchaseQuantityReturn','item.salesQuantity','item.salesQuantityReturn','item.damageQuantity','item.remainingQnt','item.purchaseAvgPrice');
        $qb->addSelect('u.name as unit');
        $qb->where("item.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
       // $this->handleSearchBetween($qb,$data);
        $qb->andWhere('item.remainingQnt > 0');
        $qb->orderBy('item.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;

    }

    public function invReportCategoryStockItemPrice($inventory)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:Item', 'item');
        $qb->join('item.masterItem', 'm');
        $qb->join('m.category', 'c');
        $qb->addSelect('c.id as cid','c.name as name','SUM(item.remainingQnt) as quantity','SUM(item.purchaseAvgPrice*item.remainingQnt) as amount');
        $qb->where("item.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('item.remainingQnt > 0');
        $qb->groupBy('c.id');
        $qb->orderBy('c.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;

    }

    public function invReportBrandStockItemPrice($inventory)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:Item', 'item');
        $qb->join('item.brand', 'c');
        $qb->addSelect('c.id as cid','c.name as name','SUM(item.remainingQnt) as quantity','SUM(item.purchaseAvgPrice*item.remainingQnt) as amount');
        $qb->where("item.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('item.remainingQnt > 0');
        $qb->groupBy('c.id');
        $qb->orderBy('c.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;

    }






}
